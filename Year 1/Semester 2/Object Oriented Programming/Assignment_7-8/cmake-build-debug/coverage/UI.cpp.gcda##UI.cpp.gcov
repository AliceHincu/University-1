        -:    0:Source:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/UI.cpp
        -:    0:Graph:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/UI.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/UI.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 20/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "UI.h"
        -:    6:#include <iostream>
        -:    7:#include <map>
        -:    8:#include <functional>
        -:    9:#include <fstream>
        -:   10:#define MAX_PARAMETERS 5
        2:   11:UI::UI(Service& newService):service(newService) {
        1:   11-block  0
        1:   11-block  1
        2:   12:}
        1:   12-block  0
        1:   12-block  1
        -:   13:
    #####:   14:void UI::runProgramAdministrator() {
    $$$$$:   14-block  0
    #####:   15:	std::map<std::string, std::function<void(UI&, std::string)>> mapOfChoices;
    #####:   16:	mapOfChoices["add"] = &UI::addElement;
    $$$$$:   16-block  0
    $$$$$:   16-block  1
    $$$$$:   16-block  2
    $$$$$:   16-block  3
    #####:   17:	mapOfChoices["delete"] = &UI::removeElement;
    $$$$$:   17-block  0
    $$$$$:   17-block  1
    $$$$$:   17-block  2
    $$$$$:   17-block  3
    #####:   18:	mapOfChoices["update"] = &UI::updateElement;
    $$$$$:   18-block  0
    $$$$$:   18-block  1
    $$$$$:   18-block  2
    $$$$$:   18-block  3
    #####:   19:	mapOfChoices["list"] = &UI::listAllElements;
    $$$$$:   19-block  0
    $$$$$:   19-block  1
    $$$$$:   19-block  2
    $$$$$:   19-block  3
    #####:   20:	mapOfChoices["mode"] = &UI::changeMode;
    $$$$$:   20-block  0
    $$$$$:   20-block  1
    $$$$$:   20-block  2
    $$$$$:   20-block  3
    #####:   21:	while(true) {
    $$$$$:   21-block  0
    $$$$$:   21-block  1
    $$$$$:   21-block  2
    #####:   22:		std::string stringLine;
    #####:   23:		std::getline(std::cin, stringLine);
    $$$$$:   23-block  0
    #####:   24:		std::string command;
    #####:   25:		bool isCommand = true;
    #####:   26:		std::string parameters;
    #####:   27:		for (char stringLineIndex : stringLine) {
    $$$$$:   27-block  0
    $$$$$:   27-block  1
    $$$$$:   27-block  2
    $$$$$:   27-block  3
    #####:   28:			if (isCommand and stringLineIndex != ' ') {
    $$$$$:   28-block  0
    $$$$$:   28-block  1
    #####:   29:				command += stringLineIndex;
    $$$$$:   29-block  0
    #####:   30:			} else if (isCommand) {
    $$$$$:   30-block  0
    $$$$$:   30-block  1
    #####:   31:				isCommand = false;
    #####:   32:			}else {
    $$$$$:   32-block  0
    #####:   33:				parameters += stringLineIndex;
    $$$$$:   33-block  0
        -:   34:			}
        -:   35:		}
    #####:   36:		if (command == "exit") {
    $$$$$:   36-block  0
    #####:   37:			exit(0);
    $$$$$:   37-block  0
    $$$$$:   37-block  1
        -:   38:		}
    #####:   39:		auto currentChoice = mapOfChoices.find(command);
    $$$$$:   39-block  0
    #####:   40:		if (currentChoice == mapOfChoices.end()) {
    $$$$$:   40-block  0
    $$$$$:   40-block  1
    #####:   41:			std::cout << "Invalid command\n";
    $$$$$:   41-block  0
    #####:   42:		}else {
    $$$$$:   42-block  0
    #####:   43:			mapOfChoices[command](*this, parameters);
    $$$$$:   43-block  0
    $$$$$:   43-block  1
    $$$$$:   43-block  2
    $$$$$:   43-block  3
    $$$$$:   43-block  4
        -:   44:		}
    #####:   45:	}
    $$$$$:   45-block  0
    $$$$$:   45-block  1
    #####:   46:}
    $$$$$:   46-block  0
    $$$$$:   46-block  1
    $$$$$:   46-block  2
    $$$$$:   46-block  3
    $$$$$:   46-block  4
    $$$$$:   46-block  5
        -:   47:
    #####:   48:void UI::runProgramFieldAgent() {
    $$$$$:   48-block  0
    #####:   49:	std::map<std::string, std::function<void(UI&, std::string)>> mapOfChoices;
    #####:   50:	mapOfChoices["next"] = &UI::nextElement;
    $$$$$:   50-block  0
    $$$$$:   50-block  1
    $$$$$:   50-block  2
    $$$$$:   50-block  3
    #####:   51:	mapOfChoices["save"] = &UI::saveTitle;
    $$$$$:   51-block  0
    $$$$$:   51-block  1
    $$$$$:   51-block  2
    $$$$$:   51-block  3
    #####:   52:	mapOfChoices["list"] = &UI::listProperty;
    $$$$$:   52-block  0
    $$$$$:   52-block  1
    $$$$$:   52-block  2
    $$$$$:   52-block  3
    #####:   53:	mapOfChoices["mylist"] = &UI::myList;
    $$$$$:   53-block  0
    $$$$$:   53-block  1
    $$$$$:   53-block  2
    $$$$$:   53-block  3
    #####:   54:	mapOfChoices["mode"] = &UI::changeMode;
    $$$$$:   54-block  0
    $$$$$:   54-block  1
    $$$$$:   54-block  2
    $$$$$:   54-block  3
    #####:   55:	while(true) {
    $$$$$:   55-block  0
    $$$$$:   55-block  1
    $$$$$:   55-block  2
    #####:   56:		std::string stringLine;
    #####:   57:		std::getline(std::cin, stringLine);
    $$$$$:   57-block  0
    #####:   58:		std::string command;
    #####:   59:		bool isCommand = true;
    #####:   60:		std::string parameters;
    #####:   61:		for (char stringLineIndex : stringLine) {
    $$$$$:   61-block  0
    $$$$$:   61-block  1
    $$$$$:   61-block  2
    $$$$$:   61-block  3
    #####:   62:			if (isCommand and stringLineIndex != ' ') {
    $$$$$:   62-block  0
    $$$$$:   62-block  1
    #####:   63:				command += stringLineIndex;
    $$$$$:   63-block  0
    #####:   64:			} else if (isCommand) {
    $$$$$:   64-block  0
    $$$$$:   64-block  1
    #####:   65:				isCommand = false;
    #####:   66:			}else {
    $$$$$:   66-block  0
    #####:   67:				parameters += stringLineIndex;
    $$$$$:   67-block  0
        -:   68:			}
        -:   69:		}
    #####:   70:		if (command == "exit") {
    $$$$$:   70-block  0
    #####:   71:			exit(0);
    $$$$$:   71-block  0
    $$$$$:   71-block  1
        -:   72:		}
    #####:   73:		auto currentChoice = mapOfChoices.find(command);
    $$$$$:   73-block  0
    #####:   74:		if (currentChoice == mapOfChoices.end()) {
    $$$$$:   74-block  0
    $$$$$:   74-block  1
    #####:   75:			std::cout << "Invalid command\n";
    $$$$$:   75-block  0
    #####:   76:		}else {
    $$$$$:   76-block  0
    #####:   77:			mapOfChoices[command](*this, parameters);
    $$$$$:   77-block  0
    $$$$$:   77-block  1
    $$$$$:   77-block  2
    $$$$$:   77-block  3
    $$$$$:   77-block  4
        -:   78:		}
    #####:   79:	}
    $$$$$:   79-block  0
    $$$$$:   79-block  1
    #####:   80:}
    $$$$$:   80-block  0
    $$$$$:   80-block  1
    $$$$$:   80-block  2
    $$$$$:   80-block  3
    $$$$$:   80-block  4
    $$$$$:   80-block  5
        -:   81:
    #####:   82:void UI::addElement(const std::string& commandParameters) {
    $$$$$:   82-block  0
    #####:   83:	std::string ArrayOfParameters[MAX_PARAMETERS];
    $$$$$:   83-block  0
    $$$$$:   83-block  1
    #####:   84:	int currentCommand = 0;
    #####:   85:	for (auto commandParametersElement: commandParameters) {
    $$$$$:   85-block  0
    $$$$$:   85-block  1
    $$$$$:   85-block  2
    $$$$$:   85-block  3
    #####:   86:		if (commandParametersElement != ',') {
    $$$$$:   86-block  0
    #####:   87:			ArrayOfParameters[currentCommand] += commandParametersElement;
    $$$$$:   87-block  0
    #####:   88:		}else {
    $$$$$:   88-block  0
    #####:   89:			currentCommand++;
    $$$$$:   89-block  0
        -:   90:		}
        -:   91:	}
        -:   92:	try {
    #####:   93:		service.addFootage(ArrayOfParameters[0], ArrayOfParameters[1], ArrayOfParameters[2], ArrayOfParameters[3], ArrayOfParameters[4]);
    $$$$$:   93-block  0
    #####:   94:	}catch (std::exception& exception) {
    $$$$$:   94-block  0
    $$$$$:   94-block  1
    #####:   95:		std::cout << "Invalid parameters\n";
    $$$$$:   95-block  0
    #####:   96:	}
    $$$$$:   96-block  0
    $$$$$:   96-block  1
    $$$$$:   96-block  2
    $$$$$:   96-block  3
    $$$$$:   96-block  4
    #####:   97:}
    $$$$$:   97-block  0
    $$$$$:   97-block  1
    $$$$$:   97-block  2
    $$$$$:   97-block  3
    $$$$$:   97-block  4
    $$$$$:   97-block  5
    $$$$$:   97-block  6
    $$$$$:   97-block  7
    $$$$$:   97-block  8
        -:   98:
    #####:   99:void UI::removeElement(const std::string &commandParameters) {
    $$$$$:   99-block  0
        -:  100:	try {
    #####:  101:		service.deleteFootage(commandParameters);
    $$$$$:  101-block  0
    #####:  102:	}catch (std::exception& exception){
    $$$$$:  102-block  0
    $$$$$:  102-block  1
    $$$$$:  102-block  2
    #####:  103:		std::cout << "Invalid parameters\n";
    $$$$$:  103-block  0
    #####:  104:	}
    $$$$$:  104-block  0
    $$$$$:  104-block  1
    $$$$$:  104-block  2
    $$$$$:  104-block  3
    #####:  105:}
    $$$$$:  105-block  0
    $$$$$:  105-block  1
        -:  106:
    #####:  107:void UI::updateElement(const std::string &commandParameters) {
    $$$$$:  107-block  0
    #####:  108:	std::string ArrayOfParameters[MAX_PARAMETERS];
    $$$$$:  108-block  0
    $$$$$:  108-block  1
    #####:  109:	int currentCommand = 0;
    #####:  110:	for (auto commandParametersElement: commandParameters) {
    $$$$$:  110-block  0
    $$$$$:  110-block  1
    $$$$$:  110-block  2
    $$$$$:  110-block  3
    #####:  111:		if (commandParametersElement != ',') {
    $$$$$:  111-block  0
    #####:  112:			ArrayOfParameters[currentCommand] += commandParametersElement;
    $$$$$:  112-block  0
    #####:  113:		}else {
    $$$$$:  113-block  0
    #####:  114:			currentCommand++;
    $$$$$:  114-block  0
        -:  115:		}
        -:  116:	}
        -:  117:	try {
    #####:  118:		service.updateFootage(ArrayOfParameters[0], ArrayOfParameters[1], ArrayOfParameters[2], ArrayOfParameters[3], ArrayOfParameters[4]);
    $$$$$:  118-block  0
    #####:  119:	}catch (std::exception& exception) {
    $$$$$:  119-block  0
    $$$$$:  119-block  1
    #####:  120:		std::cout << "Invalid parameters\n";
    $$$$$:  120-block  0
    #####:  121:	}
    $$$$$:  121-block  0
    $$$$$:  121-block  1
    $$$$$:  121-block  2
    $$$$$:  121-block  3
    $$$$$:  121-block  4
    #####:  122:}
    $$$$$:  122-block  0
    $$$$$:  122-block  1
    $$$$$:  122-block  2
    $$$$$:  122-block  3
    $$$$$:  122-block  4
    $$$$$:  122-block  5
    $$$$$:  122-block  6
    $$$$$:  122-block  7
    $$$$$:  122-block  8
        -:  123:
    #####:  124:void UI::listAllElements(const std::string &commandParameters) {
    $$$$$:  124-block  0
    #####:  125:	std::vector<Footage> arrayOfFootage = service.getAllElements();
    #####:  126:	if (arrayOfFootage.empty()) {
    $$$$$:  126-block  0
    #####:  127:		std::cout << "There are no footage in the list\n";
    $$$$$:  127-block  0
    #####:  128:		return;
    $$$$$:  128-block  0
        -:  129:	}
    #####:  130:	for (auto & arrayOfFootageIndex : arrayOfFootage) {
    $$$$$:  130-block  0
    $$$$$:  130-block  1
    $$$$$:  130-block  2
    $$$$$:  130-block  3
    #####:  131:		std::cout << arrayOfFootageIndex.toString() << "\n";
    $$$$$:  131-block  0
    $$$$$:  131-block  1
    $$$$$:  131-block  2
    $$$$$:  131-block  3
        -:  132:	}
    #####:  133:}
    $$$$$:  133-block  0
    $$$$$:  133-block  1
    $$$$$:  133-block  2
    $$$$$:  133-block  3
    $$$$$:  133-block  4
    $$$$$:  133-block  5
        -:  134:
        1:  135:void UI::runProgram() {
        1:  135-block  0
        1:  136:	std::string fileLine;
        1:  137:	std::getline(std::cin,fileLine);
        1:  137-block  0
        1:  138:	std::string commandFile, path;
        1:  139:	bool isCommand = true;
        4:  140:	for (auto fileLineCharacter: fileLine) {
        1:  140-block  0
        4:  140-block  1
        3:  140-block  2
        3:  140-block  3
        3:  141:		if (isCommand and fileLineCharacter != ' ') {
        3:  141-block  0
        3:  141-block  1
        3:  142:			commandFile += fileLineCharacter;
        3:  142-block  0
        3:  143:		}else if (isCommand) {
        3:  143-block  0
    $$$$$:  143-block  1
    #####:  144:			isCommand = false;
    #####:  145:		}else {
    $$$$$:  145-block  0
    #####:  146:			path += fileLineCharacter;
    $$$$$:  146-block  0
        -:  147:		}
        -:  148:	}
        1:  149:	if (commandFile != "fileLocation") {
        1:  149-block  0
        1:  150:		std::cout << "Invalid command";
        1:  150-block  0
        1:  151:		return;
        1:  151-block  0
        -:  152:	}
    #####:  153:	service.setPath(path);
    $$$$$:  153-block  0
        -:  154:
    #####:  155:	std::string modeLine;
    #####:  156:	std::getline(std::cin, modeLine);
    $$$$$:  156-block  0
    #####:  157:	std::string command, mode;
    #####:  158:	isCommand = true;
    #####:  159:	for (auto modeLineIndex: modeLine) {
    $$$$$:  159-block  0
    $$$$$:  159-block  1
    $$$$$:  159-block  2
    $$$$$:  159-block  3
    #####:  160:		if (isCommand and modeLineIndex != ' ') {
    $$$$$:  160-block  0
    $$$$$:  160-block  1
    #####:  161:			command += modeLineIndex;
    $$$$$:  161-block  0
    #####:  162:		}else if (isCommand) {
    $$$$$:  162-block  0
    $$$$$:  162-block  1
    #####:  163:			isCommand = false;
    #####:  164:		}else if (modeLineIndex != ' ') {
    $$$$$:  164-block  0
    $$$$$:  164-block  1
    #####:  165:			mode += modeLineIndex;
    $$$$$:  165-block  0
    #####:  166:		}
    $$$$$:  166-block  0
        -:  167:	}
    #####:  168:	if (command != "mode") {
    $$$$$:  168-block  0
    #####:  169:		std::cout << "Invalid command\n";
    $$$$$:  169-block  0
    #####:  170:	}else {
    $$$$$:  170-block  0
    #####:  171:		changeMode(mode);
    $$$$$:  171-block  0
        -:  172:	}
        1:  173:}
    $$$$$:  173-block  0
    $$$$$:  173-block  1
    $$$$$:  173-block  2
    $$$$$:  173-block  3
    $$$$$:  173-block  4
        1:  173-block  5
        1:  173-block  6
    $$$$$:  173-block  7
    $$$$$:  173-block  8
    $$$$$:  173-block  9
    $$$$$:  173-block 10
        -:  174:
    #####:  175:void UI::changeMode(const std::string &commandParameters) {
    $$$$$:  175-block  0
    #####:  176:	if (commandParameters == "A") {
    $$$$$:  176-block  0
    #####:  177:		runProgramAdministrator();
    #####:  178:	}else if (commandParameters == "B") {
    $$$$$:  178-block  0
    $$$$$:  178-block  1
    #####:  179:		runProgramFieldAgent();
    #####:  180:	} else {
    $$$$$:  180-block  0
    #####:  181:		std::cout <<"Invalid mode\n";
    $$$$$:  181-block  0
        -:  182:	}
    #####:  183:}
    $$$$$:  183-block  0
        -:  184:
    #####:  185:void UI::nextElement(const std::string &commandParameters) {
    $$$$$:  185-block  0
    #####:  186:	Footage currentFootage = service.getCurrent();
    #####:  187:	std::cout << currentFootage.toString() << '\n';
    $$$$$:  187-block  0
    $$$$$:  187-block  1
    $$$$$:  187-block  2
    $$$$$:  187-block  3
    #####:  188:}
    $$$$$:  188-block  0
    $$$$$:  188-block  1
    $$$$$:  188-block  2
    $$$$$:  188-block  3
        -:  189:
    #####:  190:void UI::saveTitle(const std::string &commandParameters) {
    $$$$$:  190-block  0
        -:  191:	try {
    #####:  192:		service.addToMyList(commandParameters);
    $$$$$:  192-block  0
    #####:  193:	}catch (std::exception&) {
    $$$$$:  193-block  0
    $$$$$:  193-block  1
    $$$$$:  193-block  2
    #####:  194:		std::cout << "Invalid title" << '\n';
    $$$$$:  194-block  0
    $$$$$:  194-block  1
    #####:  195:	}
    $$$$$:  195-block  0
    $$$$$:  195-block  1
    $$$$$:  195-block  2
    $$$$$:  195-block  3
    #####:  196:}
    $$$$$:  196-block  0
    $$$$$:  196-block  1
        -:  197:
    #####:  198:void UI::myList(const std::string &commandParameters) {
    $$$$$:  198-block  0
    #####:  199:	auto myListFootage = service.getMyList();
    #####:  200:	for (auto & myListIndex : myListFootage) {
    $$$$$:  200-block  0
    $$$$$:  200-block  1
    $$$$$:  200-block  2
    $$$$$:  200-block  3
    #####:  201:		std::cout << myListIndex.toString() << '\n';
    $$$$$:  201-block  0
    $$$$$:  201-block  1
    $$$$$:  201-block  2
    $$$$$:  201-block  3
        -:  202:	}
    #####:  203:}
    $$$$$:  203-block  0
    $$$$$:  203-block  1
    $$$$$:  203-block  2
    $$$$$:  203-block  3
        -:  204:
    #####:  205:void UI::listProperty(const std::string &commandParameters) {
    $$$$$:  205-block  0
    #####:  206:	std::string ArrayOfParameters[MAX_PARAMETERS];
    $$$$$:  206-block  0
    $$$$$:  206-block  1
    #####:  207:	int currentCommand = 0;
    #####:  208:	for (auto commandParametersElement: commandParameters) {
    $$$$$:  208-block  0
    $$$$$:  208-block  1
    $$$$$:  208-block  2
    $$$$$:  208-block  3
    #####:  209:		if (commandParametersElement != ',') {
    $$$$$:  209-block  0
    #####:  210:			ArrayOfParameters[currentCommand] += commandParametersElement;
    $$$$$:  210-block  0
    #####:  211:		}else {
    $$$$$:  211-block  0
    #####:  212:			currentCommand++;
    $$$$$:  212-block  0
        -:  213:		}
        -:  214:	}
    #####:  215:	std::vector<Footage> filteredListOfFootage;
        -:  216:	try {
    #####:  217:		filteredListOfFootage = service.getFilteredList(ArrayOfParameters[0], ArrayOfParameters[1]);
    $$$$$:  217-block  0
    #####:  218:	}catch (std::exception&) {
    $$$$$:  218-block  0
    $$$$$:  218-block  1
    #####:  219:		std::cout << "Invalid parameters\n";
    $$$$$:  219-block  0
    #####:  220:	}
    $$$$$:  220-block  0
    $$$$$:  220-block  1
    $$$$$:  220-block  2
    $$$$$:  220-block  3
    $$$$$:  220-block  4
    #####:  221:	if (filteredListOfFootage.empty()) {
    $$$$$:  221-block  0
    #####:  222:		std::cout << "There are no elements with given property\n";
    $$$$$:  222-block  0
    #####:  223:	}else {
    $$$$$:  223-block  0
    #####:  224:		for (auto & filteredListIndex : filteredListOfFootage) {
    $$$$$:  224-block  0
    $$$$$:  224-block  1
    $$$$$:  224-block  2
    $$$$$:  224-block  3
    #####:  225:			std::cout << filteredListIndex.toString() << '\n';
    $$$$$:  225-block  0
    $$$$$:  225-block  1
    $$$$$:  225-block  2
    $$$$$:  225-block  3
        -:  226:		}
        -:  227:	}
    #####:  228:}
    $$$$$:  228-block  0
    $$$$$:  228-block  1
    $$$$$:  228-block  2
    $$$$$:  228-block  3
    $$$$$:  228-block  4
    $$$$$:  228-block  5
    $$$$$:  228-block  6
    $$$$$:  228-block  7
    $$$$$:  228-block  8
    $$$$$:  228-block  9
    $$$$$:  228-block 10
