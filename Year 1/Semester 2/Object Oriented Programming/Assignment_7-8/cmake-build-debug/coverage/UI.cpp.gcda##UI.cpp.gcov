        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_7-8/UI.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/UI.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/UI.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 20/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "UI.h"
        -:    6:#include <iostream>
        -:    7:#include <map>
        -:    8:#include <functional>
        -:    9:#define MAX_PARAMETERS 5
    #####:   10:UI::UI(Service& newService):service(newService) {
    $$$$$:   10-block  0
    $$$$$:   10-block  1
    #####:   11:}
    $$$$$:   11-block  0
    $$$$$:   11-block  1
        -:   12:
    #####:   13:void UI::runProgramAdministrator() {
    $$$$$:   13-block  0
    #####:   14:	std::map<std::string, std::function<void(UI&, std::string)>> mapOfChoices;
    #####:   15:	mapOfChoices["add"] = &UI::addElement;
    $$$$$:   15-block  0
    $$$$$:   15-block  1
    $$$$$:   15-block  2
    $$$$$:   15-block  3
    #####:   16:	mapOfChoices["delete"] = &UI::removeElement;
    $$$$$:   16-block  0
    $$$$$:   16-block  1
    $$$$$:   16-block  2
    $$$$$:   16-block  3
    #####:   17:	mapOfChoices["update"] = &UI::updateElement;
    $$$$$:   17-block  0
    $$$$$:   17-block  1
    $$$$$:   17-block  2
    $$$$$:   17-block  3
    #####:   18:	mapOfChoices["list"] = &UI::listAllElements;
    $$$$$:   18-block  0
    $$$$$:   18-block  1
    $$$$$:   18-block  2
    $$$$$:   18-block  3
    #####:   19:	mapOfChoices["mode"] = &UI::changeMode;
    $$$$$:   19-block  0
    $$$$$:   19-block  1
    $$$$$:   19-block  2
    $$$$$:   19-block  3
    #####:   20:	while(true) {
    $$$$$:   20-block  0
    $$$$$:   20-block  1
    $$$$$:   20-block  2
    #####:   21:		std::string stringLine;
    #####:   22:		std::getline(std::cin, stringLine);
    $$$$$:   22-block  0
    #####:   23:		std::string command;
    #####:   24:		bool isCommand = true;
    #####:   25:		std::string parameters;
    #####:   26:		for (char stringLineIndex : stringLine) {
    $$$$$:   26-block  0
    $$$$$:   26-block  1
    $$$$$:   26-block  2
    $$$$$:   26-block  3
    #####:   27:			if (isCommand and stringLineIndex != ' ') {
    $$$$$:   27-block  0
    $$$$$:   27-block  1
    #####:   28:				command += stringLineIndex;
    $$$$$:   28-block  0
    #####:   29:			} else if (isCommand) {
    $$$$$:   29-block  0
    $$$$$:   29-block  1
    #####:   30:				isCommand = false;
    #####:   31:			}else {
    $$$$$:   31-block  0
    #####:   32:				parameters += stringLineIndex;
    $$$$$:   32-block  0
        -:   33:			}
        -:   34:		}
    #####:   35:		if (command == "exit") {
    $$$$$:   35-block  0
    #####:   36:			exit(0);
    $$$$$:   36-block  0
    $$$$$:   36-block  1
        -:   37:		}
    #####:   38:		auto currentChoice = mapOfChoices.find(command);
    $$$$$:   38-block  0
    #####:   39:		if (currentChoice == mapOfChoices.end()) {
    $$$$$:   39-block  0
    $$$$$:   39-block  1
    #####:   40:			std::cout << "Invalid command\n";
    $$$$$:   40-block  0
    #####:   41:		}else {
    $$$$$:   41-block  0
    #####:   42:			mapOfChoices[command](*this, parameters);
    $$$$$:   42-block  0
    $$$$$:   42-block  1
    $$$$$:   42-block  2
    $$$$$:   42-block  3
    $$$$$:   42-block  4
        -:   43:		}
    #####:   44:	}
    $$$$$:   44-block  0
    $$$$$:   44-block  1
    #####:   45:}
    $$$$$:   45-block  0
    $$$$$:   45-block  1
    $$$$$:   45-block  2
    $$$$$:   45-block  3
    $$$$$:   45-block  4
    $$$$$:   45-block  5
        -:   46:
    #####:   47:void UI::runProgramFieldAgent() {
    $$$$$:   47-block  0
    #####:   48:	std::map<std::string, std::function<void(UI&, std::string)>> mapOfChoices;
    #####:   49:	mapOfChoices["next"] = &UI::nextElement;
    $$$$$:   49-block  0
    $$$$$:   49-block  1
    $$$$$:   49-block  2
    $$$$$:   49-block  3
    #####:   50:	mapOfChoices["save"] = &UI::saveTitle;
    $$$$$:   50-block  0
    $$$$$:   50-block  1
    $$$$$:   50-block  2
    $$$$$:   50-block  3
    #####:   51:	mapOfChoices["list"] = &UI::listProperty;
    $$$$$:   51-block  0
    $$$$$:   51-block  1
    $$$$$:   51-block  2
    $$$$$:   51-block  3
    #####:   52:	mapOfChoices["mylist"] = &UI::myList;
    $$$$$:   52-block  0
    $$$$$:   52-block  1
    $$$$$:   52-block  2
    $$$$$:   52-block  3
    #####:   53:	mapOfChoices["mode"] = &UI::changeMode;
    $$$$$:   53-block  0
    $$$$$:   53-block  1
    $$$$$:   53-block  2
    $$$$$:   53-block  3
    #####:   54:	while(true) {
    $$$$$:   54-block  0
    $$$$$:   54-block  1
    $$$$$:   54-block  2
    #####:   55:		std::string stringLine;
    #####:   56:		std::getline(std::cin, stringLine);
    $$$$$:   56-block  0
    #####:   57:		std::string command;
    #####:   58:		bool isCommand = true;
    #####:   59:		std::string parameters;
    #####:   60:		for (char stringLineIndex : stringLine) {
    $$$$$:   60-block  0
    $$$$$:   60-block  1
    $$$$$:   60-block  2
    $$$$$:   60-block  3
    #####:   61:			if (isCommand and stringLineIndex != ' ') {
    $$$$$:   61-block  0
    $$$$$:   61-block  1
    #####:   62:				command += stringLineIndex;
    $$$$$:   62-block  0
    #####:   63:			} else if (isCommand) {
    $$$$$:   63-block  0
    $$$$$:   63-block  1
    #####:   64:				isCommand = false;
    #####:   65:			}else {
    $$$$$:   65-block  0
    #####:   66:				parameters += stringLineIndex;
    $$$$$:   66-block  0
        -:   67:			}
        -:   68:		}
    #####:   69:		if (command == "exit") {
    $$$$$:   69-block  0
    #####:   70:			exit(0);
    $$$$$:   70-block  0
    $$$$$:   70-block  1
        -:   71:		}
    #####:   72:		auto currentChoice = mapOfChoices.find(command);
    $$$$$:   72-block  0
    #####:   73:		if (currentChoice == mapOfChoices.end()) {
    $$$$$:   73-block  0
    $$$$$:   73-block  1
    #####:   74:			std::cout << "Invalid command\n";
    $$$$$:   74-block  0
    #####:   75:		}else {
    $$$$$:   75-block  0
    #####:   76:			mapOfChoices[command](*this, parameters);
    $$$$$:   76-block  0
    $$$$$:   76-block  1
    $$$$$:   76-block  2
    $$$$$:   76-block  3
    $$$$$:   76-block  4
        -:   77:		}
    #####:   78:	}
    $$$$$:   78-block  0
    $$$$$:   78-block  1
    #####:   79:}
    $$$$$:   79-block  0
    $$$$$:   79-block  1
    $$$$$:   79-block  2
    $$$$$:   79-block  3
    $$$$$:   79-block  4
    $$$$$:   79-block  5
        -:   80:
    #####:   81:void UI::addElement(const std::string& commandParameters) {
    $$$$$:   81-block  0
    #####:   82:	std::string ArrayOfParameters[MAX_PARAMETERS];
    $$$$$:   82-block  0
    $$$$$:   82-block  1
    #####:   83:	int currentCommand = 0;
    #####:   84:	for (auto commandParametersElement: commandParameters) {
    $$$$$:   84-block  0
    $$$$$:   84-block  1
    $$$$$:   84-block  2
    $$$$$:   84-block  3
    #####:   85:		if (commandParametersElement != ',') {
    $$$$$:   85-block  0
    #####:   86:			ArrayOfParameters[currentCommand] += commandParametersElement;
    $$$$$:   86-block  0
    #####:   87:		}else {
    $$$$$:   87-block  0
    #####:   88:			currentCommand++;
    $$$$$:   88-block  0
        -:   89:		}
        -:   90:	}
        -:   91:	try {
    #####:   92:		service.addFootage(ArrayOfParameters[0], ArrayOfParameters[1], ArrayOfParameters[2], ArrayOfParameters[3], ArrayOfParameters[4]);
    $$$$$:   92-block  0
    #####:   93:	}catch (std::exception& exception) {
    $$$$$:   93-block  0
    $$$$$:   93-block  1
    #####:   94:		std::cout << "Invalid parameters\n";
    $$$$$:   94-block  0
    #####:   95:	}
    $$$$$:   95-block  0
    $$$$$:   95-block  1
    $$$$$:   95-block  2
    $$$$$:   95-block  3
    $$$$$:   95-block  4
    #####:   96:}
    $$$$$:   96-block  0
    $$$$$:   96-block  1
    $$$$$:   96-block  2
    $$$$$:   96-block  3
    $$$$$:   96-block  4
    $$$$$:   96-block  5
    $$$$$:   96-block  6
    $$$$$:   96-block  7
    $$$$$:   96-block  8
        -:   97:
    #####:   98:void UI::removeElement(const std::string &commandParameters) {
    $$$$$:   98-block  0
        -:   99:	try {
    #####:  100:		service.deleteFootage(commandParameters);
    $$$$$:  100-block  0
    #####:  101:	}catch (std::exception& exception){
    $$$$$:  101-block  0
    $$$$$:  101-block  1
    $$$$$:  101-block  2
    #####:  102:		std::cout << "Invalid parameters\n";
    $$$$$:  102-block  0
    #####:  103:	}
    $$$$$:  103-block  0
    $$$$$:  103-block  1
    $$$$$:  103-block  2
    $$$$$:  103-block  3
    #####:  104:}
    $$$$$:  104-block  0
    $$$$$:  104-block  1
        -:  105:
    #####:  106:void UI::updateElement(const std::string &commandParameters) {
    $$$$$:  106-block  0
    #####:  107:	std::string ArrayOfParameters[MAX_PARAMETERS];
    $$$$$:  107-block  0
    $$$$$:  107-block  1
    #####:  108:	int currentCommand = 0;
    #####:  109:	for (auto commandParametersElement: commandParameters) {
    $$$$$:  109-block  0
    $$$$$:  109-block  1
    $$$$$:  109-block  2
    $$$$$:  109-block  3
    #####:  110:		if (commandParametersElement != ',') {
    $$$$$:  110-block  0
    #####:  111:			ArrayOfParameters[currentCommand] += commandParametersElement;
    $$$$$:  111-block  0
    #####:  112:		}else {
    $$$$$:  112-block  0
    #####:  113:			currentCommand++;
    $$$$$:  113-block  0
        -:  114:		}
        -:  115:	}
        -:  116:	try {
    #####:  117:		service.updateFootage(ArrayOfParameters[0], ArrayOfParameters[1], ArrayOfParameters[2], ArrayOfParameters[3], ArrayOfParameters[4]);
    $$$$$:  117-block  0
    #####:  118:	}catch (std::exception& exception) {
    $$$$$:  118-block  0
    $$$$$:  118-block  1
    #####:  119:		std::cout << "Invalid parameters\n";
    $$$$$:  119-block  0
    #####:  120:	}
    $$$$$:  120-block  0
    $$$$$:  120-block  1
    $$$$$:  120-block  2
    $$$$$:  120-block  3
    $$$$$:  120-block  4
    #####:  121:}
    $$$$$:  121-block  0
    $$$$$:  121-block  1
    $$$$$:  121-block  2
    $$$$$:  121-block  3
    $$$$$:  121-block  4
    $$$$$:  121-block  5
    $$$$$:  121-block  6
    $$$$$:  121-block  7
    $$$$$:  121-block  8
        -:  122:
    #####:  123:void UI::listAllElements(const std::string &commandParameters) {
    $$$$$:  123-block  0
    #####:  124:	std::vector<Footage> arrayOfFootage = service.getAllElements();
    #####:  125:	if (arrayOfFootage.empty()) {
    $$$$$:  125-block  0
    #####:  126:		std::cout << "There are no footage in the list\n";
    $$$$$:  126-block  0
    #####:  127:		return;
    $$$$$:  127-block  0
        -:  128:	}
    #####:  129:	for (auto & arrayOfFootageIndex : arrayOfFootage) {
    $$$$$:  129-block  0
    $$$$$:  129-block  1
    $$$$$:  129-block  2
    $$$$$:  129-block  3
    #####:  130:		std::cout << arrayOfFootageIndex.toString() << "\n";
    $$$$$:  130-block  0
    $$$$$:  130-block  1
    $$$$$:  130-block  2
    $$$$$:  130-block  3
        -:  131:	}
    #####:  132:}
    $$$$$:  132-block  0
    $$$$$:  132-block  1
    $$$$$:  132-block  2
    $$$$$:  132-block  3
    $$$$$:  132-block  4
    $$$$$:  132-block  5
        -:  133:
    #####:  134:void UI::runProgram() {
    $$$$$:  134-block  0
    #####:  135:	std::string fileLine;
    #####:  136:	std::getline(std::cin,fileLine);
    $$$$$:  136-block  0
    #####:  137:	std::string commandFile, path;
    #####:  138:	bool isCommand = true;
    #####:  139:	for (auto fileLineCharacter: fileLine) {
    $$$$$:  139-block  0
    $$$$$:  139-block  1
    $$$$$:  139-block  2
    $$$$$:  139-block  3
    #####:  140:		if (isCommand and fileLineCharacter != ' ') {
    $$$$$:  140-block  0
    $$$$$:  140-block  1
    #####:  141:			commandFile += fileLineCharacter;
    $$$$$:  141-block  0
    #####:  142:		}else if (isCommand) {
    $$$$$:  142-block  0
    $$$$$:  142-block  1
    #####:  143:			isCommand = false;
    #####:  144:		}else {
    $$$$$:  144-block  0
    #####:  145:			path += fileLineCharacter;
    $$$$$:  145-block  0
        -:  146:		}
        -:  147:	}
    #####:  148:	if (commandFile != "fileLocation") {
    $$$$$:  148-block  0
    #####:  149:		std::cout << "Invalid command";
    $$$$$:  149-block  0
    #####:  150:		exit(0);
    $$$$$:  150-block  0
    $$$$$:  150-block  1
        -:  151:	}
    #####:  152:	service.setPath(path);
    $$$$$:  152-block  0
        -:  153:
    #####:  154:	std::string modeLine;
    #####:  155:	std::getline(std::cin, modeLine);
    $$$$$:  155-block  0
    #####:  156:	std::string command, mode;
    #####:  157:	isCommand = true;
    #####:  158:	for (auto modeLineIndex: modeLine) {
    $$$$$:  158-block  0
    $$$$$:  158-block  1
    $$$$$:  158-block  2
    $$$$$:  158-block  3
    #####:  159:		if (isCommand and modeLineIndex != ' ') {
    $$$$$:  159-block  0
    $$$$$:  159-block  1
    #####:  160:			command += modeLineIndex;
    $$$$$:  160-block  0
    #####:  161:		}else if (isCommand) {
    $$$$$:  161-block  0
    $$$$$:  161-block  1
    #####:  162:			isCommand = false;
    #####:  163:		}else if (modeLineIndex != ' ') {
    $$$$$:  163-block  0
    $$$$$:  163-block  1
    #####:  164:			mode += modeLineIndex;
    $$$$$:  164-block  0
    #####:  165:		}
    $$$$$:  165-block  0
        -:  166:	}
    #####:  167:	if (command != "mode") {
    $$$$$:  167-block  0
    #####:  168:		std::cout << "Invalid command\n";
    $$$$$:  168-block  0
    #####:  169:	}else {
    $$$$$:  169-block  0
    #####:  170:		changeMode(mode);
    $$$$$:  170-block  0
        -:  171:	}
    #####:  172:}
    $$$$$:  172-block  0
    $$$$$:  172-block  1
    $$$$$:  172-block  2
    $$$$$:  172-block  3
    $$$$$:  172-block  4
    $$$$$:  172-block  5
    $$$$$:  172-block  6
    $$$$$:  172-block  7
    $$$$$:  172-block  8
        -:  173:
    #####:  174:void UI::changeMode(const std::string &commandParameters) {
    $$$$$:  174-block  0
    #####:  175:	if (commandParameters == "A") {
    $$$$$:  175-block  0
    #####:  176:		runProgramAdministrator();
    #####:  177:	}else if (commandParameters == "B") {
    $$$$$:  177-block  0
    $$$$$:  177-block  1
    #####:  178:		runProgramFieldAgent();
    #####:  179:	} else {
    $$$$$:  179-block  0
    #####:  180:		std::cout <<"Invalid mode\n";
    $$$$$:  180-block  0
        -:  181:	}
    #####:  182:}
    $$$$$:  182-block  0
        -:  183:
    #####:  184:void UI::nextElement(const std::string &commandParameters) {
    $$$$$:  184-block  0
    #####:  185:	Footage currentFootage = service.getCurrent();
    #####:  186:	std::cout << currentFootage.toString() << '\n';
    $$$$$:  186-block  0
    $$$$$:  186-block  1
    $$$$$:  186-block  2
    $$$$$:  186-block  3
    #####:  187:}
    $$$$$:  187-block  0
    $$$$$:  187-block  1
    $$$$$:  187-block  2
    $$$$$:  187-block  3
        -:  188:
    #####:  189:void UI::saveTitle(const std::string &commandParameters) {
    $$$$$:  189-block  0
        -:  190:	try {
    #####:  191:		service.addToMyList(commandParameters);
    $$$$$:  191-block  0
    #####:  192:	}catch (std::exception&) {
    $$$$$:  192-block  0
    $$$$$:  192-block  1
    $$$$$:  192-block  2
    #####:  193:		std::cout << "Invalid title" << '\n';
    $$$$$:  193-block  0
    $$$$$:  193-block  1
    #####:  194:	}
    $$$$$:  194-block  0
    $$$$$:  194-block  1
    $$$$$:  194-block  2
    $$$$$:  194-block  3
    #####:  195:}
    $$$$$:  195-block  0
    $$$$$:  195-block  1
        -:  196:
    #####:  197:void UI::myList(const std::string &commandParameters) {
    $$$$$:  197-block  0
    #####:  198:	auto myListFootage = service.getMyList();
    #####:  199:	for (auto & myListIndex : myListFootage) {
    $$$$$:  199-block  0
    $$$$$:  199-block  1
    $$$$$:  199-block  2
    $$$$$:  199-block  3
    #####:  200:		std::cout << myListIndex.toString() << '\n';
    $$$$$:  200-block  0
    $$$$$:  200-block  1
    $$$$$:  200-block  2
    $$$$$:  200-block  3
        -:  201:	}
    #####:  202:}
    $$$$$:  202-block  0
    $$$$$:  202-block  1
    $$$$$:  202-block  2
    $$$$$:  202-block  3
        -:  203:
    #####:  204:void UI::listProperty(const std::string &commandParameters) {
    $$$$$:  204-block  0
    #####:  205:	std::string ArrayOfParameters[MAX_PARAMETERS];
    $$$$$:  205-block  0
    $$$$$:  205-block  1
    #####:  206:	int currentCommand = 0;
    #####:  207:	for (auto commandParametersElement: commandParameters) {
    $$$$$:  207-block  0
    $$$$$:  207-block  1
    $$$$$:  207-block  2
    $$$$$:  207-block  3
    #####:  208:		if (commandParametersElement != ',') {
    $$$$$:  208-block  0
    #####:  209:			ArrayOfParameters[currentCommand] += commandParametersElement;
    $$$$$:  209-block  0
    #####:  210:		}else {
    $$$$$:  210-block  0
    #####:  211:			currentCommand++;
    $$$$$:  211-block  0
        -:  212:		}
        -:  213:	}
    #####:  214:	std::vector<Footage> filteredListOfFootage;
        -:  215:	try {
    #####:  216:		filteredListOfFootage = service.getFilteredList(ArrayOfParameters[0], ArrayOfParameters[1]);
    $$$$$:  216-block  0
    #####:  217:	}catch (std::exception&) {
    $$$$$:  217-block  0
    $$$$$:  217-block  1
    #####:  218:		std::cout << "Invalid parameters\n";
    $$$$$:  218-block  0
    #####:  219:	}
    $$$$$:  219-block  0
    $$$$$:  219-block  1
    $$$$$:  219-block  2
    $$$$$:  219-block  3
    $$$$$:  219-block  4
    #####:  220:	if (filteredListOfFootage.empty()) {
    $$$$$:  220-block  0
    #####:  221:		std::cout << "There are no elements with given property\n";
    $$$$$:  221-block  0
    #####:  222:	}else {
    $$$$$:  222-block  0
    #####:  223:		for (auto & filteredListIndex : filteredListOfFootage) {
    $$$$$:  223-block  0
    $$$$$:  223-block  1
    $$$$$:  223-block  2
    $$$$$:  223-block  3
    #####:  224:			std::cout << filteredListIndex.toString() << '\n';
    $$$$$:  224-block  0
    $$$$$:  224-block  1
    $$$$$:  224-block  2
    $$$$$:  224-block  3
        -:  225:		}
        -:  226:	}
    #####:  227:}
    $$$$$:  227-block  0
    $$$$$:  227-block  1
    $$$$$:  227-block  2
    $$$$$:  227-block  3
    $$$$$:  227-block  4
    $$$$$:  227-block  5
    $$$$$:  227-block  6
    $$$$$:  227-block  7
    $$$$$:  227-block  8
    $$$$$:  227-block  9
    $$$$$:  227-block 10
