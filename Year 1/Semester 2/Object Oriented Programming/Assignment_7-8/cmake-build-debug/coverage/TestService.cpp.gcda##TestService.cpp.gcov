        -:    0:Source:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/TestService.cpp
        -:    0:Graph:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/TestService.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/TestService.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 24/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "TestService.h"
        -:    6:#include "Service.h"
        -:    7:#include <exception>
        -:    8:#include <cassert>
        -:    9:
        1:   10:void TestService::test_all() {
        1:   11:	test_addFootage_ValidInput_FootageAdded();
        1:   11-block  0
        1:   12:	test_addFootage_InvalidDateFormat_FootageNotAdded();
        1:   13:	test_addFootage_InvalidDate_FootageNotAdded();
        1:   14:	test_addFootage_FutureDate_FootageNotAdded();
        1:   15:	test_addFootage_InvalidAccessCount_FootageNotAdded();
        1:   16:	test_addFootage_DuplicateFootage_FootageNotAdded();
        -:   17:
        1:   18:	test_deleteFootage_ValidInput_FootageRemoved();
        1:   19:	test_deleteFootage_Inexistent_FootageNotRemoved();
        -:   20:
        1:   21:	test_updateFootage_ValidInput_FootageChanged();
        1:   22:	test_updateFootage_InvalidDateFormat_FootageNotChanged();
        1:   23:	test_updateFootage_InvalidDate_FootageNotChanged();
        1:   24:	test_updateFootage_FutureDate_FootageNotChanged();
        1:   25:	test_updateFootage_InvalidAccessCount_FootageNotChanged();
        -:   26:
        1:   27:	test_getCurrent_ValidInput_GetCurrentElement();
        -:   28:
        1:   29:	test_addToMyList_InvalidInput_ThrowsException();
        1:   30:	test_addToMyList_ValidInput_ElementAdded();
        -:   31:
        1:   32:	test_getFilteredList_NegativeAccessed_ThrowsException();
        1:   33:	test_getFilteredList_ValidInput_GetsList();
        -:   34:
        1:   35:	test_setPath_InvalidInput_ThrowsException();
        1:   36:	test_setPath_ValidInput_PathChanged();
        -:   37:
        1:   38:	test_addFootage_InvalidDateFebruary31st_FootageNotAdded();
        1:   39:	test_addFootage_InvalidDateNovember31st_FootageNotAdded();
        -:   40:
        1:   41:}
        1:   41-block  0
        -:   42:
        1:   43:void TestService::test_addFootage_ValidInput_FootageAdded() {
        1:   44:	std::string file = "test.txt";
        1:   44-block  0
        1:   45:	auto repository = FileRepository(file);
        1:   45-block  0
        1:   46:	auto service = Service(repository);
        1:   46-block  0
        1:   47:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:   47-block  0
        1:   47-block  1
        1:   47-block  2
        1:   47-block  3
        1:   47-block  4
        1:   47-block  5
    $$$$$:   47-block  6
    $$$$$:   47-block  7
    $$$$$:   47-block  8
    $$$$$:   47-block  9
    $$$$$:   47-block 10
        1:   48:	assert(service.getAllElements().size() == 1);
        1:   48-block  0
        1:   48-block  1
    $$$$$:   48-block  2
    $$$$$:   48-block  3
    $$$$$:   48-block  4
    $$$$$:   48-block  5
        1:   48-block  6
        1:   49:}
    $$$$$:   49-block  0
    $$$$$:   49-block  1
    $$$$$:   49-block  2
    $$$$$:   49-block  3
    $$$$$:   49-block  4
    $$$$$:   49-block  5
    $$$$$:   49-block  6
        1:   49-block  7
    $$$$$:   49-block  8
    $$$$$:   49-block  9
    $$$$$:   49-block 10
    $$$$$:   49-block 11
        -:   50:
        1:   51:void TestService::test_addFootage_InvalidDateFormat_FootageNotAdded() {
        1:   52:	std::string file = "test.txt";
        1:   52-block  0
        1:   53:	auto repository = FileRepository(file);
        1:   53-block  0
        1:   54:	auto service = Service(repository);
        1:   54-block  0
        -:   55:	try {
        1:   56:		service.addFootage("abc", " def", " 02-02-2020dfsads", " 7", " link");
        1:   56-block  0
        1:   56-block  1
        1:   56-block  2
        1:   56-block  3
        1:   56-block  4
        1:   56-block  5
        1:   56-block  6
        1:   56-block  7
        1:   56-block  8
        1:   56-block  9
        1:   56-block 10
        1:   57:	}catch (std::exception&) {
    $$$$$:   57-block  0
        1:   57-block  1
        -:   58:		assert(true);
        1:   59:	}
        1:   59-block  0
        1:   59-block  1
        2:   60:}
    $$$$$:   60-block  0
    $$$$$:   60-block  1
    $$$$$:   60-block  2
    $$$$$:   60-block  3
    $$$$$:   60-block  4
    $$$$$:   60-block  5
    $$$$$:   60-block  6
        1:   60-block  7
    $$$$$:   60-block  8
    $$$$$:   60-block  9
    $$$$$:   60-block 10
    $$$$$:   60-block 11
    $$$$$:   60-block 12
        -:   61:
        1:   62:void TestService::test_addFootage_InvalidDate_FootageNotAdded() {
        1:   63:	std::string file = "test.txt";
        1:   63-block  0
        1:   64:	auto repository = FileRepository(file);
        1:   64-block  0
        1:   65:	auto service = Service(repository);
        1:   65-block  0
        -:   66:	try {
        1:   67:		service.addFootage("abc", " def", " 2020-02-02", " 7", " link");
        1:   67-block  0
        1:   67-block  1
        1:   67-block  2
        1:   67-block  3
        1:   67-block  4
        1:   67-block  5
        1:   67-block  6
        1:   67-block  7
        1:   67-block  8
        1:   67-block  9
        1:   67-block 10
        1:   68:	}catch (std::exception&) {
    $$$$$:   68-block  0
        1:   68-block  1
        -:   69:		assert(true);
        1:   70:	}
        1:   70-block  0
        1:   70-block  1
        2:   71:}
    $$$$$:   71-block  0
    $$$$$:   71-block  1
    $$$$$:   71-block  2
    $$$$$:   71-block  3
    $$$$$:   71-block  4
    $$$$$:   71-block  5
    $$$$$:   71-block  6
        1:   71-block  7
    $$$$$:   71-block  8
    $$$$$:   71-block  9
    $$$$$:   71-block 10
    $$$$$:   71-block 11
    $$$$$:   71-block 12
        -:   72:
        1:   73:void TestService::test_addFootage_FutureDate_FootageNotAdded() {
        1:   74:	std::string file = "test.txt";
        1:   74-block  0
        1:   75:	auto repository = FileRepository(file);
        1:   75-block  0
        1:   76:	auto service = Service(repository);
        1:   76-block  0
        -:   77:	try {
        1:   78:		service.addFootage("abc", " def", " 02-02-2021", " 7", " link");
        1:   78-block  0
        1:   78-block  1
        1:   78-block  2
        1:   78-block  3
        1:   78-block  4
        1:   78-block  5
        1:   78-block  6
        1:   78-block  7
        1:   78-block  8
        1:   78-block  9
        1:   78-block 10
        1:   79:	}catch (std::exception&) {
    $$$$$:   79-block  0
        1:   79-block  1
        -:   80:		assert(true);
        1:   81:	}
        1:   81-block  0
        1:   81-block  1
        2:   82:}
    $$$$$:   82-block  0
    $$$$$:   82-block  1
    $$$$$:   82-block  2
    $$$$$:   82-block  3
    $$$$$:   82-block  4
    $$$$$:   82-block  5
    $$$$$:   82-block  6
        1:   82-block  7
    $$$$$:   82-block  8
    $$$$$:   82-block  9
    $$$$$:   82-block 10
    $$$$$:   82-block 11
    $$$$$:   82-block 12
        -:   83:
        1:   84:void TestService::test_addFootage_InvalidAccessCount_FootageNotAdded() {
        1:   85:	std::string file = "test.txt";
        1:   85-block  0
        1:   86:	auto repository = FileRepository(file);
        1:   86-block  0
        1:   87:	auto service = Service(repository);
        1:   87-block  0
        -:   88:	try {
        1:   89:		service.addFootage("abc", " def", " 02-02-2020", " -2", " link");
        1:   89-block  0
        1:   89-block  1
        1:   89-block  2
        1:   89-block  3
        1:   89-block  4
        1:   89-block  5
        1:   89-block  6
        1:   89-block  7
        1:   89-block  8
        1:   89-block  9
        1:   89-block 10
        1:   90:	}catch (std::exception&) {
    $$$$$:   90-block  0
        1:   90-block  1
        -:   91:		assert(true);
        1:   92:	}
        1:   92-block  0
        1:   92-block  1
        -:   93:
        2:   94:}
    $$$$$:   94-block  0
    $$$$$:   94-block  1
    $$$$$:   94-block  2
    $$$$$:   94-block  3
    $$$$$:   94-block  4
    $$$$$:   94-block  5
    $$$$$:   94-block  6
        1:   94-block  7
    $$$$$:   94-block  8
    $$$$$:   94-block  9
    $$$$$:   94-block 10
    $$$$$:   94-block 11
    $$$$$:   94-block 12
        -:   95:
        1:   96:void TestService::test_addFootage_DuplicateFootage_FootageNotAdded() {
        1:   97:	std::string file = "test.txt";
        1:   97-block  0
        1:   98:	auto repository = FileRepository(file);
        1:   98-block  0
        1:   99:	auto service = Service(repository);
        1:   99-block  0
        1:  100:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  100-block  0
        1:  100-block  1
        1:  100-block  2
        1:  100-block  3
        1:  100-block  4
        1:  100-block  5
    $$$$$:  100-block  6
    $$$$$:  100-block  7
    $$$$$:  100-block  8
    $$$$$:  100-block  9
    $$$$$:  100-block 10
        -:  101:	try {
        1:  102:		service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  102-block  0
        1:  102-block  1
        1:  102-block  2
        1:  102-block  3
        1:  102-block  4
        1:  102-block  5
        1:  102-block  6
        1:  102-block  7
        1:  102-block  8
        1:  102-block  9
        1:  102-block 10
        1:  103:	}catch (std::exception&) {
    $$$$$:  103-block  0
        1:  103-block  1
        -:  104:		assert(true);
        1:  105:	}
        1:  105-block  0
        1:  105-block  1
        2:  106:}
    $$$$$:  106-block  0
    $$$$$:  106-block  1
    $$$$$:  106-block  2
    $$$$$:  106-block  3
    $$$$$:  106-block  4
    $$$$$:  106-block  5
    $$$$$:  106-block  6
    $$$$$:  106-block  7
    $$$$$:  106-block  8
    $$$$$:  106-block  9
    $$$$$:  106-block 10
    $$$$$:  106-block 11
        1:  106-block 12
    $$$$$:  106-block 13
    $$$$$:  106-block 14
    $$$$$:  106-block 15
    $$$$$:  106-block 16
        -:  107:
        1:  108:void TestService::test_deleteFootage_ValidInput_FootageRemoved() {
        1:  109:	std::string file = "test.txt";
        1:  109-block  0
        1:  110:	auto repository = FileRepository(file);
        1:  110-block  0
        1:  111:	auto service = Service(repository);
        1:  111-block  0
        1:  112:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  112-block  0
        1:  112-block  1
        1:  112-block  2
        1:  112-block  3
        1:  112-block  4
        1:  112-block  5
    $$$$$:  112-block  6
    $$$$$:  112-block  7
    $$$$$:  112-block  8
    $$$$$:  112-block  9
    $$$$$:  112-block 10
        1:  113:	service.deleteFootage("abc");
        1:  113-block  0
        1:  113-block  1
    $$$$$:  113-block  2
        1:  114:	assert(service.getAllElements().empty());
        1:  114-block  0
        1:  114-block  1
    $$$$$:  114-block  2
    $$$$$:  114-block  3
    $$$$$:  114-block  4
    $$$$$:  114-block  5
        1:  114-block  6
        1:  115:}
    $$$$$:  115-block  0
    $$$$$:  115-block  1
    $$$$$:  115-block  2
    $$$$$:  115-block  3
    $$$$$:  115-block  4
    $$$$$:  115-block  5
    $$$$$:  115-block  6
        1:  115-block  7
    $$$$$:  115-block  8
    $$$$$:  115-block  9
    $$$$$:  115-block 10
    $$$$$:  115-block 11
        -:  116:
        1:  117:void TestService::test_deleteFootage_Inexistent_FootageNotRemoved() {
        1:  118:	std::string file = "test.txt";
        1:  118-block  0
        1:  119:	auto repository = FileRepository(file);
        1:  119-block  0
        1:  120:	auto service = Service(repository);
        1:  120-block  0
        -:  121:	try {
        1:  122:		service.deleteFootage("abc");
        1:  122-block  0
        1:  122-block  1
        1:  122-block  2
        1:  123:	}catch (std::exception&) {
    $$$$$:  123-block  0
        1:  123-block  1
        -:  124:		assert(true);
        1:  125:	}
        1:  125-block  0
        1:  125-block  1
        2:  126:}
    $$$$$:  126-block  0
    $$$$$:  126-block  1
    $$$$$:  126-block  2
        1:  126-block  3
    $$$$$:  126-block  4
    $$$$$:  126-block  5
    $$$$$:  126-block  6
    $$$$$:  126-block  7
    $$$$$:  126-block  8
        -:  127:
        1:  128:void TestService::test_updateFootage_ValidInput_FootageChanged() {
        1:  129:	std::string file = "test.txt";
        1:  129-block  0
        1:  130:	auto repository = FileRepository(file);
        1:  130-block  0
        1:  131:	auto service = Service(repository);
        1:  131-block  0
        1:  132:	service.addFootage(" abc", " def", " 02-02-2020", " 7", " link");
        1:  132-block  0
        1:  132-block  1
        1:  132-block  2
        1:  132-block  3
        1:  132-block  4
        1:  132-block  5
    $$$$$:  132-block  6
    $$$$$:  132-block  7
    $$$$$:  132-block  8
    $$$$$:  132-block  9
    $$$$$:  132-block 10
        1:  133:	service.updateFootage(" abc", " efg", " 03-03-2019", " 9", " link2");
        1:  133-block  0
        1:  133-block  1
        1:  133-block  2
        1:  133-block  3
        1:  133-block  4
        1:  133-block  5
    $$$$$:  133-block  6
    $$$$$:  133-block  7
    $$$$$:  133-block  8
    $$$$$:  133-block  9
    $$$$$:  133-block 10
        1:  134:	assert(service.getAllElements()[0].getType() == "efg");
        1:  134-block  0
        1:  134-block  1
        1:  134-block  2
        1:  134-block  3
    $$$$$:  134-block  4
    $$$$$:  134-block  5
    $$$$$:  134-block  6
    $$$$$:  134-block  7
        1:  134-block  8
    $$$$$:  134-block  9
        1:  135:}
    $$$$$:  135-block  0
    $$$$$:  135-block  1
    $$$$$:  135-block  2
    $$$$$:  135-block  3
    $$$$$:  135-block  4
    $$$$$:  135-block  5
    $$$$$:  135-block  6
    $$$$$:  135-block  7
    $$$$$:  135-block  8
    $$$$$:  135-block  9
    $$$$$:  135-block 10
    $$$$$:  135-block 11
        1:  135-block 12
    $$$$$:  135-block 13
    $$$$$:  135-block 14
    $$$$$:  135-block 15
    $$$$$:  135-block 16
        -:  136:
        1:  137:void TestService::test_updateFootage_InvalidDateFormat_FootageNotChanged() {
        1:  138:	std::string file = "test.txt";
        1:  138-block  0
        1:  139:	auto repository = FileRepository(file);
        1:  139-block  0
        1:  140:	auto service = Service(repository);
        1:  140-block  0
        1:  141:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  141-block  0
        1:  141-block  1
        1:  141-block  2
        1:  141-block  3
        1:  141-block  4
        1:  141-block  5
    $$$$$:  141-block  6
    $$$$$:  141-block  7
    $$$$$:  141-block  8
    $$$$$:  141-block  9
    $$$$$:  141-block 10
        -:  142:	try {
        1:  143:		service.updateFootage("abc", " efg", " 02-02-2020dfsfa", " 9", " link2");
        1:  143-block  0
        1:  143-block  1
        1:  143-block  2
        1:  143-block  3
        1:  143-block  4
        1:  143-block  5
        1:  143-block  6
        1:  143-block  7
        1:  143-block  8
        1:  143-block  9
        1:  143-block 10
        1:  144:	}catch (std::exception&) {
    $$$$$:  144-block  0
        1:  144-block  1
        -:  145:		assert(true);
        1:  146:	}
        1:  146-block  0
        1:  146-block  1
        2:  147:}
    $$$$$:  147-block  0
    $$$$$:  147-block  1
    $$$$$:  147-block  2
    $$$$$:  147-block  3
    $$$$$:  147-block  4
    $$$$$:  147-block  5
    $$$$$:  147-block  6
    $$$$$:  147-block  7
    $$$$$:  147-block  8
    $$$$$:  147-block  9
    $$$$$:  147-block 10
    $$$$$:  147-block 11
        1:  147-block 12
    $$$$$:  147-block 13
    $$$$$:  147-block 14
    $$$$$:  147-block 15
    $$$$$:  147-block 16
        -:  148:
        1:  149:void TestService::test_updateFootage_InvalidDate_FootageNotChanged() {
        1:  150:	std::string file = "test.txt";
        1:  150-block  0
        1:  151:	auto repository = FileRepository(file);
        1:  151-block  0
        1:  152:	auto service = Service(repository);
        1:  152-block  0
        1:  153:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  153-block  0
        1:  153-block  1
        1:  153-block  2
        1:  153-block  3
        1:  153-block  4
        1:  153-block  5
    $$$$$:  153-block  6
    $$$$$:  153-block  7
    $$$$$:  153-block  8
    $$$$$:  153-block  9
    $$$$$:  153-block 10
        -:  154:	try {
        1:  155:		service.updateFootage("abc", " efg", " 2020-02-02", " 9", " link2");
        1:  155-block  0
        1:  155-block  1
        1:  155-block  2
        1:  155-block  3
        1:  155-block  4
        1:  155-block  5
        1:  155-block  6
        1:  155-block  7
        1:  155-block  8
        1:  155-block  9
        1:  155-block 10
        1:  156:	}catch (std::exception&) {
    $$$$$:  156-block  0
        1:  156-block  1
        -:  157:		assert(true);
        1:  158:	}
        1:  158-block  0
        1:  158-block  1
        2:  159:}
    $$$$$:  159-block  0
    $$$$$:  159-block  1
    $$$$$:  159-block  2
    $$$$$:  159-block  3
    $$$$$:  159-block  4
    $$$$$:  159-block  5
    $$$$$:  159-block  6
    $$$$$:  159-block  7
    $$$$$:  159-block  8
    $$$$$:  159-block  9
    $$$$$:  159-block 10
    $$$$$:  159-block 11
        1:  159-block 12
    $$$$$:  159-block 13
    $$$$$:  159-block 14
    $$$$$:  159-block 15
    $$$$$:  159-block 16
        -:  160:
        1:  161:void TestService::test_updateFootage_FutureDate_FootageNotChanged() {
        1:  162:	std::string file = "test.txt";
        1:  162-block  0
        1:  163:	auto repository = FileRepository(file);
        1:  163-block  0
        1:  164:	auto service = Service(repository);
        1:  164-block  0
        1:  165:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  165-block  0
        1:  165-block  1
        1:  165-block  2
        1:  165-block  3
        1:  165-block  4
        1:  165-block  5
    $$$$$:  165-block  6
    $$$$$:  165-block  7
    $$$$$:  165-block  8
    $$$$$:  165-block  9
    $$$$$:  165-block 10
        -:  166:	try {
        1:  167:		service.updateFootage("abc", " efg", " 03-03-2021", " 9", " link2");
        1:  167-block  0
        1:  167-block  1
        1:  167-block  2
        1:  167-block  3
        1:  167-block  4
        1:  167-block  5
        1:  167-block  6
        1:  167-block  7
        1:  167-block  8
        1:  167-block  9
        1:  167-block 10
        1:  168:	}catch (std::exception&) {
    $$$$$:  168-block  0
        1:  168-block  1
        -:  169:		assert(true);
        1:  170:	}
        1:  170-block  0
        1:  170-block  1
        2:  171:}
    $$$$$:  171-block  0
    $$$$$:  171-block  1
    $$$$$:  171-block  2
    $$$$$:  171-block  3
    $$$$$:  171-block  4
    $$$$$:  171-block  5
    $$$$$:  171-block  6
    $$$$$:  171-block  7
    $$$$$:  171-block  8
    $$$$$:  171-block  9
    $$$$$:  171-block 10
    $$$$$:  171-block 11
        1:  171-block 12
    $$$$$:  171-block 13
    $$$$$:  171-block 14
    $$$$$:  171-block 15
    $$$$$:  171-block 16
        -:  172:
        1:  173:void TestService::test_updateFootage_InvalidAccessCount_FootageNotChanged() {
        1:  174:	std::string file = "test.txt";
        1:  174-block  0
        1:  175:	auto repository = FileRepository(file);
        1:  175-block  0
        1:  176:	auto service = Service(repository);
        1:  176-block  0
        1:  177:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  177-block  0
        1:  177-block  1
        1:  177-block  2
        1:  177-block  3
        1:  177-block  4
        1:  177-block  5
    $$$$$:  177-block  6
    $$$$$:  177-block  7
    $$$$$:  177-block  8
    $$$$$:  177-block  9
    $$$$$:  177-block 10
        -:  178:	try {
        1:  179:		service.updateFootage("abc", " efg", " 2020-02-02", " -9", " link2");
        1:  179-block  0
        1:  179-block  1
        1:  179-block  2
        1:  179-block  3
        1:  179-block  4
        1:  179-block  5
        1:  179-block  6
        1:  179-block  7
        1:  179-block  8
        1:  179-block  9
        1:  179-block 10
        1:  180:	}catch (std::exception&) {
    $$$$$:  180-block  0
        1:  180-block  1
        -:  181:		assert(true);
        1:  182:	}
        1:  182-block  0
        1:  182-block  1
        2:  183:}
    $$$$$:  183-block  0
    $$$$$:  183-block  1
    $$$$$:  183-block  2
    $$$$$:  183-block  3
    $$$$$:  183-block  4
    $$$$$:  183-block  5
    $$$$$:  183-block  6
    $$$$$:  183-block  7
    $$$$$:  183-block  8
    $$$$$:  183-block  9
    $$$$$:  183-block 10
    $$$$$:  183-block 11
        1:  183-block 12
    $$$$$:  183-block 13
    $$$$$:  183-block 14
    $$$$$:  183-block 15
    $$$$$:  183-block 16
        -:  184:
        1:  185:void TestService::test_getCurrent_ValidInput_GetCurrentElement() {
        1:  186:	std::string file = "test.txt";
        1:  186-block  0
        1:  187:	auto repository = FileRepository(file);
        1:  187-block  0
        1:  188:	auto service = Service(repository);
        1:  188-block  0
        1:  189:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  189-block  0
        1:  189-block  1
        1:  189-block  2
        1:  189-block  3
        1:  189-block  4
        1:  189-block  5
    $$$$$:  189-block  6
    $$$$$:  189-block  7
    $$$$$:  189-block  8
    $$$$$:  189-block  9
    $$$$$:  189-block 10
        1:  190:	assert(service.getCurrent().getTitle() == "abc");
        1:  190-block  0
        1:  190-block  1
        1:  190-block  2
    $$$$$:  190-block  3
    $$$$$:  190-block  4
    $$$$$:  190-block  5
    $$$$$:  190-block  6
        1:  190-block  7
    $$$$$:  190-block  8
        1:  191:}
    $$$$$:  191-block  0
    $$$$$:  191-block  1
    $$$$$:  191-block  2
    $$$$$:  191-block  3
    $$$$$:  191-block  4
    $$$$$:  191-block  5
    $$$$$:  191-block  6
    $$$$$:  191-block  7
        1:  191-block  8
    $$$$$:  191-block  9
    $$$$$:  191-block 10
    $$$$$:  191-block 11
    $$$$$:  191-block 12
        -:  192:
        1:  193:void TestService::test_addToMyList_ValidInput_ElementAdded() {
        1:  194:	std::string file = "test.txt";
        1:  194-block  0
        1:  195:	auto repository = FileRepository(file);
        1:  195-block  0
        1:  196:	auto service = Service(repository);
        1:  196-block  0
        1:  197:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  197-block  0
        1:  197-block  1
        1:  197-block  2
        1:  197-block  3
        1:  197-block  4
        1:  197-block  5
    $$$$$:  197-block  6
    $$$$$:  197-block  7
    $$$$$:  197-block  8
    $$$$$:  197-block  9
    $$$$$:  197-block 10
        1:  198:	service.addToMyList("abc");
        1:  198-block  0
        1:  198-block  1
    $$$$$:  198-block  2
        1:  199:	assert(service.getMyList().size() == 1);
        1:  199-block  0
        1:  199-block  1
    $$$$$:  199-block  2
    $$$$$:  199-block  3
    $$$$$:  199-block  4
    $$$$$:  199-block  5
        1:  199-block  6
        1:  200:}
    $$$$$:  200-block  0
    $$$$$:  200-block  1
    $$$$$:  200-block  2
    $$$$$:  200-block  3
    $$$$$:  200-block  4
    $$$$$:  200-block  5
    $$$$$:  200-block  6
        1:  200-block  7
    $$$$$:  200-block  8
    $$$$$:  200-block  9
    $$$$$:  200-block 10
    $$$$$:  200-block 11
        -:  201:
        1:  202:void TestService::test_addToMyList_InvalidInput_ThrowsException() {
        1:  203:	std::string file = "test.txt";
        1:  203-block  0
        1:  204:	auto repository = FileRepository(file);
        1:  204-block  0
        1:  205:	auto service = Service(repository);
        1:  205-block  0
        1:  206:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  206-block  0
        1:  206-block  1
        1:  206-block  2
        1:  206-block  3
        1:  206-block  4
        1:  206-block  5
    $$$$$:  206-block  6
    $$$$$:  206-block  7
    $$$$$:  206-block  8
    $$$$$:  206-block  9
    $$$$$:  206-block 10
        -:  207:	try {
        1:  208:		service.addToMyList("bcd");
        1:  208-block  0
        1:  208-block  1
        1:  208-block  2
        1:  209:	}catch (std::exception&) {
    $$$$$:  209-block  0
        1:  209-block  1
        -:  210:		assert(true);
        1:  211:	}
        1:  211-block  0
        1:  211-block  1
        2:  212:}
    $$$$$:  212-block  0
    $$$$$:  212-block  1
    $$$$$:  212-block  2
    $$$$$:  212-block  3
    $$$$$:  212-block  4
    $$$$$:  212-block  5
    $$$$$:  212-block  6
    $$$$$:  212-block  7
        1:  212-block  8
    $$$$$:  212-block  9
    $$$$$:  212-block 10
    $$$$$:  212-block 11
    $$$$$:  212-block 12
        -:  213:
        1:  214:void TestService::test_setPath_ValidInput_PathChanged() {
        1:  215:	std::string file = " ";
        1:  215-block  0
        1:  216:	auto repository = FileRepository(file);
        1:  216-block  0
        1:  217:	auto service = Service(repository);
        1:  217-block  0
        1:  218:	file = "test.txt";
        1:  218-block  0
        1:  219:	service.setPath(file);
        1:  219-block  0
        1:  220:}
        1:  220-block  0
    $$$$$:  220-block  1
    $$$$$:  220-block  2
    $$$$$:  220-block  3
    $$$$$:  220-block  4
    $$$$$:  220-block  5
    $$$$$:  220-block  6
        -:  221:
        1:  222:void TestService::test_setPath_InvalidInput_ThrowsException() {
        1:  223:	std::string file = "test.txt";
        1:  223-block  0
        1:  224:	auto repository = FileRepository(file);
        1:  224-block  0
        1:  225:	auto service = Service(repository);
        1:  225-block  0
        1:  226:	file = " ";
        1:  226-block  0
        -:  227:	try {
        1:  228:		service.setPath(file);
        1:  228-block  0
        1:  229:	}catch (std::exception&) {
    $$$$$:  229-block  0
        1:  229-block  1
        -:  230:		assert(true);
        1:  231:	}
        1:  231-block  0
        1:  231-block  1
        2:  232:}
    $$$$$:  232-block  0
    $$$$$:  232-block  1
    $$$$$:  232-block  2
        1:  232-block  3
        1:  232-block  4
    $$$$$:  232-block  5
    $$$$$:  232-block  6
    $$$$$:  232-block  7
    $$$$$:  232-block  8
        -:  233:
        1:  234:void TestService::test_getFilteredList_NegativeAccessed_ThrowsException() {
        1:  235:	std::string file = "test.txt";
        1:  235-block  0
        1:  236:	auto repository = FileRepository(file);
        1:  236-block  0
        1:  237:	auto service = Service(repository);
        1:  237-block  0
        1:  238:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  238-block  0
        1:  238-block  1
        1:  238-block  2
        1:  238-block  3
        1:  238-block  4
        1:  238-block  5
    $$$$$:  238-block  6
    $$$$$:  238-block  7
    $$$$$:  238-block  8
    $$$$$:  238-block  9
    $$$$$:  238-block 10
        1:  239:	service.addFootage("bcd", " def", " 02-02-2020", " 10", " link");
        1:  239-block  0
        1:  239-block  1
        1:  239-block  2
        1:  239-block  3
        1:  239-block  4
        1:  239-block  5
    $$$$$:  239-block  6
    $$$$$:  239-block  7
    $$$$$:  239-block  8
    $$$$$:  239-block  9
    $$$$$:  239-block 10
        1:  240:	service.addFootage("cde", " ghi", " 02-02-2020", " 7", " link");
        1:  240-block  0
        1:  240-block  1
        1:  240-block  2
        1:  240-block  3
        1:  240-block  4
        1:  240-block  5
    $$$$$:  240-block  6
    $$$$$:  240-block  7
    $$$$$:  240-block  8
    $$$$$:  240-block  9
    $$$$$:  240-block 10
        1:  241:	service.addFootage("efg", " ghi", " 02-02-2020", " 10", " link");
        1:  241-block  0
        1:  241-block  1
        1:  241-block  2
        1:  241-block  3
        1:  241-block  4
        1:  241-block  5
    $$$$$:  241-block  6
    $$$$$:  241-block  7
    $$$$$:  241-block  8
    $$$$$:  241-block  9
    $$$$$:  241-block 10
        -:  242:	try {
        1:  243:		auto filteredList = service.getFilteredList("def", " -1");
        1:  243-block  0
        1:  243-block  1
        1:  243-block  2
        1:  243-block  3
        1:  243-block  4
        1:  244:	}catch (std::exception&) {
    $$$$$:  244-block  0
        1:  244-block  1
        -:  245:		assert(true);
        1:  246:	}
        1:  246-block  0
        1:  246-block  1
        2:  247:}
    $$$$$:  247-block  0
    $$$$$:  247-block  1
    $$$$$:  247-block  2
    $$$$$:  247-block  3
    $$$$$:  247-block  4
    $$$$$:  247-block  5
    $$$$$:  247-block  6
    $$$$$:  247-block  7
    $$$$$:  247-block  8
    $$$$$:  247-block  9
    $$$$$:  247-block 10
    $$$$$:  247-block 11
    $$$$$:  247-block 12
    $$$$$:  247-block 13
    $$$$$:  247-block 14
    $$$$$:  247-block 15
    $$$$$:  247-block 16
    $$$$$:  247-block 17
    $$$$$:  247-block 18
    $$$$$:  247-block 19
    $$$$$:  247-block 20
        1:  247-block 21
    $$$$$:  247-block 22
    $$$$$:  247-block 23
    $$$$$:  247-block 24
    $$$$$:  247-block 25
        -:  248:
        1:  249:void TestService::test_getFilteredList_ValidInput_GetsList() {
        1:  250:	std::string file = "test.txt";
        1:  250-block  0
        1:  251:	auto repository = FileRepository(file);
        1:  251-block  0
        1:  252:	auto service = Service(repository);
        1:  252-block  0
        1:  253:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  253-block  0
        1:  253-block  1
        1:  253-block  2
        1:  253-block  3
        1:  253-block  4
        1:  253-block  5
    $$$$$:  253-block  6
    $$$$$:  253-block  7
    $$$$$:  253-block  8
    $$$$$:  253-block  9
    $$$$$:  253-block 10
        1:  254:	service.addFootage("bcd", " def", " 02-02-2020", " 10", " link");
        1:  254-block  0
        1:  254-block  1
        1:  254-block  2
        1:  254-block  3
        1:  254-block  4
        1:  254-block  5
    $$$$$:  254-block  6
    $$$$$:  254-block  7
    $$$$$:  254-block  8
    $$$$$:  254-block  9
    $$$$$:  254-block 10
        1:  255:	service.addFootage("cde", " ghi", " 02-02-2020", " 7", " link");
        1:  255-block  0
        1:  255-block  1
        1:  255-block  2
        1:  255-block  3
        1:  255-block  4
        1:  255-block  5
    $$$$$:  255-block  6
    $$$$$:  255-block  7
    $$$$$:  255-block  8
    $$$$$:  255-block  9
    $$$$$:  255-block 10
        1:  256:	service.addFootage("efg", " ghi", " 02-02-2020", " 10", " link");
        1:  256-block  0
        1:  256-block  1
        1:  256-block  2
        1:  256-block  3
        1:  256-block  4
        1:  256-block  5
    $$$$$:  256-block  6
    $$$$$:  256-block  7
    $$$$$:  256-block  8
    $$$$$:  256-block  9
    $$$$$:  256-block 10
        1:  257:	assert(service.getFilteredList("def", " 9").size() == 1);
        1:  257-block  0
        1:  257-block  1
        1:  257-block  2
        1:  257-block  3
    $$$$$:  257-block  4
    $$$$$:  257-block  5
    $$$$$:  257-block  6
    $$$$$:  257-block  7
        1:  257-block  8
    $$$$$:  257-block  9
    $$$$$:  257-block 10
        1:  258:}
    $$$$$:  258-block  0
    $$$$$:  258-block  1
    $$$$$:  258-block  2
    $$$$$:  258-block  3
    $$$$$:  258-block  4
    $$$$$:  258-block  5
    $$$$$:  258-block  6
    $$$$$:  258-block  7
    $$$$$:  258-block  8
    $$$$$:  258-block  9
    $$$$$:  258-block 10
    $$$$$:  258-block 11
    $$$$$:  258-block 12
    $$$$$:  258-block 13
    $$$$$:  258-block 14
    $$$$$:  258-block 15
    $$$$$:  258-block 16
    $$$$$:  258-block 17
    $$$$$:  258-block 18
    $$$$$:  258-block 19
    $$$$$:  258-block 20
        1:  258-block 21
    $$$$$:  258-block 22
    $$$$$:  258-block 23
    $$$$$:  258-block 24
    $$$$$:  258-block 25
        -:  259:
        1:  260:void TestService::test_addFootage_InvalidDateNovember31st_FootageNotAdded() {
        1:  261:	std::string file = "test.txt";
        1:  261-block  0
        1:  262:	auto repository = FileRepository(file);
        1:  262-block  0
        1:  263:	auto service = Service(repository);
        1:  263-block  0
        -:  264:	try {
        1:  265:		service.addFootage("abc", " def", " 11-31-2019", " 7", " link");
        1:  265-block  0
        1:  265-block  1
        1:  265-block  2
        1:  265-block  3
        1:  265-block  4
        1:  265-block  5
        1:  265-block  6
        1:  265-block  7
        1:  265-block  8
        1:  265-block  9
        1:  265-block 10
        1:  266:	}catch(std::exception&) {
    $$$$$:  266-block  0
        1:  266-block  1
        -:  267:		assert(true);
        1:  268:	}
        1:  268-block  0
        1:  268-block  1
        2:  269:}
    $$$$$:  269-block  0
    $$$$$:  269-block  1
    $$$$$:  269-block  2
    $$$$$:  269-block  3
    $$$$$:  269-block  4
    $$$$$:  269-block  5
    $$$$$:  269-block  6
        1:  269-block  7
    $$$$$:  269-block  8
    $$$$$:  269-block  9
    $$$$$:  269-block 10
    $$$$$:  269-block 11
    $$$$$:  269-block 12
        -:  270:
        1:  271:void TestService::test_addFootage_InvalidDateFebruary31st_FootageNotAdded() {
        1:  272:	std::string file = "test.txt";
        1:  272-block  0
        1:  273:	auto repository = FileRepository(file);
        1:  273-block  0
        1:  274:	auto service = Service(repository);
        1:  274-block  0
        -:  275:	try {
        1:  276:		service.addFootage("abc", " def", " 02-31-2019", " 7", " link");
        1:  276-block  0
        1:  276-block  1
        1:  276-block  2
        1:  276-block  3
        1:  276-block  4
        1:  276-block  5
        1:  276-block  6
        1:  276-block  7
        1:  276-block  8
        1:  276-block  9
        1:  276-block 10
        1:  277:	}catch(std::exception&) {
    $$$$$:  277-block  0
        1:  277-block  1
        -:  278:		assert(true);
        1:  279:	}
        1:  279-block  0
        1:  279-block  1
        2:  280:}
    $$$$$:  280-block  0
    $$$$$:  280-block  1
    $$$$$:  280-block  2
    $$$$$:  280-block  3
    $$$$$:  280-block  4
    $$$$$:  280-block  5
    $$$$$:  280-block  6
        1:  280-block  7
    $$$$$:  280-block  8
    $$$$$:  280-block  9
    $$$$$:  280-block 10
    $$$$$:  280-block 11
    $$$$$:  280-block 12
        -:  281:
        -:  282:
        -:  283:
        -:  284:
