        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_7-8/Footage.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/Footage.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/Footage.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 18/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "Footage.h"
        -:    6:#include <sstream>
        -:    7:#include <utility>
        -:    8:#define MAX_PARAMETERS_FOOTAGE 5
        -:    9:#define TITLE 0
        -:   10:#define TYPE 1
        -:   11:#define DATE 2
        -:   12:#define ACCESS_COUNT 3
        -:   13:#define LINK 4
      242:   14:Date::Date(int day, int month, int year):day{day}, month{month}, year{year} {
      121:   14-block  0
      121:   14-block  1
        -:   15:
      242:   16:}
      121:   16-block  0
      121:   16-block  1
        -:   17:
        5:   18:int Date::getDay() const {
        5:   18-block  0
        5:   19:	return day;
        5:   19-block  0
        -:   20:}
        -:   21:
       96:   22:int Date::getMonth() const {
       96:   22-block  0
       96:   23:	return month;
       96:   23-block  0
        -:   24:}
        -:   25:
      110:   26:int Date::getYear() const {
      110:   26-block  0
      110:   27:	return year;
      110:   27-block  0
        -:   28:}
        -:   29:
       29:   30:bool operator<(const Date &compareDate1, const Date &compareDate2) {
       29:   30-block  0
       29:   31:	if (compareDate1.getYear() < compareDate2.getYear()) return true;
       29:   31-block  0
        3:   31-block  1
       26:   32:	if (compareDate1.getYear() > compareDate2.getYear()) return false;
       26:   32-block  0
        2:   32-block  1
       24:   33:	if (compareDate1.getMonth() < compareDate1.getMonth()) return true;
       24:   33-block  0
    $$$$$:   33-block  1
       24:   34:	if (compareDate1.getMonth() > compareDate2.getMonth()) return false;
       24:   34-block  0
       22:   34-block  1
        2:   35:	return compareDate1.getDay() <= compareDate1.getDay();
        2:   35-block  0
       29:   36:}
       29:   36-block  0
        -:   37:
      456:   38:Date::Date() {
      228:   38-block  0
      228:   38-block  1
      228:   39:	day = 0;
      228:   40:	year = 0;
      228:   41:	month = 0;
      456:   42:}
      228:   42-block  0
      228:   42-block  1
        -:   43:
        2:   44:std::string Date::toString() const {
        2:   44-block  0
        2:   45:	std::string stringDate;
        2:   46:	stringDate += std::to_string(day) + "-" + std::to_string(month) + "-" + std::to_string(year);
        2:   46-block  0
        2:   46-block  1
        2:   46-block  2
        2:   46-block  3
        2:   46-block  4
        2:   46-block  5
        2:   46-block  6
        2:   46-block  7
    $$$$$:   46-block  8
    $$$$$:   46-block  9
    $$$$$:   46-block 10
    $$$$$:   46-block 11
    $$$$$:   46-block 12
    $$$$$:   46-block 13
    $$$$$:   46-block 14
        2:   47:	return stringDate;
        2:   48:}
        2:   48-block  0
    $$$$$:   48-block  1
    $$$$$:   48-block  2
    $$$$$:   48-block  3
    $$$$$:   48-block  4
    $$$$$:   48-block  5
    $$$$$:   48-block  6
    $$$$$:   48-block  7
    $$$$$:   48-block  8
        2:   48-block  9
    $$$$$:   48-block 10
    $$$$$:   48-block 11
        -:   49:
       37:   50:std::istream &operator>>(std::istream &inputStream, Date &date) {
       37:   50-block  0
       37:   51:	std::string dateString;
       37:   52:	inputStream >> dateString;
       37:   52-block  0
       37:   53:	std::string monthString = dateString.substr(0, 2);
       37:   53-block  0
       37:   54:	std::string dayString = dateString.substr(3, 2);
       37:   54-block  0
       37:   55:	std::string yearString = dateString.substr(6, 4);
       37:   55-block  0
       37:   56:	std::stringstream convertDayStringToInt(dayString);
       37:   56-block  0
       37:   57:	std::stringstream convertMonthStringToInt(monthString);
       37:   57-block  0
       37:   58:	std::stringstream convertYearStringToInt(yearString);
       37:   58-block  0
       37:   59:	int newDay = 0, newMonth = 0, newYear = 0;
       37:   60:	convertDayStringToInt >> newDay;
       37:   60-block  0
       37:   61:	convertMonthStringToInt >> newMonth;
       37:   61-block  0
       37:   62:	convertYearStringToInt >> newYear;
       37:   62-block  0
       37:   63:	date = Date(newDay, newMonth, newYear);
       37:   63-block  0
       37:   64:	return inputStream;
       37:   65:}
       37:   65-block  0
    $$$$$:   65-block  1
    $$$$$:   65-block  2
    $$$$$:   65-block  3
    $$$$$:   65-block  4
    $$$$$:   65-block  5
    $$$$$:   65-block  6
    $$$$$:   65-block  7
    $$$$$:   65-block  8
    $$$$$:   65-block  9
    $$$$$:   65-block 10
    $$$$$:   65-block 11
    $$$$$:   65-block 12
    $$$$$:   65-block 13
    $$$$$:   65-block 14
        -:   66:
       40:   67:std::ostream &operator<<(std::ostream &outputStream, const Date &date) {
       40:   67-block  0
       40:   68:	if (date.month / 10 == 0) {
       40:   68-block  0
       40:   69:		outputStream << 0;
       40:   70:	}
       40:   70-block  0
       40:   71:	outputStream << date.month << '-';
       40:   72:	if (date.day / 10 == 0) {
       40:   72-block  0
       40:   73:		outputStream << 0;
       40:   74:	}
       40:   74-block  0
       40:   75:	outputStream << date.day << '-' << date.year;
       40:   76:	return outputStream;
       40:   76-block  0
        -:   77:}
        -:   78:
        -:   79:
      166:   80:Footage::Footage(std::string title, std::string type, Date date, int numberAccessed, std::string link):title{std::move(title)}, type{std::move(type)}, date{date}, numberAccessed{numberAccessed}, link{std::move(link)} {
       83:   80-block  0
       83:   80-block  1
        -:   81:
      166:   82:}
       83:   82-block  0
       83:   82-block  1
        -:   83:
        1:   84:void Footage::changeType(std::string newType) {
        1:   84-block  0
        1:   85:	type = std::move(newType);
        1:   86:}
        1:   86-block  0
        -:   87:
        1:   88:void Footage::changeDate(Date newDate) {
        1:   88-block  0
        1:   89:	date = newDate;
        1:   90:}
        1:   90-block  0
        -:   91:
        1:   92:void Footage::changeAccessCount(int newAccessCount) {
        1:   92-block  0
        1:   93:	numberAccessed = newAccessCount;
        1:   94:}
        1:   94-block  0
        -:   95:
        1:   96:void Footage::changeLink(std::string newLink) {
        1:   96-block  0
        1:   97:	link = std::move(newLink);
        1:   98:}
        1:   98-block  0
        -:   99:
       66:  100:std::string Footage::getTitle() const {
       66:  100-block  0
       66:  101:	return title;
       66:  101-block  0
        -:  102:}
        -:  103:
        6:  104:std::string Footage::getType() const {
        6:  104-block  0
        6:  105:	return type;
        6:  105-block  0
        -:  106:}
        -:  107:
        1:  108:Date Footage::getDate() const {
        1:  108-block  0
        1:  109:	return date;
        1:  109-block  0
        -:  110:}
        -:  111:
        5:  112:int Footage::getAccessCount() const {
        5:  112-block  0
        5:  113:	return numberAccessed;
        5:  113-block  0
        -:  114:}
        -:  115:
        1:  116:std::string Footage::getLink() const {
        1:  116-block  0
        1:  117:	return link;
        1:  117-block  0
        -:  118:}
        -:  119:
      190:  120:Footage::Footage() {
       95:  120-block  0
       95:  120-block  1
       95:  120-block  2
       95:  121:	title = "";
       95:  121-block  0
       95:  122:	type = "";
       95:  122-block  0
       95:  123:	date = Date();
       95:  123-block  0
       95:  124:	numberAccessed = 0;
       95:  125:	link = "";
       95:  125-block  0
      190:  126:}
       95:  126-block  0
    $$$$$:  126-block  1
    $$$$$:  126-block  2
    $$$$$:  126-block  3
    $$$$$:  126-block  4
       95:  126-block  5
        -:  127:
        1:  128:std::string Footage::toString() const {
        1:  128-block  0
        1:  129:	std::string stringFootage;
        1:  130:	stringFootage += "Title: " + title + " Type: " + type + " Date: " + date.toString() + " Access count: " + std::to_string(numberAccessed) + " Link: " + link;
        1:  130-block  0
        1:  130-block  1
        1:  130-block  2
        1:  130-block  3
        1:  130-block  4
        1:  130-block  5
        1:  130-block  6
        1:  130-block  7
        1:  130-block  8
        1:  130-block  9
        1:  130-block 10
        1:  130-block 11
    $$$$$:  130-block 12
    $$$$$:  130-block 13
    $$$$$:  130-block 14
    $$$$$:  130-block 15
    $$$$$:  130-block 16
    $$$$$:  130-block 17
    $$$$$:  130-block 18
    $$$$$:  130-block 19
    $$$$$:  130-block 20
    $$$$$:  130-block 21
    $$$$$:  130-block 22
        1:  131:	return stringFootage;
        1:  132:}
        1:  132-block  0
    $$$$$:  132-block  1
    $$$$$:  132-block  2
    $$$$$:  132-block  3
    $$$$$:  132-block  4
    $$$$$:  132-block  5
    $$$$$:  132-block  6
    $$$$$:  132-block  7
    $$$$$:  132-block  8
    $$$$$:  132-block  9
    $$$$$:  132-block 10
    $$$$$:  132-block 11
    $$$$$:  132-block 12
        1:  132-block 13
    $$$$$:  132-block 14
    $$$$$:  132-block 15
        -:  133:
       83:  134:std::istream &operator>>(std::istream &inputStream, Footage &footage) {
       83:  134-block  0
       83:  135:	std::string footageLine;
       83:  136:	getline(inputStream, footageLine);
       83:  136-block  0
       83:  137:	if (footageLine.empty()) {
       83:  137-block  0
       46:  138:		footage = Footage();
       46:  138-block  0
       46:  139:	}else {
       46:  139-block  0
      185:  140:		std::string ArrayOfParameters[MAX_PARAMETERS_FOOTAGE];
       37:  140-block  0
      185:  140-block  1
       37:  141:		int currentCommand = 0;
     1122:  142:		for (auto commandParametersElement: footageLine) {
       37:  142-block  0
     1122:  142-block  1
     1085:  142-block  2
     1085:  142-block  3
     1085:  143:			if (commandParametersElement != ',') {
     1085:  143-block  0
      937:  144:				ArrayOfParameters[currentCommand] += commandParametersElement;
      937:  144-block  0
      937:  145:			} else {
      937:  145-block  0
      148:  146:				currentCommand++;
      148:  146-block  0
        -:  147:			}
        -:  148:		}
       37:  149:		std::stringstream dateStream(ArrayOfParameters[DATE]);
       37:  149-block  0
       37:  150:		Date newDate;
       37:  150-block  0
       37:  151:		dateStream >> newDate;
       37:  151-block  0
       37:  152:		std::string newTitle = ArrayOfParameters[TITLE], newType = ArrayOfParameters[TYPE].substr(1);
       37:  152-block  0
       37:  152-block  1
       37:  153:		std::string newLink = ArrayOfParameters[LINK].substr(1);
       37:  153-block  0
       37:  154:		std::stringstream accessCountStream(ArrayOfParameters[ACCESS_COUNT].substr(1));
       37:  154-block  0
       37:  154-block  1
    $$$$$:  154-block  2
       37:  155:		int accessCount = 0;
       37:  156:		accessCountStream >> accessCount;
       37:  156-block  0
       37:  157:		footage = Footage(newTitle, newType, newDate, accessCount, newLink);
       37:  157-block  0
       37:  157-block  1
       37:  157-block  2
       37:  157-block  3
    $$$$$:  157-block  4
    $$$$$:  157-block  5
    $$$$$:  157-block  6
      185:  158:	}
       37:  158-block  0
      185:  158-block  1
    $$$$$:  158-block  2
    $$$$$:  158-block  3
    $$$$$:  158-block  4
    $$$$$:  158-block  5
    $$$$$:  158-block  6
    $$$$$:  158-block  7
    $$$$$:  158-block  8
    $$$$$:  158-block  9
       83:  159:	return inputStream;
       83:  160:}
    $$$$$:  160-block  0
    $$$$$:  160-block  1
    $$$$$:  160-block  2
    $$$$$:  160-block  3
    $$$$$:  160-block  4
    $$$$$:  160-block  5
    $$$$$:  160-block  6
    $$$$$:  160-block  7
    $$$$$:  160-block  8
       83:  160-block  9
    $$$$$:  160-block 10
    $$$$$:  160-block 11
        -:  161:
       40:  162:std::ostream &operator<<(std::ostream &outputStream, const Footage &footage) {
       40:  162-block  0
       40:  163:	outputStream << footage.title <<", " << footage.type << ", " << footage.date << ", " << footage.numberAccessed << ", " << footage.link << std::endl;
       40:  164:	return outputStream;
       40:  164-block  0
        -:  165:}
