        -:    0:Source:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/TestMemoryRepository.cpp
        -:    0:Graph:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/TestMemoryRepository.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/TestMemoryRepository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 24/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "TestMemoryRepository.h"
        -:    6:#include "Repository.h"
        -:    7:#include <exception>
        -:    8:#include <cassert>
        -:    9:
        1:   10:void TestMemoryRepository::test_addFootage_ValidInput_FootageAdded() {
        1:   11:	auto repository = MemoryRepository();
        1:   11-block  0
        1:   12:	auto testFootage = Footage("abc", "def", Date(2, 2, 2020), 7, "link");
        1:   12-block  0
        1:   12-block  1
        1:   12-block  2
        1:   12-block  3
        1:   12-block  4
    $$$$$:   12-block  5
    $$$$$:   12-block  6
    $$$$$:   12-block  7
        1:   13:	repository.addFootage(testFootage);
        1:   13-block  0
        1:   14:	assert(repository.getAllFootage().size() == 1);
        1:   14-block  0
        1:   14-block  1
    $$$$$:   14-block  2
    $$$$$:   14-block  3
    $$$$$:   14-block  4
    $$$$$:   14-block  5
        1:   14-block  6
        1:   15:}
    $$$$$:   15-block  0
    $$$$$:   15-block  1
    $$$$$:   15-block  2
    $$$$$:   15-block  3
        1:   15-block  4
    $$$$$:   15-block  5
    $$$$$:   15-block  6
    $$$$$:   15-block  7
        -:   16:
        1:   17:void TestMemoryRepository::test_all() {
        1:   18:	test_addFootage_ValidInput_FootageAdded();
        1:   18-block  0
        1:   19:	test_addFootage_Duplicate_FootageNotAdded();
        1:   20:	test_deleteFootage_ValidInput_FootageRemoved();
        1:   21:	test_deleteFootage_Inexistent_FootageNotRemoved();
        1:   22:	test_updateFootage_Inexistent_FootageNotChanged();
        1:   23:	test_updateFootage_ValidInput_FootageChanged();
        1:   24:	test_getCurrentElement_EndOfArray_FirstElement();
        1:   25:}
        1:   25-block  0
        -:   26:
        1:   27:void TestMemoryRepository::test_addFootage_Duplicate_FootageNotAdded() {
        1:   28:	auto repository = MemoryRepository();
        1:   28-block  0
        1:   29:	auto testFootage = Footage("abc", "def", Date(2, 2, 2020), 7, "link");
        1:   29-block  0
        1:   29-block  1
        1:   29-block  2
        1:   29-block  3
        1:   29-block  4
    $$$$$:   29-block  5
    $$$$$:   29-block  6
    $$$$$:   29-block  7
        1:   30:	repository.addFootage(testFootage);
        1:   30-block  0
        1:   31:	auto testFootage2 = Footage("abc", "efg", Date(3, 3, 2020), 9, "link2");
        1:   31-block  0
        1:   31-block  1
        1:   31-block  2
        1:   31-block  3
        1:   31-block  4
    $$$$$:   31-block  5
    $$$$$:   31-block  6
    $$$$$:   31-block  7
        -:   32:	try {
        1:   33:		repository.addFootage(testFootage2);
        1:   33-block  0
        1:   34:	}catch (std::exception&) {
    $$$$$:   34-block  0
        1:   34-block  1
        -:   35:		assert(true);
        1:   36:	}
        1:   36-block  0
        1:   36-block  1
        2:   37:}
    $$$$$:   37-block  0
    $$$$$:   37-block  1
    $$$$$:   37-block  2
    $$$$$:   37-block  3
    $$$$$:   37-block  4
    $$$$$:   37-block  5
        1:   37-block  6
        1:   37-block  7
    $$$$$:   37-block  8
    $$$$$:   37-block  9
    $$$$$:   37-block 10
    $$$$$:   37-block 11
    $$$$$:   37-block 12
        -:   38:
        1:   39:void TestMemoryRepository::test_deleteFootage_ValidInput_FootageRemoved() {
        1:   40:	auto repository = MemoryRepository();
        1:   40-block  0
        1:   41:	auto testFootage = Footage("abc", "def", Date(2, 2, 2020), 7, "link");
        1:   41-block  0
        1:   41-block  1
        1:   41-block  2
        1:   41-block  3
        1:   41-block  4
    $$$$$:   41-block  5
    $$$$$:   41-block  6
    $$$$$:   41-block  7
        1:   42:	repository.addFootage(testFootage);
        1:   42-block  0
        1:   43:	repository.deleteFootage("abc");
        1:   43-block  0
        1:   43-block  1
    $$$$$:   43-block  2
        1:   44:	assert(repository.getAllFootage().size() == 0);
        1:   44-block  0
        1:   44-block  1
    $$$$$:   44-block  2
    $$$$$:   44-block  3
    $$$$$:   44-block  4
    $$$$$:   44-block  5
        1:   44-block  6
        1:   45:}
    $$$$$:   45-block  0
    $$$$$:   45-block  1
    $$$$$:   45-block  2
    $$$$$:   45-block  3
        1:   45-block  4
    $$$$$:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
        -:   46:
        1:   47:void TestMemoryRepository::test_deleteFootage_Inexistent_FootageNotRemoved() {
        1:   48:	auto repository = MemoryRepository();
        1:   48-block  0
        1:   49:	auto testFootage = Footage("abc", "def", Date(2, 2, 2020), 7, "link");
        1:   49-block  0
        1:   49-block  1
        1:   49-block  2
        1:   49-block  3
        1:   49-block  4
    $$$$$:   49-block  5
    $$$$$:   49-block  6
    $$$$$:   49-block  7
        1:   50:	repository.addFootage(testFootage);
        1:   50-block  0
        -:   51:	try {
        1:   52:		repository.deleteFootage("abd");
        1:   52-block  0
        1:   52-block  1
        1:   52-block  2
        1:   53:	}catch (std::exception&) {
    $$$$$:   53-block  0
        1:   53-block  1
        -:   54:		assert(true);
        1:   55:	}
        1:   55-block  0
        1:   55-block  1
        2:   56:}
    $$$$$:   56-block  0
    $$$$$:   56-block  1
    $$$$$:   56-block  2
    $$$$$:   56-block  3
    $$$$$:   56-block  4
        1:   56-block  5
    $$$$$:   56-block  6
    $$$$$:   56-block  7
    $$$$$:   56-block  8
        -:   57:
        1:   58:void TestMemoryRepository::test_updateFootage_ValidInput_FootageChanged() {
        1:   59:	auto repository = MemoryRepository();
        1:   59-block  0
        1:   60:	auto testFootage = Footage("abc", "def", Date(2, 2, 2020), 7, "link");
        1:   60-block  0
        1:   60-block  1
        1:   60-block  2
        1:   60-block  3
        1:   60-block  4
    $$$$$:   60-block  5
    $$$$$:   60-block  6
    $$$$$:   60-block  7
        1:   61:	repository.addFootage(testFootage);
        1:   61-block  0
        1:   62:	auto testFootage2 = Footage("abc", "efg", Date(3, 3, 2020), 9, "link2");
        1:   62-block  0
        1:   62-block  1
        1:   62-block  2
        1:   62-block  3
        1:   62-block  4
    $$$$$:   62-block  5
    $$$$$:   62-block  6
    $$$$$:   62-block  7
        1:   63:	repository.updateFootage(testFootage2);
        1:   63-block  0
        1:   64:	assert(repository.getAllFootage()[0].getType() == "efg");
        1:   64-block  0
        1:   64-block  1
        1:   64-block  2
        1:   64-block  3
    $$$$$:   64-block  4
    $$$$$:   64-block  5
    $$$$$:   64-block  6
    $$$$$:   64-block  7
        1:   64-block  8
    $$$$$:   64-block  9
        1:   65:}
    $$$$$:   65-block  0
    $$$$$:   65-block  1
    $$$$$:   65-block  2
    $$$$$:   65-block  3
    $$$$$:   65-block  4
    $$$$$:   65-block  5
    $$$$$:   65-block  6
    $$$$$:   65-block  7
        1:   65-block  8
    $$$$$:   65-block  9
    $$$$$:   65-block 10
    $$$$$:   65-block 11
    $$$$$:   65-block 12
        -:   66:
        1:   67:void TestMemoryRepository::test_updateFootage_Inexistent_FootageNotChanged() {
        1:   68:	auto repository = MemoryRepository();
        1:   68-block  0
        1:   69:	auto testFootage = Footage("abc", "def", Date(2, 2, 2020), 7, "link");
        1:   69-block  0
        1:   69-block  1
        1:   69-block  2
        1:   69-block  3
        1:   69-block  4
    $$$$$:   69-block  5
    $$$$$:   69-block  6
    $$$$$:   69-block  7
        1:   70:	repository.addFootage(testFootage);
        1:   70-block  0
        1:   71:	auto testFootage2 = Footage("abd", "efg", Date(3, 3, 2020), 9, "link2");
        1:   71-block  0
        1:   71-block  1
        1:   71-block  2
        1:   71-block  3
        1:   71-block  4
    $$$$$:   71-block  5
    $$$$$:   71-block  6
    $$$$$:   71-block  7
        -:   72:	try {
        1:   73:		repository.updateFootage(testFootage2);
        1:   73-block  0
        1:   74:	}catch (std::exception&) {
    $$$$$:   74-block  0
        1:   74-block  1
        -:   75:		assert(true);
        1:   76:	}
        1:   76-block  0
        1:   76-block  1
        2:   77:}
    $$$$$:   77-block  0
    $$$$$:   77-block  1
    $$$$$:   77-block  2
    $$$$$:   77-block  3
    $$$$$:   77-block  4
    $$$$$:   77-block  5
        1:   77-block  6
        1:   77-block  7
    $$$$$:   77-block  8
    $$$$$:   77-block  9
    $$$$$:   77-block 10
    $$$$$:   77-block 11
    $$$$$:   77-block 12
        -:   78:
        1:   79:void TestMemoryRepository::test_getCurrentElement_EndOfArray_FirstElement() {
        1:   80:	auto repository = MemoryRepository();
        1:   80-block  0
        1:   81:	auto testFootage = Footage("abc", "def", Date(2, 2, 2020), 7, "link");
        1:   81-block  0
        1:   81-block  1
        1:   81-block  2
        1:   81-block  3
        1:   81-block  4
    $$$$$:   81-block  5
    $$$$$:   81-block  6
    $$$$$:   81-block  7
        1:   82:	repository.addFootage(testFootage);
        1:   82-block  0
        1:   83:	testFootage = Footage("abd", "def", Date(2, 2, 2020), 7, "link");
        1:   83-block  0
        1:   83-block  1
        1:   83-block  2
        1:   83-block  3
        1:   83-block  4
    $$$$$:   83-block  5
    $$$$$:   83-block  6
    $$$$$:   83-block  7
        1:   84:	repository.addFootage(testFootage);
        1:   84-block  0
        1:   85:	testFootage = repository.getCurrentElement();
        1:   85-block  0
        1:   86:	testFootage = repository.getCurrentElement();
        1:   86-block  0
        1:   87:	testFootage = repository.getCurrentElement();
        1:   87-block  0
        1:   88:	assert(testFootage.getTitle() == "abc");
        1:   88-block  0
        1:   88-block  1
    $$$$$:   88-block  2
    $$$$$:   88-block  3
    $$$$$:   88-block  4
    $$$$$:   88-block  5
        1:   88-block  6
        1:   89:}
    $$$$$:   89-block  0
    $$$$$:   89-block  1
    $$$$$:   89-block  2
    $$$$$:   89-block  3
    $$$$$:   89-block  4
    $$$$$:   89-block  5
        1:   89-block  6
    $$$$$:   89-block  7
    $$$$$:   89-block  8
    $$$$$:   89-block  9
