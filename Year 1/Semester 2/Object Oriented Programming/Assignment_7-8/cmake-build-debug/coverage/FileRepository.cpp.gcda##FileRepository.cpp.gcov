        -:    0:Source:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/FileRepository.cpp
        -:    0:Graph:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/FileRepository.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/Info/OOP/Assignment_7-8/cmake-build-debug/CMakeFiles/Assignment_7_8.dir/FileRepository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 12/04/2020.
        -:    3://
        -:    4:
        -:    5:#include "FileRepository.h"
        -:    6:#include <fstream>
        -:    7:#include <vector>
        -:    8:#include <iostream>
        -:    9:#include <sstream>
        -:   10:
       60:   11:FileRepository::FileRepository(std::string& file): fileName(file), currentElement(0) {
       30:   11-block  0
       30:   11-block  1
       30:   12:	if (fileName != " ") {
       30:   12-block  0
       29:   13:		std::ofstream createFileIfNotExist(fileName);
       29:   13-block  0
       29:   14:		createFileIfNotExist.close();
       29:   14-block  0
       29:   15:	}
       29:   15-block  0
    $$$$$:   15-block  1
       60:   16:}
    $$$$$:   16-block  0
       30:   16-block  1
    $$$$$:   16-block  2
    $$$$$:   16-block  3
       30:   16-block  4
        -:   17:
       28:   18:void FileRepository::addFootage(const Footage &newFootage) {
       28:   18-block  0
       28:   19:	Footage footage;
       28:   20:	std::ifstream fileIn(fileName);
       28:   20-block  0
       28:   21:	std::vector<Footage> arrayOfFootage;
       40:   22:	while (fileIn >> footage) {
       28:   22-block  0
       40:   22-block  1
       40:   22-block  2
       40:   22-block  3
       12:   22-block  4
       14:   23:		if (footage.getTitle().empty()) break;
       14:   23-block  0
       14:   23-block  1
    $$$$$:   23-block  2
       14:   24:		if (footage.getTitle() == newFootage.getTitle()) {
       14:   24-block  0
       14:   24-block  1
       14:   24-block  2
    $$$$$:   24-block  3
        2:   25:			throw std::exception();
        2:   25-block  0
        -:   26:		}
       12:   27:		arrayOfFootage.push_back(footage);
       12:   27-block  0
        -:   28:	}
       26:   29:	fileIn.close();
       26:   29-block  0
       26:   30:	arrayOfFootage.push_back(newFootage);
       26:   30-block  0
       26:   31:	std::ofstream fileOut(fileName);
       26:   31-block  0
       64:   32:	for (const auto& footageElement: arrayOfFootage) {
       26:   32-block  0
       64:   32-block  1
       38:   32-block  2
       38:   32-block  3
       38:   33:		fileOut << footageElement;
       38:   33-block  0
        -:   34:	}
       26:   35:	fileOut.close();
       26:   35-block  0
       28:   36:}
    $$$$$:   36-block  0
        2:   36-block  1
    $$$$$:   36-block  2
       26:   36-block  3
        2:   36-block  4
        2:   36-block  5
        2:   36-block  6
        -:   37:
        4:   38:void FileRepository::deleteFootage(const std::string &titleToBeRemoved) {
        4:   38-block  0
        4:   39:	std::vector<Footage> arrayOfFootage;
        4:   40:	Footage footage;
        4:   40-block  0
        4:   41:	std::ifstream fileIn(fileName);
        4:   41-block  0
        4:   42:	bool ok = true;
        4:   43:	std::string lineFootage;
        7:   44:	while (fileIn >> footage) {
        4:   44-block  0
        7:   44-block  1
        7:   44-block  2
        7:   44-block  3
        3:   44-block  4
        3:   45:		if (footage.getTitle() == titleToBeRemoved) {
        3:   45-block  0
        3:   45-block  1
        2:   46:			ok = false;
        3:   47:		}else arrayOfFootage.push_back(footage);
        2:   47-block  0
        1:   47-block  1
        -:   48:	}
        4:   49:	if (ok) {
        4:   49-block  0
        2:   50:		throw std::exception();
        2:   50-block  0
        -:   51:	}
        2:   52:	fileIn.close();
        2:   52-block  0
        2:   53:	std::ofstream fileOut(fileName);
        2:   53-block  0
        2:   54:	for (const auto& footageToFile: arrayOfFootage) fileOut << footageToFile;
        2:   54-block  0
        2:   54-block  1
    $$$$$:   54-block  2
    $$$$$:   54-block  3
    $$$$$:   54-block  4
        2:   55:	fileOut.close();
        2:   55-block  0
        4:   56:}
    $$$$$:   56-block  0
    $$$$$:   56-block  1
        2:   56-block  2
    $$$$$:   56-block  3
        2:   56-block  4
        2:   56-block  5
        2:   56-block  6
        2:   56-block  7
        2:   56-block  8
        -:   57:
        3:   58:void FileRepository::updateFootage(const Footage &newFootage) {
        3:   58-block  0
        3:   59:	std::vector<Footage> arrayOfFootage;
        3:   60:	Footage footage;
        3:   60-block  0
        3:   61:	std::ifstream fileIn(fileName);
        3:   61-block  0
        3:   62:	bool ok = true;
        6:   63:	while (fileIn >> footage) {
        3:   63-block  0
        6:   63-block  1
        6:   63-block  2
        6:   63-block  3
        3:   63-block  4
        3:   64:		if (footage.getTitle() == newFootage.getTitle()) {
        3:   64-block  0
        3:   64-block  1
        3:   64-block  2
    $$$$$:   64-block  3
        2:   65:			arrayOfFootage.push_back(newFootage);
        2:   65-block  0
        2:   66:			ok = false;
        3:   67:		} else arrayOfFootage.push_back(footage);
        2:   67-block  0
        1:   67-block  1
        -:   68:	}
        3:   69:	if (ok) throw std::exception();
        3:   69-block  0
        1:   69-block  1
        2:   70:	fileIn.close();
        2:   70-block  0
        2:   71:	std::ofstream fileOut(fileName);
        2:   71-block  0
        4:   72:	for (const auto& footageToFile: arrayOfFootage) {
        2:   72-block  0
        4:   72-block  1
        2:   72-block  2
        2:   72-block  3
        2:   73:		fileOut << footageToFile;
        2:   73-block  0
        -:   74:	}
        2:   75:	fileOut.close();
        2:   75-block  0
        3:   76:}
    $$$$$:   76-block  0
    $$$$$:   76-block  1
        1:   76-block  2
    $$$$$:   76-block  3
        2:   76-block  4
        1:   76-block  5
        1:   76-block  6
        1:   76-block  7
        1:   76-block  8
        -:   77:
       13:   78:std::vector<Footage> FileRepository::getAllFootage() {
       13:   78-block  0
       13:   79:	std::vector<Footage> allFootage;
       13:   80:	std::ifstream fileIn(fileName);
       13:   80-block  0
       13:   81:	Footage footage;
       13:   81-block  0
       30:   82:	while (fileIn >> footage) {
       13:   82-block  0
       30:   82-block  1
       30:   82-block  2
       30:   82-block  3
       17:   82-block  4
       17:   83:		allFootage.push_back(footage);
       17:   83-block  0
        -:   84:	}
       13:   85:	return allFootage;
       13:   86:}
    $$$$$:   86-block  0
    $$$$$:   86-block  1
    $$$$$:   86-block  2
       13:   86-block  3
    $$$$$:   86-block  4
    $$$$$:   86-block  5
       13:   86-block  6
    $$$$$:   86-block  7
    $$$$$:   86-block  8
        -:   87:
        3:   88:Footage FileRepository::getCurrentElement() {
        3:   88-block  0
        3:   89:	std::vector<Footage> arrayOfTapes = getAllFootage();
        3:   90:	if (currentElement == arrayOfTapes.size()) 		currentElement = 0;
        3:   90-block  0
        1:   90-block  1
        3:   91:	return *(arrayOfTapes.begin() + currentElement++);
        3:   91-block  0
        3:   92:}
        3:   92-block  0
    $$$$$:   92-block  1
    $$$$$:   92-block  2
        -:   93:
        2:   94:void FileRepository::setPath(const std::string& newFileName) {
        2:   94-block  0
        2:   95:	if (fileName == " ") {
        2:   95-block  0
        1:   96:		throw std::exception();
        1:   96-block  0
        -:   97:	}
        1:   98:	std::ofstream createFileIfNotExist(fileName);
        1:   99:	createFileIfNotExist.close();
        1:   99-block  0
        1:  100:	fileName = newFileName;
        1:  100-block  0
        1:  101:}
        1:  101-block  0
    $$$$$:  101-block  1
    $$$$$:  101-block  2
        -:  102:
        -:  103:
        -:  104:
