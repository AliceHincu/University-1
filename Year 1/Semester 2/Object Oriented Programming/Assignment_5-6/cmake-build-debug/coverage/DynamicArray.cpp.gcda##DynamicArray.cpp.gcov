        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/DynamicArray.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/cmake-build-debug/CMakeFiles/Assignment_5_6.dir/DynamicArray.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/cmake-build-debug/CMakeFiles/Assignment_5_6.dir/DynamicArray.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 18/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "DynamicArray.h"
        -:    6:#include "Footage.h"
        -:    7:#include <exception>
        -:    8:
        -:    9:template<class TypeOfElement>
      208:   10:DynamicArray<TypeOfElement>::DynamicArray(int capacity) {
      104:   10-block  0
      104:   10-block  1
      104:   11:    this->capacity = capacity;
      209:   12:    this->size = 0;
     1040:   13:    this->elements = new TypeOfElement[this->capacity];
      104:   13-block  0
      104:   13-block  1
     1040:   13-block  2
     1040:   13-block  3
    $$$$$:   13-block  4
    $$$$$:   13-block  5
    $$$$$:   13-block  6
    $$$$$:   13-block  7
      208:   14:}
      104:   14-block  0
      104:   14-block  1
        -:   15:
        -:   16:template<class TypeOfElement>
      210:   17:DynamicArray<TypeOfElement>::~DynamicArray() {
      105:   17-block  0
      105:   17-block  1
     1050:   18:    delete [] this->elements;
      105:   18-block  0
      105:   18-block  1
     1050:   18-block  2
      105:   18-block  3
      105:   19:    this->size = 0;
      210:   20:}
      105:   20-block  0
      105:   20-block  1
        -:   21:
        -:   22:template<class TypeOfElement>
       36:   23:void DynamicArray<TypeOfElement>::addElement(TypeOfElement newElement) {
       36:   23-block  0
       36:   24:    if (size == capacity) {
       36:   24-block  0
    #####:   25:        resizeArray(2 * capacity);
    #####:   26:    }
    $$$$$:   26-block  0
       36:   27:    elements[size++] = newElement;
       36:   28:}
       36:   28-block  0
        -:   29:
        -:   30:template<class TypeOfElement>
    #####:   31:void DynamicArray<TypeOfElement>::resizeArray(int newCapacity) {
    $$$$$:   31-block  0
    #####:   32:    capacity = newCapacity;
    #####:   33:    auto * auxiliaryArray = new TypeOfElement[capacity];
    $$$$$:   33-block  0
    $$$$$:   33-block  1
    $$$$$:   33-block  2
    $$$$$:   33-block  3
    $$$$$:   33-block  4
    $$$$$:   33-block  5
    $$$$$:   33-block  6
    $$$$$:   33-block  7
    #####:   34:    for (int i = 0; i < size; ++i) {
    $$$$$:   34-block  0
    $$$$$:   34-block  1
    $$$$$:   34-block  2
    #####:   35:        auxiliaryArray[i] = elements[i];
    #####:   36:    }
    $$$$$:   36-block  0
    #####:   37:    delete [] elements;
    $$$$$:   37-block  0
    $$$$$:   37-block  1
    $$$$$:   37-block  2
    $$$$$:   37-block  3
    #####:   38:    elements = auxiliaryArray;
    #####:   39:}
    $$$$$:   39-block  0
        -:   40:
        -:   41:template<class TypeOfElement>
        6:   42:void DynamicArray<TypeOfElement>::addElementToPosition(TypeOfElement newElement, int position) {
        6:   42-block  0
        6:   43:    if (position > size or position < 0) {
        6:   43-block  0
        6:   43-block  1
        1:   44:        throw std::exception();
        1:   44-block  0
        -:   45:    }
        5:   46:    if (size == capacity) {
        5:   46-block  0
    #####:   47:        resizeArray(2 * capacity);
    #####:   48:    }
    $$$$$:   48-block  0
        -:   49:
        5:   50:    for (int i = size; i > position; ++i) {
        5:   50-block  0
        5:   50-block  1
    $$$$$:   50-block  2
    #####:   51:        elements[i] = elements[i - 1];
    #####:   52:    }
    $$$$$:   52-block  0
        5:   53:    size++;
        5:   54:    elements[position] = newElement;
        5:   55:}
        5:   55-block  0
        -:   56:
        -:   57:template<class TypeOfElement>
        4:   58:void DynamicArray<TypeOfElement>::setElement(TypeOfElement newElement, int position) {
        4:   58-block  0
        4:   59:    if (position >= size or position < 0) {
        4:   59-block  0
        4:   59-block  1
        1:   60:        throw std::exception();
        1:   60-block  0
        -:   61:    }
        3:   62:    elements[position] = newElement;
        3:   63:}
        3:   63-block  0
        -:   64:
        -:   65:template<class TypeOfElement>
        4:   66:void DynamicArray<TypeOfElement>::removeElementFromPosition(int position) {
        4:   66-block  0
        4:   67:    if (position >= size or position < 0) {
        4:   67-block  0
        4:   67-block  1
        1:   68:        throw std::exception();
        1:   68-block  0
        -:   69:    }
        3:   70:    if (size == capacity / 4) {
        3:   70-block  0
    #####:   71:        resizeArray(capacity / 2);
    #####:   72:    }
    $$$$$:   72-block  0
        3:   73:    size--;
        3:   74:    for (int i = position; i < size; ++i) {
        3:   74-block  0
        3:   74-block  1
    $$$$$:   74-block  2
    #####:   75:        elements[i] = elements[i + 1];
    #####:   76:    }
    $$$$$:   76-block  0
        3:   77:}
        3:   77-block  0
        -:   78:
        -:   79:template<class TypeOfElement>
       33:   80:TypeOfElement DynamicArray<TypeOfElement>::getElement(int position) {
       33:   80-block  0
       33:   81:    if (position >= size or position < 0) {
       33:   81-block  0
       33:   81-block  1
    #####:   82:        throw std::exception();
    $$$$$:   82-block  0
        -:   83:    }
       33:   84:    return elements[position];
       33:   84-block  0
        -:   85:}
        -:   86:
        -:   87:template<class TypeOfElement>
      100:   88:int DynamicArray<TypeOfElement>::getSize() const {
      100:   88-block  0
      100:   89:    return size;
      100:   89-block  0
        -:   90:}
        -:   91:
        -:   92:template<class TypeOfElement>
        2:   93:DynamicArray<TypeOfElement>::DynamicArray(const DynamicArray &copyArray) {
        1:   93-block  0
        1:   93-block  1
        1:   94:    size = copyArray.size;
        1:   95:    capacity = copyArray.capacity;
       10:   96:    elements = new TypeOfElement[capacity];
        1:   96-block  0
        1:   96-block  1
       10:   96-block  2
       10:   96-block  3
    $$$$$:   96-block  4
    $$$$$:   96-block  5
    $$$$$:   96-block  6
    $$$$$:   96-block  7
        2:   97:    for (int i = 0; i < size; ++i) {
        1:   97-block  0
        2:   97-block  1
        1:   97-block  2
        1:   98:        elements[i] = copyArray.elements[i];
        1:   99:    }
        1:   99-block  0
        2:  100:}
        1:  100-block  0
        1:  100-block  1
        -:  101:
        -:  102:template<class TypeOfElement>
       54:  103:DynamicArray<TypeOfElement>& DynamicArray<TypeOfElement>::operator=(const DynamicArray<TypeOfElement> &copyArray) {
       54:  103-block  0
       54:  104:    if (this == &copyArray) {
       54:  104-block  0
    #####:  105:        return *this;
    $$$$$:  105-block  0
        -:  106:    }
       54:  107:    size = copyArray.size;
       54:  108:    capacity = copyArray.capacity;
        -:  109:
      540:  110:    delete [] elements;
       54:  110-block  0
       54:  110-block  1
      540:  110-block  2
       54:  110-block  3
      540:  111:    elements = new TypeOfElement[this->capacity];
       54:  111-block  0
       54:  111-block  1
      540:  111-block  2
      540:  111-block  3
    $$$$$:  111-block  4
    $$$$$:  111-block  5
    $$$$$:  111-block  6
    $$$$$:  111-block  7
       56:  112:    for (int i = 0; i < size; ++i) {
       54:  112-block  0
       56:  112-block  1
        2:  112-block  2
        2:  113:        elements[i] = copyArray.elements[i];
        2:  114:    }
        2:  114-block  0
       54:  115:    return *this;
       54:  115-block  0
       54:  116:}
       54:  116-block  0
        -:  117:
        -:  118:template class DynamicArray<Footage>;
