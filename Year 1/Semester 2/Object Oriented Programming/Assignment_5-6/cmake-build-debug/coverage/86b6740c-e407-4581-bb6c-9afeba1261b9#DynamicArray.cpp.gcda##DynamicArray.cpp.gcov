        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/DynamicArray.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/cmake-build-debug/CMakeFiles/Assignment_5_6.dir/DynamicArray.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/cmake-build-debug/CMakeFiles/Assignment_5_6.dir/DynamicArray.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 18/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "DynamicArray.h"
        -:    6:#include "Footage.h"
        -:    7:#include <exception>
        -:    8:
        -:    9:template<class TypeOfElement>
        8:   10:DynamicArray<TypeOfElement>::DynamicArray(int capacity) {
        4:   10-block  0
        4:   10-block  1
        4:   11:    this->capacity = capacity;
        8:   12:    this->size = 0;
       40:   13:    this->elements = new TypeOfElement[this->capacity];
        4:   13-block  0
        4:   13-block  1
       40:   13-block  2
       40:   13-block  3
    $$$$$:   13-block  4
    $$$$$:   13-block  5
    $$$$$:   13-block  6
    $$$$$:   13-block  7
        8:   14:}
        4:   14-block  0
        4:   14-block  1
        -:   15:
        -:   16:template<class TypeOfElement>
        8:   17:DynamicArray<TypeOfElement>::~DynamicArray() {
        4:   17-block  0
        4:   17-block  1
       40:   18:    delete [] this->elements;
        4:   18-block  0
        4:   18-block  1
       40:   18-block  2
        4:   18-block  3
        4:   19:    this->size = 0;
        8:   20:}
        4:   20-block  0
        4:   20-block  1
        -:   21:
        -:   22:template<class TypeOfElement>
        1:   23:void DynamicArray<TypeOfElement>::addElement(TypeOfElement newElement) {
        1:   23-block  0
        1:   24:    if (size == capacity) {
        1:   24-block  0
    #####:   25:        resizeArray(2 * capacity);
    #####:   26:    }
    $$$$$:   26-block  0
        1:   27:    elements[size++] = newElement;
        1:   28:}
        1:   28-block  0
        -:   29:
        -:   30:template<class TypeOfElement>
    #####:   31:void DynamicArray<TypeOfElement>::resizeArray(int newCapacity) {
    $$$$$:   31-block  0
    #####:   32:    capacity = newCapacity;
    #####:   33:    auto * auxiliaryArray = new TypeOfElement[capacity];
    $$$$$:   33-block  0
    $$$$$:   33-block  1
    $$$$$:   33-block  2
    $$$$$:   33-block  3
    $$$$$:   33-block  4
    $$$$$:   33-block  5
    $$$$$:   33-block  6
    $$$$$:   33-block  7
    #####:   34:    for (int i = 0; i < size; ++i) {
    $$$$$:   34-block  0
    $$$$$:   34-block  1
    $$$$$:   34-block  2
    #####:   35:        auxiliaryArray[i] = elements[i];
    #####:   36:    }
    $$$$$:   36-block  0
    #####:   37:    delete [] elements;
    $$$$$:   37-block  0
    $$$$$:   37-block  1
    $$$$$:   37-block  2
    $$$$$:   37-block  3
    #####:   38:    elements = auxiliaryArray;
    #####:   39:}
    $$$$$:   39-block  0
        -:   40:
        -:   41:template<class TypeOfElement>
    #####:   42:void DynamicArray<TypeOfElement>::addElementToPosition(TypeOfElement newElement, int position) {
    $$$$$:   42-block  0
    #####:   43:    if (position > size or position < 0) {
    $$$$$:   43-block  0
    $$$$$:   43-block  1
    #####:   44:        throw std::exception();
    $$$$$:   44-block  0
        -:   45:    }
    #####:   46:    if (size == capacity) {
    $$$$$:   46-block  0
    #####:   47:        resizeArray(2 * capacity);
    #####:   48:    }
    $$$$$:   48-block  0
    #####:   49:    size++;
    #####:   50:    for (int i = size; i > position; ++i) {
    $$$$$:   50-block  0
    $$$$$:   50-block  1
    $$$$$:   50-block  2
    #####:   51:        elements[i] = elements[i - 1];
    #####:   52:    }
    $$$$$:   52-block  0
    #####:   53:    elements[position] = newElement;
    #####:   54:}
    $$$$$:   54-block  0
        -:   55:
        -:   56:template<class TypeOfElement>
    #####:   57:void DynamicArray<TypeOfElement>::setElement(TypeOfElement newElement, int position) {
    $$$$$:   57-block  0
    #####:   58:    if (position >= size or position < 0) {
    $$$$$:   58-block  0
    $$$$$:   58-block  1
    #####:   59:        throw std::exception();
    $$$$$:   59-block  0
        -:   60:    }
    #####:   61:    elements[position] = newElement;
    #####:   62:}
    $$$$$:   62-block  0
        -:   63:
        -:   64:template<class TypeOfElement>
        1:   65:void DynamicArray<TypeOfElement>::removeElementFromPosition(int position) {
        1:   65-block  0
        1:   66:    if (position >= size or position < 0) {
        1:   66-block  0
        1:   66-block  1
    #####:   67:        throw std::exception();
    $$$$$:   67-block  0
        -:   68:    }
        1:   69:    if (size == capacity / 4) {
        1:   69-block  0
    #####:   70:        resizeArray(capacity / 2);
    #####:   71:    }
    $$$$$:   71-block  0
        1:   72:    size--;
        1:   73:    for (int i = position; i < size; ++i) {
        1:   73-block  0
        1:   73-block  1
    $$$$$:   73-block  2
    #####:   74:        elements[i] = elements[i + 1];
    #####:   75:    }
    $$$$$:   75-block  0
        1:   76:}
        1:   76-block  0
        -:   77:
        -:   78:template<class TypeOfElement>
        1:   79:TypeOfElement DynamicArray<TypeOfElement>::getElement(int position) {
        1:   79-block  0
        1:   80:    if (position >= size or position < 0) {
        1:   80-block  0
        1:   80-block  1
    #####:   81:        throw std::exception();
    $$$$$:   81-block  0
        -:   82:    }
        1:   83:    return elements[position];
        1:   83-block  0
        -:   84:}
        -:   85:
        -:   86:template<class TypeOfElement>
        5:   87:int DynamicArray<TypeOfElement>::getSize() const {
        5:   87-block  0
        5:   88:    return size;
        5:   88-block  0
        -:   89:}
        -:   90:
        -:   91:template<class TypeOfElement>
    #####:   92:DynamicArray<TypeOfElement>::DynamicArray(const DynamicArray &copyArray) {
    $$$$$:   92-block  0
    $$$$$:   92-block  1
    #####:   93:    size = copyArray.size;
    #####:   94:    capacity = copyArray.capacity;
    #####:   95:    elements = new TypeOfElement[capacity];
    $$$$$:   95-block  0
    $$$$$:   95-block  1
    $$$$$:   95-block  2
    $$$$$:   95-block  3
    $$$$$:   95-block  4
    $$$$$:   95-block  5
    $$$$$:   95-block  6
    $$$$$:   95-block  7
    #####:   96:    for (int i = 0; i < size; ++i) {
    $$$$$:   96-block  0
    $$$$$:   96-block  1
    $$$$$:   96-block  2
    #####:   97:        elements[i] = copyArray.elements[i];
    #####:   98:    }
    $$$$$:   98-block  0
    #####:   99:}
    $$$$$:   99-block  0
    $$$$$:   99-block  1
        -:  100:
        -:  101:template<class TypeOfElement>
        3:  102:DynamicArray<TypeOfElement>& DynamicArray<TypeOfElement>::operator=(const DynamicArray<TypeOfElement> &copyArray) {
        3:  102-block  0
        3:  103:    if (this == &copyArray) {
        3:  103-block  0
    #####:  104:        return *this;
    $$$$$:  104-block  0
        -:  105:    }
        3:  106:    size = copyArray.size;
        3:  107:    capacity = copyArray.capacity;
        -:  108:
       30:  109:    delete [] elements;
        3:  109-block  0
        3:  109-block  1
       30:  109-block  2
        3:  109-block  3
       30:  110:    elements = new TypeOfElement[this->capacity];
        3:  110-block  0
        3:  110-block  1
       30:  110-block  2
       30:  110-block  3
    $$$$$:  110-block  4
    $$$$$:  110-block  5
    $$$$$:  110-block  6
    $$$$$:  110-block  7
        3:  111:    for (int i = 0; i < size; ++i) {
        3:  111-block  0
        3:  111-block  1
    $$$$$:  111-block  2
    #####:  112:        elements[i] = copyArray.elements[i];
    #####:  113:    }
    $$$$$:  113-block  0
        3:  114:    return *this;
        3:  114-block  0
        3:  115:}
        3:  115-block  0
        -:  116:
        -:  117:template class DynamicArray<Footage>;
