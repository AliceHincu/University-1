        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/Service.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/cmake-build-debug/CMakeFiles/Assignment_5_6.dir/Service.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/cmake-build-debug/CMakeFiles/Assignment_5_6.dir/Service.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 19/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "Service.h"
        -:    6:#include <exception>
        -:    7:#include <cassert>
        -:    8:#include <iostream>
        -:    9:#include <sstream>
        -:   10:#include <ctime>
        -:   11:
        2:   12:Service::Service(Repository &newRepository) {
        1:   12-block  0
        1:   12-block  1
        1:   13:    repository = newRepository;
        1:   13-block  0
        2:   14:}
        1:   14-block  0
    $$$$$:   14-block  1
    $$$$$:   14-block  2
        1:   14-block  3
        -:   15:
        2:   16:void Service::addFootage(const std::string &title, const std::string &type,const std::string &dateString, const std::string &numberAccessedString, const std::string &link) {
        2:   16-block  0
        2:   17:    if (dateString.size() != SIZE_OF_DATE + 1) {
        2:   17-block  0
        1:   18:        throw std::exception();
        1:   18-block  0
        -:   19:    }
        1:   20:    std::string newTitle = title;
        1:   21:    newTitle.pop_back();
        1:   21-block  0
        1:   22:    std::string newType = type;
        1:   22-block  0
        1:   23:    newType.pop_back();
        1:   23-block  0
        1:   24:    std::string newNumberAccessedString = numberAccessedString;
        1:   24-block  0
        1:   25:    newNumberAccessedString.pop_back();
        1:   25-block  0
        1:   26:    std::string dayString = dateString.substr(0, 2);
        1:   26-block  0
        1:   27:    std::string monthString = dateString.substr(3, 2);
        1:   27-block  0
        1:   28:    std::string yearString = dateString.substr(6, 4);
        1:   28-block  0
        1:   29:    std::stringstream convertDayStringToInt(dayString);
        1:   29-block  0
        1:   30:    std::stringstream convertMonthStringToInt(monthString);
        1:   30-block  0
        1:   31:    std::stringstream convertYearStringToInt(yearString);
        1:   31-block  0
        -:   32:    int newDay, newMonth, newYear;
        1:   33:    convertDayStringToInt >> newDay;
        1:   33-block  0
        1:   34:    convertMonthStringToInt >> newMonth;
        1:   34-block  0
        1:   35:    convertYearStringToInt >> newYear;
        1:   35-block  0
        1:   36:    time_t currentTime = time(nullptr);
        1:   36-block  0
        1:   37:    tm* currentTimePointer = localtime(&currentTime);
        1:   37-block  0
        1:   38:    if (!validateNewDate(newDay, newMonth, newYear)) {
        1:   38-block  0
        1:   38-block  1
    #####:   39:        throw std::exception();
    $$$$$:   39-block  0
        -:   40:    }
        1:   41:    Date currentDate = Date(currentTimePointer->tm_mday, currentTimePointer->tm_mon + 1, currentTimePointer->tm_year + 1900);
        1:   41-block  0
        1:   42:    auto newDate = Date(newDay, newMonth, newYear);
        1:   42-block  0
        1:   43:    if (currentDate < newDate) {
        1:   43-block  0
        1:   43-block  1
    #####:   44:        throw std::exception();
    $$$$$:   44-block  0
        -:   45:    }
        1:   46:    std::stringstream convertNumberAccessedStringToInt(newNumberAccessedString);
        1:   46-block  0
        -:   47:    int numberAccessed;
        1:   48:    convertNumberAccessedStringToInt >> numberAccessed;
        1:   48-block  0
        1:   49:    if (numberAccessed < 0) {
        1:   49-block  0
    #####:   50:        throw std::exception();
    $$$$$:   50-block  0
        -:   51:    }
        1:   52:    auto newFootage = Footage(newTitle, newType, newDate, numberAccessed, link);
        1:   52-block  0
        1:   52-block  1
        1:   52-block  2
        1:   52-block  3
    $$$$$:   52-block  4
    $$$$$:   52-block  5
    $$$$$:   52-block  6
        -:   53:    try {
        1:   54:        repository.addFootage(newFootage);
        1:   54-block  0
        1:   55:    }catch (std::exception& exception) {
        1:   55-block  0
    $$$$$:   55-block  1
    #####:   56:        throw std::exception();
    $$$$$:   56-block  0
    #####:   57:    }
    $$$$$:   57-block  0
    $$$$$:   57-block  1
    $$$$$:   57-block  2
        -:   58:
        1:   59:}
    $$$$$:   59-block  0
    $$$$$:   59-block  1
    $$$$$:   59-block  2
    $$$$$:   59-block  3
    $$$$$:   59-block  4
    $$$$$:   59-block  5
    $$$$$:   59-block  6
    $$$$$:   59-block  7
    $$$$$:   59-block  8
    $$$$$:   59-block  9
    $$$$$:   59-block 10
    $$$$$:   59-block 11
    $$$$$:   59-block 12
        1:   59-block 13
    $$$$$:   59-block 14
    $$$$$:   59-block 15
    $$$$$:   59-block 16
    $$$$$:   59-block 17
    $$$$$:   59-block 18
    $$$$$:   59-block 19
    $$$$$:   59-block 20
    $$$$$:   59-block 21
    $$$$$:   59-block 22
    $$$$$:   59-block 23
    $$$$$:   59-block 24
    $$$$$:   59-block 25
        -:   60:
        1:   61:bool Service::validateNewDate(int day, int month, int year) {
        1:   61-block  0
        1:   62:    if (day > 31 or month > 12) {
        1:   62-block  0
        1:   62-block  1
    #####:   63:        return false;
    $$$$$:   63-block  0
        -:   64:    }
        -:   65:#define JULY 6
        -:   66:#define APRIL 4
        -:   67:#define SEPTEMBER 9
        -:   68:#define NOVEMBER 11
        1:   69:    if (month == JULY or month == APRIL or month == SEPTEMBER or month == NOVEMBER) {
        1:   69-block  0
        1:   69-block  1
        1:   69-block  2
        1:   69-block  3
    #####:   70:        if (day > 30) {
    $$$$$:   70-block  0
    #####:   71:            return false;
    $$$$$:   71-block  0
        -:   72:        }
    #####:   73:    }
    $$$$$:   73-block  0
        -:   74:#define FEBRUARY 2
        -:   75:# define isLeapYear(year) (year % 4 == 0 and year % 100 != 0) or year % 400 == 0
        1:   76:    if (month == FEBRUARY) {
        1:   76-block  0
    #####:   77:        if (isLeapYear(year)) {
    $$$$$:   77-block  0
    $$$$$:   77-block  1
    $$$$$:   77-block  2
    #####:   78:            if (day > 29) {
    $$$$$:   78-block  0
    #####:   79:                return false;
    $$$$$:   79-block  0
        -:   80:            }
    #####:   81:        } else if (day > 28)
    $$$$$:   81-block  0
    $$$$$:   81-block  1
    #####:   82:            return false;
    $$$$$:   82-block  0
    #####:   83:    }
    $$$$$:   83-block  0
        1:   84:    return year >= 1800;
        1:   84-block  0
        1:   85:}
        1:   85-block  0
        -:   86:
        2:   87:void Service::deleteFootage(const std::string& title) {
        2:   87-block  0
        -:   88:    try {
        2:   89:        repository.deleteFootage(title);
        2:   89-block  0
        3:   90:    }catch (std::exception& e) {
        1:   90-block  0
        1:   90-block  1
        1:   90-block  2
        1:   91:        throw std::exception();
        1:   91-block  0
        1:   92:    }
        1:   92-block  0
        1:   92-block  1
    $$$$$:   92-block  2
        3:   93:}
        1:   93-block  0
        1:   93-block  1
        -:   94:
        2:   95:int Service::getSize() const {
        2:   95-block  0
        2:   96:    return repository.getSize();
        2:   96-block  0
        -:   97:}
        -:   98:
        -:   99:
        1:  100:void testFoo() {
        1:  101:    auto repo = Repository();
        1:  101-block  0
        1:  102:    auto service = Service(repo);
        1:  102-block  0
        -:  103:    try {
        1:  104:        service.addFootage("fdasf,", "fdas,", "fdasf,", "fdafds,", "fdaaf");
        1:  104-block  0
        1:  104-block  1
        1:  104-block  2
        1:  104-block  3
        1:  104-block  4
        1:  104-block  5
        1:  104-block  6
        1:  104-block  7
        1:  104-block  8
        1:  104-block  9
        1:  104-block 10
    #####:  105:        assert(false);
    $$$$$:  105-block  0
    $$$$$:  105-block  1
        1:  106:    }catch(std::exception& e){
        1:  106-block  0
        -:  107:        assert(true);
        1:  108:    }
        1:  108-block  0
        1:  108-block  1
        1:  109:    service.addFootage("F1234,", "Restaurant, ", "12-07-2019,", "13,", "https://www.youtube.com/watch?v=dQw4w9WgXcQ");
        1:  109-block  0
        1:  109-block  1
        1:  109-block  2
        1:  109-block  3
        1:  109-block  4
        1:  109-block  5
    $$$$$:  109-block  6
    $$$$$:  109-block  7
    $$$$$:  109-block  8
    $$$$$:  109-block  9
    $$$$$:  109-block 10
        1:  110:    assert(service.getSize() == 1);
        1:  110-block  0
        1:  110-block  1
    $$$$$:  110-block  2
    $$$$$:  110-block  3
    $$$$$:  110-block  4
        1:  110-block  5
        1:  111:    service.deleteFootage("F1234");
        1:  111-block  0
        1:  111-block  1
    $$$$$:  111-block  2
        1:  112:    assert(service.getSize() == 0);
        1:  112-block  0
        1:  112-block  1
    $$$$$:  112-block  2
    $$$$$:  112-block  3
    $$$$$:  112-block  4
        1:  112-block  5
        -:  113:    try {
        1:  114:        service.deleteFootage("bla");
        1:  114-block  0
        1:  114-block  1
        1:  114-block  2
    #####:  115:        assert(false);
    $$$$$:  115-block  0
    $$$$$:  115-block  1
        1:  116:    }catch (std::exception & e) {
        1:  116-block  0
        -:  117:        assert(true);
        1:  118:    }
        1:  118-block  0
        1:  118-block  1
        3:  119:}
    $$$$$:  119-block  0
    $$$$$:  119-block  1
    $$$$$:  119-block  2
    $$$$$:  119-block  3
    $$$$$:  119-block  4
    $$$$$:  119-block  5
    $$$$$:  119-block  6
    $$$$$:  119-block  7
    $$$$$:  119-block  8
    $$$$$:  119-block  9
    $$$$$:  119-block 10
    $$$$$:  119-block 11
        1:  119-block 12
    $$$$$:  119-block 13
    $$$$$:  119-block 14
    $$$$$:  119-block 15
