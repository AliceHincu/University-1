        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/Service.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/cmake-build-debug/CMakeFiles/Assignment_5_6.dir/Service.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_5-6/cmake-build-debug/CMakeFiles/Assignment_5_6.dir/Service.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 19/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "Service.h"
        -:    6:#include <exception>
        -:    7://#include <cassert>
        -:    8:#include <iostream>
        -:    9:#include <sstream>
        -:   10:#include <ctime>
        -:   11:
       28:   12:Service::Service(Repository &newRepository) {
       14:   12-block  0
       14:   12-block  1
       14:   13:    repository = newRepository;
       14:   13-block  0
       28:   14:}
       14:   14-block  0
    $$$$$:   14-block  1
    $$$$$:   14-block  2
       14:   14-block  3
        -:   15:
       13:   16:void Service::addFootage(const std::string &title, const std::string &type,const std::string &dateString, const std::string &numberAccessedString, const std::string &link) {
       13:   16-block  0
       13:   17:    if (dateString.size() != SIZE_OF_DATE + 1) {
       13:   17-block  0
        1:   18:        throw std::exception();
        1:   18-block  0
        -:   19:    }
       12:   20:    const std::string& newTitle = title;
       12:   21:    std::string newType = type.substr(1, type.size() - 1);
       12:   22:    std::string newNumberAccessedString = numberAccessedString.substr(1, numberAccessedString.size() - 1);
       12:   22-block  0
       12:   23:    std::string monthString = dateString.substr(1, 2);
       12:   23-block  0
       12:   24:    std::string dayString = dateString.substr(4, 2);
       12:   24-block  0
       12:   25:    std::string yearString = dateString.substr(7, 4);
       12:   25-block  0
       12:   26:    std::stringstream convertDayStringToInt(dayString);
       12:   26-block  0
       12:   27:    std::stringstream convertMonthStringToInt(monthString);
       12:   27-block  0
       12:   28:    std::stringstream convertYearStringToInt(yearString);
       12:   28-block  0
        -:   29:    int newDay, newMonth, newYear;
       12:   30:    convertDayStringToInt >> newDay;
       12:   30-block  0
       12:   31:    convertMonthStringToInt >> newMonth;
       12:   31-block  0
       12:   32:    convertYearStringToInt >> newYear;
       12:   32-block  0
       12:   33:    time_t currentTime = time(nullptr);
       12:   33-block  0
       12:   34:    tm* currentTimePointer = localtime(&currentTime);
       12:   34-block  0
       12:   35:    if (!validateNewDate(newDay, newMonth, newYear)) {
       12:   35-block  0
       12:   35-block  1
        1:   36:        throw std::exception();
        1:   36-block  0
        -:   37:    }
       11:   38:    Date currentDate = Date(currentTimePointer->tm_mday, currentTimePointer->tm_mon + 1, currentTimePointer->tm_year + 1900);
       11:   38-block  0
       11:   39:    auto newDate = Date(newDay, newMonth, newYear);
       11:   39-block  0
       11:   40:    if (currentDate < newDate) {
       11:   40-block  0
       11:   40-block  1
        1:   41:        throw std::exception();
        1:   41-block  0
        -:   42:    }
       10:   43:    std::stringstream convertNumberAccessedStringToInt(newNumberAccessedString);
       10:   43-block  0
        -:   44:    int numberAccessed;
       10:   45:    convertNumberAccessedStringToInt >> numberAccessed;
       10:   45-block  0
       10:   46:    if (numberAccessed < 0) {
       10:   46-block  0
        1:   47:        throw std::exception();
        1:   47-block  0
        -:   48:    }
        9:   49:    auto newFootage = Footage(newTitle, newType, newDate, numberAccessed, link);
        9:   49-block  0
        9:   49-block  1
        9:   49-block  2
        9:   49-block  3
    $$$$$:   49-block  4
    $$$$$:   49-block  5
    $$$$$:   49-block  6
        -:   50:    try {
        9:   51:        repository.addFootage(newFootage);
        9:   51-block  0
        9:   52:    }catch (std::exception& exception) {
        8:   52-block  0
        1:   52-block  1
        1:   53:        throw std::exception();
        1:   53-block  0
        1:   54:    }
        1:   54-block  0
        1:   54-block  1
    $$$$$:   54-block  2
       14:   55:}
    $$$$$:   55-block  0
    $$$$$:   55-block  1
    $$$$$:   55-block  2
    $$$$$:   55-block  3
    $$$$$:   55-block  4
    $$$$$:   55-block  5
    $$$$$:   55-block  6
        2:   55-block  7
        1:   55-block  8
    $$$$$:   55-block  9
    $$$$$:   55-block 10
        1:   55-block 11
        8:   55-block 12
        1:   55-block 13
        2:   55-block 14
        4:   55-block 15
        4:   55-block 16
        4:   55-block 17
        4:   55-block 18
        4:   55-block 19
        4:   55-block 20
        4:   55-block 21
        4:   55-block 22
        4:   55-block 23
        -:   56:
       16:   57:bool Service::validateNewDate(int day, int month, int year) {
       16:   57-block  0
       16:   58:    if (day > 31 or month > 12) {
       16:   58-block  0
       16:   58-block  1
        3:   59:        return false;
        3:   59-block  0
        -:   60:    }
        -:   61:#define JULY 6
        -:   62:#define APRIL 4
        -:   63:#define SEPTEMBER 9
        -:   64:#define NOVEMBER 11
       13:   65:    if (month == JULY or month == APRIL or month == SEPTEMBER or month == NOVEMBER) {
       13:   65-block  0
       13:   65-block  1
       13:   65-block  2
       13:   65-block  3
    #####:   66:        if (day > 30) {
    $$$$$:   66-block  0
    #####:   67:            return false;
    $$$$$:   67-block  0
        -:   68:        }
    #####:   69:    }
    $$$$$:   69-block  0
        -:   70:#define FEBRUARY 2
        -:   71:# define isLeapYear(year) (year % 4 == 0 and year % 100 != 0) or year % 400 == 0
       13:   72:    if (month == FEBRUARY) {
       13:   72-block  0
       11:   73:        if (isLeapYear(year)) {
       11:   73-block  0
       10:   73-block  1
        1:   73-block  2
       10:   74:            if (day > 29) {
       10:   74-block  0
    #####:   75:                return false;
    $$$$$:   75-block  0
        -:   76:            }
       11:   77:        } else if (day > 28)
       10:   77-block  0
        1:   77-block  1
    #####:   78:            return false;
    $$$$$:   78-block  0
       11:   79:    }
       11:   79-block  0
       13:   80:    return year >= 1800;
       13:   80-block  0
       16:   81:}
       16:   81-block  0
        -:   82:
        2:   83:void Service::deleteFootage(const std::string& title) {
        2:   83-block  0
        -:   84:    try {
        2:   85:        repository.deleteFootage(title);
        2:   85-block  0
        3:   86:    }catch (std::exception& e) {
        1:   86-block  0
        1:   86-block  1
        1:   86-block  2
        1:   87:        throw std::exception();
        1:   87-block  0
        1:   88:    }
        1:   88-block  0
        1:   88-block  1
    $$$$$:   88-block  2
        3:   89:}
        1:   89-block  0
        1:   89-block  1
        -:   90:
        5:   91:void Service::updateFootage(const std::string &title, const std::string &type, const std::string &dateString,
        5:   91-block  0
        -:   92:                            const std::string &numberAccessedString, const std::string &link) {
        5:   93:    if (dateString.size() != SIZE_OF_DATE + 1) {
        5:   93-block  0
        1:   94:        throw std::exception();
        1:   94-block  0
        -:   95:    }
        4:   96:    const std::string& newTitle = title;
        4:   97:    std::string newType = type.substr(1, type.size() - 1);
        4:   98:    std::string newNumberAccessedString = numberAccessedString.substr(1, numberAccessedString.size() - 1);
        4:   98-block  0
        4:   99:    std::string monthString = dateString.substr(1, 2);
        4:   99-block  0
        4:  100:    std::string dayString = dateString.substr(4, 2);
        4:  100-block  0
        4:  101:    std::string yearString = dateString.substr(7, 4);
        4:  101-block  0
        4:  102:    std::stringstream convertDayStringToInt(dayString);
        4:  102-block  0
        4:  103:    std::stringstream convertMonthStringToInt(monthString);
        4:  103-block  0
        4:  104:    std::stringstream convertYearStringToInt(yearString);
        4:  104-block  0
        -:  105:    int newDay, newMonth, newYear;
        4:  106:    convertDayStringToInt >> newDay;
        4:  106-block  0
        4:  107:    convertMonthStringToInt >> newMonth;
        4:  107-block  0
        4:  108:    convertYearStringToInt >> newYear;
        4:  108-block  0
        4:  109:    time_t currentTime = time(nullptr);
        4:  109-block  0
        4:  110:    tm* currentTimePointer = localtime(&currentTime);
        4:  110-block  0
        4:  111:    if (!validateNewDate(newDay, newMonth, newYear)) {
        4:  111-block  0
        4:  111-block  1
        2:  112:        throw std::exception();
        2:  112-block  0
        -:  113:    }
        2:  114:    Date currentDate = Date(currentTimePointer->tm_mday, currentTimePointer->tm_mon + 1, currentTimePointer->tm_year + 1900);
        2:  114-block  0
        2:  115:    auto newDate = Date(newDay, newMonth, newYear);
        2:  115-block  0
        2:  116:    if (currentDate < newDate) {
        2:  116-block  0
        2:  116-block  1
        1:  117:        throw std::exception();
        1:  117-block  0
        -:  118:    }
        1:  119:    std::stringstream convertNumberAccessedStringToInt(newNumberAccessedString);
        1:  119-block  0
        -:  120:    int numberAccessed;
        1:  121:    convertNumberAccessedStringToInt >> numberAccessed;
        1:  121-block  0
        1:  122:    if (numberAccessed < 0) {
        1:  122-block  0
    #####:  123:        throw std::exception();
    $$$$$:  123-block  0
        -:  124:    }
        1:  125:    auto newFootage = Footage(newTitle, newType, newDate, numberAccessed, link);
        1:  125-block  0
        1:  125-block  1
        1:  125-block  2
        1:  125-block  3
    $$$$$:  125-block  4
    $$$$$:  125-block  5
    $$$$$:  125-block  6
        -:  126:    try {
        1:  127:        repository.updateFootage(newFootage);
        1:  127-block  0
        1:  128:    }catch (std::exception & exception) {
        1:  128-block  0
    $$$$$:  128-block  1
    #####:  129:        throw exception;
    $$$$$:  129-block  0
    #####:  130:    }
    $$$$$:  130-block  0
    $$$$$:  130-block  1
    $$$$$:  130-block  2
        4:  131:}
    $$$$$:  131-block  0
    $$$$$:  131-block  1
    $$$$$:  131-block  2
    $$$$$:  131-block  3
    $$$$$:  131-block  4
    $$$$$:  131-block  5
    $$$$$:  131-block  6
        3:  131-block  7
    $$$$$:  131-block  8
    $$$$$:  131-block  9
    $$$$$:  131-block 10
    $$$$$:  131-block 11
        1:  131-block 12
    $$$$$:  131-block 13
    $$$$$:  131-block 14
        3:  131-block 15
        3:  131-block 16
        3:  131-block 17
        3:  131-block 18
        3:  131-block 19
        3:  131-block 20
        3:  131-block 21
        3:  131-block 22
        3:  131-block 23
        -:  132:
       10:  133:DynamicArray<Footage> Service::getAllElements() {
       10:  133-block  0
       10:  134:    return repository.getAllFootage();
       10:  134-block  0
        -:  135:}
        -:  136:
        2:  137:Service::Service() {
        1:  137-block  0
        1:  137-block  1
        1:  138:    this->repository = Repository();
        1:  138-block  0
        1:  138-block  1
    $$$$$:  138-block  2
        2:  139:}
        1:  139-block  0
    $$$$$:  139-block  1
    $$$$$:  139-block  2
    $$$$$:  139-block  3
        1:  139-block  4
        -:  140:
        -:  141:
