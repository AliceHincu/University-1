        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/TestService.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/TestService.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/TestService.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 24/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "TestService.h"
        -:    6:#include "Service.h"
        -:    7:#include <exception>
        -:    8:#include <cassert>
        -:    9:#include <fstream>
        1:   10:void TestService::test_all() {
        1:   11:	std::ofstream clearFile;
        1:   11-block  0
        1:   12:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   12-block  0
        1:   13:	clearFile.close();
        1:   13-block  0
        1:   14:	test_addFootage_ValidInput_FootageAdded();
        1:   14-block  0
        1:   15:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   15-block  0
        1:   16:	clearFile.close();
        1:   16-block  0
        1:   17:	test_addFootage_InvalidDateFormat_FootageNotAdded();
        1:   17-block  0
        1:   18:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   18-block  0
        1:   19:	clearFile.close();
        1:   19-block  0
        1:   20:	test_addFootage_InvalidDate_FootageNotAdded();
        1:   20-block  0
        1:   21:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   21-block  0
        1:   22:	clearFile.close();
        1:   22-block  0
        1:   23:	test_addFootage_FutureDate_FootageNotAdded();
        1:   23-block  0
        1:   24:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   24-block  0
        1:   25:	clearFile.close();
        1:   25-block  0
        1:   26:	test_addFootage_InvalidAccessCount_FootageNotAdded();
        1:   26-block  0
        1:   27:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   27-block  0
        1:   28:	clearFile.close();
        1:   28-block  0
        1:   29:	test_addFootage_DuplicateFootage_FootageNotAdded();
        1:   29-block  0
        1:   30:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   30-block  0
        1:   31:	clearFile.close();
        1:   31-block  0
        1:   32:	test_deleteFootage_ValidInput_FootageRemoved();
        1:   32-block  0
        1:   33:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   33-block  0
        1:   34:	clearFile.close();
        1:   34-block  0
        1:   35:	test_deleteFootage_Inexistent_FootageNotRemoved();
        1:   35-block  0
        1:   36:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   36-block  0
        1:   37:	clearFile.close();
        1:   37-block  0
        1:   38:	test_updateFootage_ValidInput_FootageChanged();
        1:   38-block  0
        1:   39:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   39-block  0
        1:   40:	clearFile.close();
        1:   40-block  0
        1:   41:	test_updateFootage_InvalidDateFormat_FootageNotChanged();
        1:   41-block  0
        1:   42:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   42-block  0
        1:   43:	clearFile.close();
        1:   43-block  0
        1:   44:	test_updateFootage_InvalidDate_FootageNotChanged();
        1:   44-block  0
        1:   45:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   45-block  0
        1:   46:	clearFile.close();
        1:   46-block  0
        1:   47:	test_updateFootage_FutureDate_FootageNotChanged();
        1:   47-block  0
        1:   48:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   48-block  0
        1:   49:	clearFile.close();
        1:   49-block  0
        1:   50:	test_updateFootage_InvalidAccessCount_FootageNotChanged();
        1:   50-block  0
        1:   51:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   51-block  0
        1:   52:	clearFile.close();
        1:   52-block  0
        1:   53:	test_getCurrent_ValidInput_GetCurrentElement();
        1:   53-block  0
        1:   54:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   54-block  0
        1:   55:	clearFile.close();
        1:   55-block  0
        1:   56:	test_addToMyList_InvalidInput_ThrowsException();
        1:   56-block  0
        1:   57:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   57-block  0
        1:   58:	clearFile.close();
        1:   58-block  0
        1:   59:	clearFile.open("test.csv", std::ofstream::out | std::ostream::trunc);
        1:   59-block  0
        1:   60:	clearFile.close();
        1:   60-block  0
        1:   61:	test_addToMyList_ValidInput_ElementAdded();
        1:   61-block  0
        1:   62:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   62-block  0
        1:   63:	clearFile.close();
        1:   63-block  0
        1:   64:	test_getFilteredList_NegativeAccessed_ThrowsException();
        1:   64-block  0
        1:   65:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   65-block  0
        1:   66:	clearFile.close();
        1:   66-block  0
        1:   67:	test_getFilteredList_ValidInput_GetsList();
        1:   67-block  0
        1:   68:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   68-block  0
        1:   69:	clearFile.close();
        1:   69-block  0
        1:   70:	test_addFootage_InvalidDateFebruary31st_FootageNotAdded();
        1:   70-block  0
        1:   71:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   71-block  0
        1:   72:	clearFile.close();
        1:   72-block  0
        1:   73:	test_addFootage_InvalidDateNovember31st_FootageNotAdded();
        1:   73-block  0
        1:   74:	clearFile.open("test.txt", std::ofstream::out | std::ofstream::trunc);
        1:   74-block  0
        1:   75:	clearFile.close();
        1:   75-block  0
        1:   76:}
        1:   76-block  0
    $$$$$:   76-block  1
    $$$$$:   76-block  2
        -:   77:
        1:   78:void TestService::test_addFootage_ValidInput_FootageAdded() {
        1:   79:	std::string file = "test.txt";
        1:   79-block  0
        1:   80:	auto service = Service();
        1:   80-block  0
        1:   81:	service.setPath(file, "repository");
        1:   81-block  0
        1:   81-block  1
    $$$$$:   81-block  2
        1:   82:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:   82-block  0
        1:   82-block  1
        1:   82-block  2
        1:   82-block  3
        1:   82-block  4
        1:   82-block  5
    $$$$$:   82-block  6
    $$$$$:   82-block  7
    $$$$$:   82-block  8
    $$$$$:   82-block  9
    $$$$$:   82-block 10
        1:   83:	assert(service.getAllElements().size() == 1);
        1:   83-block  0
        1:   83-block  1
    $$$$$:   83-block  2
    $$$$$:   83-block  3
    $$$$$:   83-block  4
    $$$$$:   83-block  5
        1:   83-block  6
        1:   84:}
    $$$$$:   84-block  0
    $$$$$:   84-block  1
    $$$$$:   84-block  2
    $$$$$:   84-block  3
    $$$$$:   84-block  4
    $$$$$:   84-block  5
        1:   84-block  6
    $$$$$:   84-block  7
    $$$$$:   84-block  8
    $$$$$:   84-block  9
        -:   85:
        1:   86:void TestService::test_addFootage_InvalidDateFormat_FootageNotAdded() {
        1:   87:	std::string file = "test.txt";
        1:   87-block  0
        1:   88:	auto service = Service();
        1:   88-block  0
        1:   89:	service.setPath(file, "repository");
        1:   89-block  0
        1:   89-block  1
    $$$$$:   89-block  2
        -:   90:	try {
        1:   91:		service.addFootage("abc", " def", " 02-02-2020dfsads", " 7", " link");
        1:   91-block  0
        1:   91-block  1
        1:   91-block  2
        1:   91-block  3
        1:   91-block  4
        1:   91-block  5
        1:   91-block  6
        1:   91-block  7
        1:   91-block  8
        1:   91-block  9
        1:   91-block 10
        1:   92:	}catch (ValidationException&) {
    $$$$$:   92-block  0
        1:   92-block  1
        -:   93:		static_assert(true, "");
        1:   94:	}
        1:   94-block  0
        1:   94-block  1
        2:   95:}
    $$$$$:   95-block  0
    $$$$$:   95-block  1
    $$$$$:   95-block  2
    $$$$$:   95-block  3
    $$$$$:   95-block  4
    $$$$$:   95-block  5
    $$$$$:   95-block  6
        1:   95-block  7
    $$$$$:   95-block  8
    $$$$$:   95-block  9
    $$$$$:   95-block 10
        -:   96:
        1:   97:void TestService::test_addFootage_InvalidDate_FootageNotAdded() {
        1:   98:	std::string file = "test.txt";
        1:   98-block  0
        1:   99:	auto service = Service();
        1:   99-block  0
        1:  100:	service.setPath(file, "repository");
        1:  100-block  0
        1:  100-block  1
    $$$$$:  100-block  2
        -:  101:	try {
        1:  102:		service.addFootage("abc", " def", " 2020-02-02", " 7", " link");
        1:  102-block  0
        1:  102-block  1
        1:  102-block  2
        1:  102-block  3
        1:  102-block  4
        1:  102-block  5
        1:  102-block  6
        1:  102-block  7
        1:  102-block  8
        1:  102-block  9
        1:  102-block 10
        1:  103:	}catch (ValidationException&) {
    $$$$$:  103-block  0
        1:  103-block  1
        -:  104:		static_assert(true, "");
        1:  105:	}
        1:  105-block  0
        1:  105-block  1
        2:  106:}
    $$$$$:  106-block  0
    $$$$$:  106-block  1
    $$$$$:  106-block  2
    $$$$$:  106-block  3
    $$$$$:  106-block  4
    $$$$$:  106-block  5
    $$$$$:  106-block  6
        1:  106-block  7
    $$$$$:  106-block  8
    $$$$$:  106-block  9
    $$$$$:  106-block 10
        -:  107:
        1:  108:void TestService::test_addFootage_FutureDate_FootageNotAdded() {
        1:  109:	std::string file = "test.txt";
        1:  109-block  0
        1:  110:	auto service = Service();
        1:  110-block  0
        1:  111:	service.setPath(file, "repository");
        1:  111-block  0
        1:  111-block  1
    $$$$$:  111-block  2
        -:  112:	try {
        1:  113:		service.addFootage("abc", " def", " 02-02-2021", " 7", " link");
        1:  113-block  0
        1:  113-block  1
        1:  113-block  2
        1:  113-block  3
        1:  113-block  4
        1:  113-block  5
        1:  113-block  6
        1:  113-block  7
        1:  113-block  8
        1:  113-block  9
        1:  113-block 10
        1:  114:	}catch (ValidationException&) {
    $$$$$:  114-block  0
        1:  114-block  1
        -:  115:		static_assert(true, "");
        1:  116:	}
        1:  116-block  0
        1:  116-block  1
        2:  117:}
    $$$$$:  117-block  0
    $$$$$:  117-block  1
    $$$$$:  117-block  2
    $$$$$:  117-block  3
    $$$$$:  117-block  4
    $$$$$:  117-block  5
    $$$$$:  117-block  6
        1:  117-block  7
    $$$$$:  117-block  8
    $$$$$:  117-block  9
    $$$$$:  117-block 10
        -:  118:
        1:  119:void TestService::test_addFootage_InvalidAccessCount_FootageNotAdded() {
        1:  120:	std::string file = "test.txt";
        1:  120-block  0
        1:  121:	auto service = Service();
        1:  121-block  0
        1:  122:	service.setPath(file, "repository");
        1:  122-block  0
        1:  122-block  1
    $$$$$:  122-block  2
        -:  123:	try {
        1:  124:		service.addFootage("abc", " def", " 02-02-2020", " -2", " link");
        1:  124-block  0
        1:  124-block  1
        1:  124-block  2
        1:  124-block  3
        1:  124-block  4
        1:  124-block  5
        1:  124-block  6
        1:  124-block  7
        1:  124-block  8
        1:  124-block  9
        1:  124-block 10
        1:  125:	}catch (ValidationException&) {
    $$$$$:  125-block  0
        1:  125-block  1
        -:  126:		static_assert(true, "");
        1:  127:	}
        1:  127-block  0
        1:  127-block  1
        -:  128:
        2:  129:}
    $$$$$:  129-block  0
    $$$$$:  129-block  1
    $$$$$:  129-block  2
    $$$$$:  129-block  3
    $$$$$:  129-block  4
    $$$$$:  129-block  5
    $$$$$:  129-block  6
        1:  129-block  7
    $$$$$:  129-block  8
    $$$$$:  129-block  9
    $$$$$:  129-block 10
        -:  130:
        1:  131:void TestService::test_addFootage_DuplicateFootage_FootageNotAdded() {
        1:  132:	std::string file = "test.txt";
        1:  132-block  0
        1:  133:	auto service = Service();
        1:  133-block  0
        1:  134:	service.setPath(file, "repository");
        1:  134-block  0
        1:  134-block  1
    $$$$$:  134-block  2
        1:  135:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  135-block  0
        1:  135-block  1
        1:  135-block  2
        1:  135-block  3
        1:  135-block  4
        1:  135-block  5
    $$$$$:  135-block  6
    $$$$$:  135-block  7
    $$$$$:  135-block  8
    $$$$$:  135-block  9
    $$$$$:  135-block 10
        -:  136:	try {
        1:  137:		service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  137-block  0
        1:  137-block  1
        1:  137-block  2
        1:  137-block  3
        1:  137-block  4
        1:  137-block  5
        1:  137-block  6
        1:  137-block  7
        1:  137-block  8
        1:  137-block  9
        1:  137-block 10
        1:  138:	}catch (ValidationException&) {
    $$$$$:  138-block  0
        1:  138-block  1
        -:  139:		static_assert(true, "");
        1:  140:	}
        1:  140-block  0
        1:  140-block  1
        2:  141:}
    $$$$$:  141-block  0
    $$$$$:  141-block  1
    $$$$$:  141-block  2
    $$$$$:  141-block  3
    $$$$$:  141-block  4
    $$$$$:  141-block  5
    $$$$$:  141-block  6
    $$$$$:  141-block  7
    $$$$$:  141-block  8
    $$$$$:  141-block  9
    $$$$$:  141-block 10
        1:  141-block 11
    $$$$$:  141-block 12
    $$$$$:  141-block 13
    $$$$$:  141-block 14
        -:  142:
        1:  143:void TestService::test_deleteFootage_ValidInput_FootageRemoved() {
        1:  144:	std::string file = "test.txt";
        1:  144-block  0
        1:  145:	auto service = Service();
        1:  145-block  0
        1:  146:	service.setPath(file, "repository");
        1:  146-block  0
        1:  146-block  1
    $$$$$:  146-block  2
        1:  147:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  147-block  0
        1:  147-block  1
        1:  147-block  2
        1:  147-block  3
        1:  147-block  4
        1:  147-block  5
    $$$$$:  147-block  6
    $$$$$:  147-block  7
    $$$$$:  147-block  8
    $$$$$:  147-block  9
    $$$$$:  147-block 10
        1:  148:	service.deleteFootage("abc");
        1:  148-block  0
        1:  148-block  1
    $$$$$:  148-block  2
        1:  149:	assert(service.getAllElements().empty());
        1:  149-block  0
        1:  149-block  1
    $$$$$:  149-block  2
    $$$$$:  149-block  3
    $$$$$:  149-block  4
    $$$$$:  149-block  5
        1:  149-block  6
        1:  150:}
    $$$$$:  150-block  0
    $$$$$:  150-block  1
    $$$$$:  150-block  2
    $$$$$:  150-block  3
    $$$$$:  150-block  4
    $$$$$:  150-block  5
        1:  150-block  6
    $$$$$:  150-block  7
    $$$$$:  150-block  8
    $$$$$:  150-block  9
        -:  151:
        1:  152:void TestService::test_deleteFootage_Inexistent_FootageNotRemoved() {
        1:  153:	std::string file = "test.txt";
        1:  153-block  0
        1:  154:	auto service = Service();
        1:  154-block  0
        1:  155:	service.setPath(file, "repository");
        1:  155-block  0
        1:  155-block  1
    $$$$$:  155-block  2
        -:  156:	try {
        1:  157:		service.deleteFootage("abc");
        1:  157-block  0
        1:  157-block  1
        1:  157-block  2
        1:  158:	}catch (RepositoryException&) {
    $$$$$:  158-block  0
        1:  158-block  1
        -:  159:		static_assert(true, "");
        1:  160:	}
        1:  160-block  0
        1:  160-block  1
        2:  161:}
    $$$$$:  161-block  0
    $$$$$:  161-block  1
    $$$$$:  161-block  2
        1:  161-block  3
    $$$$$:  161-block  4
    $$$$$:  161-block  5
    $$$$$:  161-block  6
        -:  162:
        1:  163:void TestService::test_updateFootage_ValidInput_FootageChanged() {
        1:  164:	std::string file = "test.txt";
        1:  164-block  0
        1:  165:	auto service = Service();
        1:  165-block  0
        1:  166:	service.setPath(file, "repository");
        1:  166-block  0
        1:  166-block  1
    $$$$$:  166-block  2
        1:  167:	service.addFootage(" abc", " def", " 02-02-2020", " 7", " link");
        1:  167-block  0
        1:  167-block  1
        1:  167-block  2
        1:  167-block  3
        1:  167-block  4
        1:  167-block  5
    $$$$$:  167-block  6
    $$$$$:  167-block  7
    $$$$$:  167-block  8
    $$$$$:  167-block  9
    $$$$$:  167-block 10
        1:  168:	service.updateFootage(" abc", " efg", " 03-03-2019", " 9", " link2");
        1:  168-block  0
        1:  168-block  1
        1:  168-block  2
        1:  168-block  3
        1:  168-block  4
        1:  168-block  5
    $$$$$:  168-block  6
    $$$$$:  168-block  7
    $$$$$:  168-block  8
    $$$$$:  168-block  9
    $$$$$:  168-block 10
        1:  169:	assert(service.getAllElements()[0].getType() == "efg");
        1:  169-block  0
        1:  169-block  1
        1:  169-block  2
        1:  169-block  3
    $$$$$:  169-block  4
    $$$$$:  169-block  5
    $$$$$:  169-block  6
    $$$$$:  169-block  7
        1:  169-block  8
    $$$$$:  169-block  9
        1:  170:}
    $$$$$:  170-block  0
    $$$$$:  170-block  1
    $$$$$:  170-block  2
    $$$$$:  170-block  3
    $$$$$:  170-block  4
    $$$$$:  170-block  5
    $$$$$:  170-block  6
    $$$$$:  170-block  7
    $$$$$:  170-block  8
    $$$$$:  170-block  9
    $$$$$:  170-block 10
        1:  170-block 11
    $$$$$:  170-block 12
    $$$$$:  170-block 13
    $$$$$:  170-block 14
        -:  171:
        1:  172:void TestService::test_updateFootage_InvalidDateFormat_FootageNotChanged() {
        1:  173:	std::string file = "test.txt";
        1:  173-block  0
        1:  174:	auto service = Service();
        1:  174-block  0
        1:  175:	service.setPath(file, "repository");
        1:  175-block  0
        1:  175-block  1
    $$$$$:  175-block  2
        1:  176:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  176-block  0
        1:  176-block  1
        1:  176-block  2
        1:  176-block  3
        1:  176-block  4
        1:  176-block  5
    $$$$$:  176-block  6
    $$$$$:  176-block  7
    $$$$$:  176-block  8
    $$$$$:  176-block  9
    $$$$$:  176-block 10
        -:  177:	try {
        1:  178:		service.updateFootage("abc", " efg", " 02-02-2020dfsfa", " 9", " link2");
        1:  178-block  0
        1:  178-block  1
        1:  178-block  2
        1:  178-block  3
        1:  178-block  4
        1:  178-block  5
        1:  178-block  6
        1:  178-block  7
        1:  178-block  8
        1:  178-block  9
        1:  178-block 10
        1:  179:	}catch (ValidationException&) {
    $$$$$:  179-block  0
        1:  179-block  1
        -:  180:		static_assert(true, "");
        1:  181:	}
        1:  181-block  0
        1:  181-block  1
        2:  182:}
    $$$$$:  182-block  0
    $$$$$:  182-block  1
    $$$$$:  182-block  2
    $$$$$:  182-block  3
    $$$$$:  182-block  4
    $$$$$:  182-block  5
    $$$$$:  182-block  6
    $$$$$:  182-block  7
    $$$$$:  182-block  8
    $$$$$:  182-block  9
    $$$$$:  182-block 10
        1:  182-block 11
    $$$$$:  182-block 12
    $$$$$:  182-block 13
    $$$$$:  182-block 14
        -:  183:
        1:  184:void TestService::test_updateFootage_InvalidDate_FootageNotChanged() {
        1:  185:	std::string file = "test.txt";
        1:  185-block  0
        1:  186:	auto service = Service();
        1:  186-block  0
        1:  187:	service.setPath(file, "repository");
        1:  187-block  0
        1:  187-block  1
    $$$$$:  187-block  2
        1:  188:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  188-block  0
        1:  188-block  1
        1:  188-block  2
        1:  188-block  3
        1:  188-block  4
        1:  188-block  5
    $$$$$:  188-block  6
    $$$$$:  188-block  7
    $$$$$:  188-block  8
    $$$$$:  188-block  9
    $$$$$:  188-block 10
        -:  189:	try {
        1:  190:		service.updateFootage("abc", " efg", " 2020-02-02", " 9", " link2");
        1:  190-block  0
        1:  190-block  1
        1:  190-block  2
        1:  190-block  3
        1:  190-block  4
        1:  190-block  5
        1:  190-block  6
        1:  190-block  7
        1:  190-block  8
        1:  190-block  9
        1:  190-block 10
        1:  191:	}catch (ValidationException&) {
    $$$$$:  191-block  0
        1:  191-block  1
        -:  192:		static_assert(true, "");
        1:  193:	}
        1:  193-block  0
        1:  193-block  1
        2:  194:}
    $$$$$:  194-block  0
    $$$$$:  194-block  1
    $$$$$:  194-block  2
    $$$$$:  194-block  3
    $$$$$:  194-block  4
    $$$$$:  194-block  5
    $$$$$:  194-block  6
    $$$$$:  194-block  7
    $$$$$:  194-block  8
    $$$$$:  194-block  9
    $$$$$:  194-block 10
        1:  194-block 11
    $$$$$:  194-block 12
    $$$$$:  194-block 13
    $$$$$:  194-block 14
        -:  195:
        1:  196:void TestService::test_updateFootage_FutureDate_FootageNotChanged() {
        1:  197:	std::string file = "test.txt";
        1:  197-block  0
        1:  198:	auto service = Service();
        1:  198-block  0
        1:  199:	service.setPath(file, "repository");
        1:  199-block  0
        1:  199-block  1
    $$$$$:  199-block  2
        1:  200:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  200-block  0
        1:  200-block  1
        1:  200-block  2
        1:  200-block  3
        1:  200-block  4
        1:  200-block  5
    $$$$$:  200-block  6
    $$$$$:  200-block  7
    $$$$$:  200-block  8
    $$$$$:  200-block  9
    $$$$$:  200-block 10
        -:  201:	try {
        1:  202:		service.updateFootage("abc", " efg", " 03-03-2021", " 9", " link2");
        1:  202-block  0
        1:  202-block  1
        1:  202-block  2
        1:  202-block  3
        1:  202-block  4
        1:  202-block  5
        1:  202-block  6
        1:  202-block  7
        1:  202-block  8
        1:  202-block  9
        1:  202-block 10
        1:  203:	}catch (ValidationException&) {
    $$$$$:  203-block  0
        1:  203-block  1
        -:  204:		static_assert(true, "");
        1:  205:	}
        1:  205-block  0
        1:  205-block  1
        2:  206:}
    $$$$$:  206-block  0
    $$$$$:  206-block  1
    $$$$$:  206-block  2
    $$$$$:  206-block  3
    $$$$$:  206-block  4
    $$$$$:  206-block  5
    $$$$$:  206-block  6
    $$$$$:  206-block  7
    $$$$$:  206-block  8
    $$$$$:  206-block  9
    $$$$$:  206-block 10
        1:  206-block 11
    $$$$$:  206-block 12
    $$$$$:  206-block 13
    $$$$$:  206-block 14
        -:  207:
        1:  208:void TestService::test_updateFootage_InvalidAccessCount_FootageNotChanged() {
        1:  209:	std::string file = "test.txt";
        1:  209-block  0
        1:  210:	auto service = Service();
        1:  210-block  0
        1:  211:	service.setPath(file, "repository");
        1:  211-block  0
        1:  211-block  1
    $$$$$:  211-block  2
        1:  212:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  212-block  0
        1:  212-block  1
        1:  212-block  2
        1:  212-block  3
        1:  212-block  4
        1:  212-block  5
    $$$$$:  212-block  6
    $$$$$:  212-block  7
    $$$$$:  212-block  8
    $$$$$:  212-block  9
    $$$$$:  212-block 10
        -:  213:	try {
        1:  214:		service.updateFootage("abc", " efg", " 2020-02-02", " -9", " link2");
        1:  214-block  0
        1:  214-block  1
        1:  214-block  2
        1:  214-block  3
        1:  214-block  4
        1:  214-block  5
        1:  214-block  6
        1:  214-block  7
        1:  214-block  8
        1:  214-block  9
        1:  214-block 10
        1:  215:	}catch (ValidationException&) {
    $$$$$:  215-block  0
        1:  215-block  1
        -:  216:		static_assert(true, "");
        1:  217:	}
        1:  217-block  0
        1:  217-block  1
        2:  218:}
    $$$$$:  218-block  0
    $$$$$:  218-block  1
    $$$$$:  218-block  2
    $$$$$:  218-block  3
    $$$$$:  218-block  4
    $$$$$:  218-block  5
    $$$$$:  218-block  6
    $$$$$:  218-block  7
    $$$$$:  218-block  8
    $$$$$:  218-block  9
    $$$$$:  218-block 10
        1:  218-block 11
    $$$$$:  218-block 12
    $$$$$:  218-block 13
    $$$$$:  218-block 14
        -:  219:
        1:  220:void TestService::test_getCurrent_ValidInput_GetCurrentElement() {
        1:  221:	std::string file = "test.txt";
        1:  221-block  0
        1:  222:	auto service = Service();
        1:  222-block  0
        1:  223:	service.setPath(file, "repository");
        1:  223-block  0
        1:  223-block  1
    $$$$$:  223-block  2
        1:  224:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  224-block  0
        1:  224-block  1
        1:  224-block  2
        1:  224-block  3
        1:  224-block  4
        1:  224-block  5
    $$$$$:  224-block  6
    $$$$$:  224-block  7
    $$$$$:  224-block  8
    $$$$$:  224-block  9
    $$$$$:  224-block 10
        1:  225:	assert(service.getCurrent().getTitle() == "abc");
        1:  225-block  0
        1:  225-block  1
        1:  225-block  2
    $$$$$:  225-block  3
    $$$$$:  225-block  4
    $$$$$:  225-block  5
    $$$$$:  225-block  6
        1:  225-block  7
    $$$$$:  225-block  8
        1:  226:}
    $$$$$:  226-block  0
    $$$$$:  226-block  1
    $$$$$:  226-block  2
    $$$$$:  226-block  3
    $$$$$:  226-block  4
    $$$$$:  226-block  5
    $$$$$:  226-block  6
        1:  226-block  7
    $$$$$:  226-block  8
    $$$$$:  226-block  9
    $$$$$:  226-block 10
        -:  227:
        1:  228:void TestService::test_addToMyList_ValidInput_ElementAdded() {
        1:  229:	std::string file = "test.txt";
        1:  229-block  0
        1:  230:	auto service = Service();
        1:  230-block  0
        1:  231:	service.setPath(file, "repository");
        1:  231-block  0
        1:  231-block  1
    $$$$$:  231-block  2
        1:  232:	std::string fileMyList = "test.csv";
        1:  232-block  0
        1:  233:	service.setPath(fileMyList, "mylist");
        1:  233-block  0
        1:  233-block  1
    $$$$$:  233-block  2
        1:  234:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  234-block  0
        1:  234-block  1
        1:  234-block  2
        1:  234-block  3
        1:  234-block  4
        1:  234-block  5
    $$$$$:  234-block  6
    $$$$$:  234-block  7
    $$$$$:  234-block  8
    $$$$$:  234-block  9
    $$$$$:  234-block 10
        1:  235:	service.addToMyList("abc");
        1:  235-block  0
        1:  235-block  1
    $$$$$:  235-block  2
        1:  236:	assert(service.getMyList().size() == 1);
        1:  236-block  0
        1:  236-block  1
    $$$$$:  236-block  2
    $$$$$:  236-block  3
    $$$$$:  236-block  4
    $$$$$:  236-block  5
        1:  236-block  6
        1:  237:}
    $$$$$:  237-block  0
    $$$$$:  237-block  1
    $$$$$:  237-block  2
    $$$$$:  237-block  3
    $$$$$:  237-block  4
    $$$$$:  237-block  5
    $$$$$:  237-block  6
        1:  237-block  7
    $$$$$:  237-block  8
    $$$$$:  237-block  9
    $$$$$:  237-block 10
    $$$$$:  237-block 11
        -:  238:
        1:  239:void TestService::test_addToMyList_InvalidInput_ThrowsException() {
        1:  240:	std::string file = "test.txt";
        1:  240-block  0
        1:  241:	auto service = Service();
        1:  241-block  0
        1:  242:	service.setPath(file, "repository");
        1:  242-block  0
        1:  242-block  1
    $$$$$:  242-block  2
        1:  243:	std::string fileMyList = "test.csv";
        1:  243-block  0
        1:  244:	service.setPath(fileMyList, "mylist");
        1:  244-block  0
        1:  244-block  1
    $$$$$:  244-block  2
        1:  245:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  245-block  0
        1:  245-block  1
        1:  245-block  2
        1:  245-block  3
        1:  245-block  4
        1:  245-block  5
    $$$$$:  245-block  6
    $$$$$:  245-block  7
    $$$$$:  245-block  8
    $$$$$:  245-block  9
    $$$$$:  245-block 10
        -:  246:	try {
        1:  247:		service.addToMyList("bcd");
        1:  247-block  0
        1:  247-block  1
        1:  247-block  2
        1:  248:	}catch (ValidationException&) {
    $$$$$:  248-block  0
        1:  248-block  1
        -:  249:		static_assert(true, "");
        1:  250:	}
        1:  250-block  0
        1:  250-block  1
        2:  251:}
    $$$$$:  251-block  0
    $$$$$:  251-block  1
    $$$$$:  251-block  2
    $$$$$:  251-block  3
    $$$$$:  251-block  4
    $$$$$:  251-block  5
    $$$$$:  251-block  6
    $$$$$:  251-block  7
        1:  251-block  8
    $$$$$:  251-block  9
    $$$$$:  251-block 10
    $$$$$:  251-block 11
    $$$$$:  251-block 12
        -:  252:
        1:  253:void TestService::test_getFilteredList_NegativeAccessed_ThrowsException() {
        1:  254:	std::string file = "test.txt";
        1:  254-block  0
        1:  255:	auto service = Service();
        1:  255-block  0
        1:  256:	service.setPath(file, "repository");
        1:  256-block  0
        1:  256-block  1
    $$$$$:  256-block  2
        1:  257:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  257-block  0
        1:  257-block  1
        1:  257-block  2
        1:  257-block  3
        1:  257-block  4
        1:  257-block  5
    $$$$$:  257-block  6
    $$$$$:  257-block  7
    $$$$$:  257-block  8
    $$$$$:  257-block  9
    $$$$$:  257-block 10
        1:  258:	service.addFootage("bcd", " def", " 02-02-2020", " 10", " link");
        1:  258-block  0
        1:  258-block  1
        1:  258-block  2
        1:  258-block  3
        1:  258-block  4
        1:  258-block  5
    $$$$$:  258-block  6
    $$$$$:  258-block  7
    $$$$$:  258-block  8
    $$$$$:  258-block  9
    $$$$$:  258-block 10
        1:  259:	service.addFootage("cde", " ghi", " 02-02-2020", " 7", " link");
        1:  259-block  0
        1:  259-block  1
        1:  259-block  2
        1:  259-block  3
        1:  259-block  4
        1:  259-block  5
    $$$$$:  259-block  6
    $$$$$:  259-block  7
    $$$$$:  259-block  8
    $$$$$:  259-block  9
    $$$$$:  259-block 10
        1:  260:	service.addFootage("efg", " ghi", " 02-02-2020", " 10", " link");
        1:  260-block  0
        1:  260-block  1
        1:  260-block  2
        1:  260-block  3
        1:  260-block  4
        1:  260-block  5
    $$$$$:  260-block  6
    $$$$$:  260-block  7
    $$$$$:  260-block  8
    $$$$$:  260-block  9
    $$$$$:  260-block 10
        -:  261:	try {
        1:  262:		auto filteredList = service.getFilteredList("def", " -1");
        1:  262-block  0
        1:  262-block  1
        1:  262-block  2
        1:  262-block  3
        1:  262-block  4
        1:  263:	}catch (ValidationException&) {
    $$$$$:  263-block  0
        1:  263-block  1
        -:  264:		static_assert(true, "");
        1:  265:	}
        1:  265-block  0
        1:  265-block  1
        2:  266:}
    $$$$$:  266-block  0
    $$$$$:  266-block  1
    $$$$$:  266-block  2
    $$$$$:  266-block  3
    $$$$$:  266-block  4
    $$$$$:  266-block  5
    $$$$$:  266-block  6
    $$$$$:  266-block  7
    $$$$$:  266-block  8
    $$$$$:  266-block  9
    $$$$$:  266-block 10
    $$$$$:  266-block 11
    $$$$$:  266-block 12
    $$$$$:  266-block 13
    $$$$$:  266-block 14
    $$$$$:  266-block 15
    $$$$$:  266-block 16
    $$$$$:  266-block 17
    $$$$$:  266-block 18
    $$$$$:  266-block 19
        1:  266-block 20
    $$$$$:  266-block 21
    $$$$$:  266-block 22
    $$$$$:  266-block 23
        -:  267:
        1:  268:void TestService::test_getFilteredList_ValidInput_GetsList() {
        1:  269:	std::string file = "test.txt";
        1:  269-block  0
        1:  270:	auto service = Service();
        1:  270-block  0
        1:  271:	service.setPath(file, "repository");
        1:  271-block  0
        1:  271-block  1
    $$$$$:  271-block  2
        1:  272:	service.addFootage("abc", " def", " 02-02-2020", " 7", " link");
        1:  272-block  0
        1:  272-block  1
        1:  272-block  2
        1:  272-block  3
        1:  272-block  4
        1:  272-block  5
    $$$$$:  272-block  6
    $$$$$:  272-block  7
    $$$$$:  272-block  8
    $$$$$:  272-block  9
    $$$$$:  272-block 10
        1:  273:	service.addFootage("bcd", " def", " 02-02-2020", " 10", " link");
        1:  273-block  0
        1:  273-block  1
        1:  273-block  2
        1:  273-block  3
        1:  273-block  4
        1:  273-block  5
    $$$$$:  273-block  6
    $$$$$:  273-block  7
    $$$$$:  273-block  8
    $$$$$:  273-block  9
    $$$$$:  273-block 10
        1:  274:	service.addFootage("cde", " ghi", " 02-02-2020", " 7", " link");
        1:  274-block  0
        1:  274-block  1
        1:  274-block  2
        1:  274-block  3
        1:  274-block  4
        1:  274-block  5
    $$$$$:  274-block  6
    $$$$$:  274-block  7
    $$$$$:  274-block  8
    $$$$$:  274-block  9
    $$$$$:  274-block 10
        1:  275:	service.addFootage("efg", " ghi", " 02-02-2020", " 10", " link");
        1:  275-block  0
        1:  275-block  1
        1:  275-block  2
        1:  275-block  3
        1:  275-block  4
        1:  275-block  5
    $$$$$:  275-block  6
    $$$$$:  275-block  7
    $$$$$:  275-block  8
    $$$$$:  275-block  9
    $$$$$:  275-block 10
        1:  276:	assert(service.getFilteredList("def", " 9").size() == 1);
        1:  276-block  0
        1:  276-block  1
        1:  276-block  2
        1:  276-block  3
    $$$$$:  276-block  4
    $$$$$:  276-block  5
    $$$$$:  276-block  6
    $$$$$:  276-block  7
        1:  276-block  8
    $$$$$:  276-block  9
    $$$$$:  276-block 10
        1:  277:}
    $$$$$:  277-block  0
    $$$$$:  277-block  1
    $$$$$:  277-block  2
    $$$$$:  277-block  3
    $$$$$:  277-block  4
    $$$$$:  277-block  5
    $$$$$:  277-block  6
    $$$$$:  277-block  7
    $$$$$:  277-block  8
    $$$$$:  277-block  9
    $$$$$:  277-block 10
    $$$$$:  277-block 11
    $$$$$:  277-block 12
    $$$$$:  277-block 13
    $$$$$:  277-block 14
    $$$$$:  277-block 15
    $$$$$:  277-block 16
    $$$$$:  277-block 17
    $$$$$:  277-block 18
    $$$$$:  277-block 19
        1:  277-block 20
    $$$$$:  277-block 21
    $$$$$:  277-block 22
    $$$$$:  277-block 23
        -:  278:
        1:  279:void TestService::test_addFootage_InvalidDateNovember31st_FootageNotAdded() {
        1:  280:	std::string file = "test.txt";
        1:  280-block  0
        1:  281:	auto service = Service();
        1:  281-block  0
        1:  282:	service.setPath(file, "repository");
        1:  282-block  0
        1:  282-block  1
    $$$$$:  282-block  2
        -:  283:	try {
        1:  284:		service.addFootage("abc", " def", " 11-31-2019", " 7", " link");
        1:  284-block  0
        1:  284-block  1
        1:  284-block  2
        1:  284-block  3
        1:  284-block  4
        1:  284-block  5
        1:  284-block  6
        1:  284-block  7
        1:  284-block  8
        1:  284-block  9
        1:  284-block 10
        1:  285:	}catch(ValidationException&) {
    $$$$$:  285-block  0
        1:  285-block  1
        -:  286:		static_assert(true, "");
        1:  287:	}
        1:  287-block  0
        1:  287-block  1
        2:  288:}
    $$$$$:  288-block  0
    $$$$$:  288-block  1
    $$$$$:  288-block  2
    $$$$$:  288-block  3
    $$$$$:  288-block  4
    $$$$$:  288-block  5
    $$$$$:  288-block  6
        1:  288-block  7
    $$$$$:  288-block  8
    $$$$$:  288-block  9
    $$$$$:  288-block 10
        -:  289:
        1:  290:void TestService::test_addFootage_InvalidDateFebruary31st_FootageNotAdded() {
        1:  291:	std::string file = "test.txt";
        1:  291-block  0
        1:  292:	auto service = Service();
        1:  292-block  0
        1:  293:	service.setPath(file, "repository");
        1:  293-block  0
        1:  293-block  1
    $$$$$:  293-block  2
        -:  294:	try {
        1:  295:		service.addFootage("abc", " def", " 02-31-2019", " 7", " link");
        1:  295-block  0
        1:  295-block  1
        1:  295-block  2
        1:  295-block  3
        1:  295-block  4
        1:  295-block  5
        1:  295-block  6
        1:  295-block  7
        1:  295-block  8
        1:  295-block  9
        1:  295-block 10
        1:  296:	}catch(ValidationException&) {
    $$$$$:  296-block  0
        1:  296-block  1
        -:  297:		static_assert(true, "");
        1:  298:	}
        1:  298-block  0
        1:  298-block  1
        2:  299:}
    $$$$$:  299-block  0
    $$$$$:  299-block  1
    $$$$$:  299-block  2
    $$$$$:  299-block  3
    $$$$$:  299-block  4
    $$$$$:  299-block  5
    $$$$$:  299-block  6
        1:  299-block  7
    $$$$$:  299-block  8
    $$$$$:  299-block  9
    $$$$$:  299-block 10
        -:  300:
        -:  301:
        -:  302:
        -:  303:
