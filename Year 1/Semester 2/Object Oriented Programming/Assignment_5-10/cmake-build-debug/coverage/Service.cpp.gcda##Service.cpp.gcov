        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/Service.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/Service.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/Service.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 19/03/2020.
        -:    3://
        -:    4:
        -:    5:#include "Service.h"
        -:    6:#include <iostream>
        -:    7:#include <sstream>
        -:    8:#include <algorithm>
        -:    9:#include <vector>
        -:   10:
       42:   11:Service::Service() {
       21:   11-block  0
       21:   11-block  1
       21:   12:	repository = nullptr;
       21:   13:	myListRepository = nullptr;
       42:   14:}
       21:   14-block  0
       21:   14-block  1
        -:   15:
       26:   16:void Service::addFootage(const std::string &title, const std::string &type,const std::string &dateString, const std::string &numberAccessedString, const std::string &link) {
       26:   16-block  0
       26:   17:	std::vector<std::string> arrayOfParameters;
       26:   18:	arrayOfParameters.push_back("add");
       26:   18-block  0
       26:   18-block  1
    $$$$$:   18-block  2
       26:   19:	arrayOfParameters.push_back(title);
       26:   19-block  0
       26:   20:	arrayOfParameters.push_back(type);
       26:   20-block  0
       26:   21:	arrayOfParameters.push_back(dateString);
       26:   21-block  0
       26:   22:	arrayOfParameters.push_back(numberAccessedString);
       26:   22-block  0
       26:   23:	arrayOfParameters.push_back(link);
       26:   23-block  0
        -:   24:	try {
       26:   25:		auto validator = Validator(arrayOfParameters);
       26:   25-block  0
       26:   26:	}catch (ValidationException& exception) {
       20:   26-block  0
        6:   26-block  1
        6:   27:		throw ValidationException(exception.what());
        6:   27-block  0
        6:   27-block  1
        6:   27-block  2
        6:   27-block  3
        6:   27-block  4
        6:   27-block  5
    $$$$$:   27-block  6
        6:   28:	}
        6:   28-block  0
        6:   28-block  1
    $$$$$:   28-block  2
       20:   29:	const std::string& newTitle = title;
       20:   30:	std::string newType = type.substr(1, type.size() - 1);
       20:   30-block  0
       20:   31:	std::string newNumberAccessedString = numberAccessedString.substr(1, numberAccessedString.size() - 1);
       20:   31-block  0
       20:   32:	std::string monthString = dateString.substr(1, 2);
       20:   32-block  0
       20:   33:	std::string dayString = dateString.substr(4, 2);
       20:   33-block  0
       20:   34:	std::string yearString = dateString.substr(7, 4);
       20:   34-block  0
       20:   35:	std::stringstream convertDayStringToInt(dayString);
       20:   35-block  0
       20:   36:	std::stringstream convertMonthStringToInt(monthString);
       20:   36-block  0
       20:   37:	std::stringstream convertYearStringToInt(yearString);
       20:   37-block  0
       20:   38:	int newDay = 0, newMonth = 0, newYear = 0;
       20:   39:	convertDayStringToInt >> newDay;
       20:   39-block  0
       20:   40:	convertMonthStringToInt >> newMonth;
       20:   40-block  0
       20:   41:	convertYearStringToInt >> newYear;
       20:   41-block  0
       20:   42:	auto newDate = Date(newDay, newMonth, newYear);
       20:   42-block  0
       20:   43:	std::stringstream convertNumberAccessedStringToInt(newNumberAccessedString);
       20:   43-block  0
       20:   44:	int numberAccessed = 0;
       20:   45:	convertNumberAccessedStringToInt >> numberAccessed;
       20:   45-block  0
       20:   46:	auto newFootage = Footage(newTitle, newType, newDate, numberAccessed, link.substr(1));
       20:   46-block  0
       20:   46-block  1
       20:   46-block  2
       20:   46-block  3
    $$$$$:   46-block  4
    $$$$$:   46-block  5
    $$$$$:   46-block  6
        -:   47:	try {
       20:   48:		repository->addFootage(newFootage);
       20:   48-block  0
       20:   49:	}catch (RepositoryException& exception) {
       19:   49-block  0
        1:   49-block  1
        1:   50:		throw ValidationException("Duplicate footage");
        1:   50-block  0
        1:   50-block  1
        1:   50-block  2
        1:   50-block  3
        1:   50-block  4
    $$$$$:   50-block  5
        1:   51:	}
        1:   51-block  0
        1:   51-block  1
       40:   52:}
    $$$$$:   52-block  0
        6:   52-block  1
    $$$$$:   52-block  2
    $$$$$:   52-block  3
    $$$$$:   52-block  4
    $$$$$:   52-block  5
    $$$$$:   52-block  6
    $$$$$:   52-block  7
    $$$$$:   52-block  8
    $$$$$:   52-block  9
    $$$$$:   52-block 10
    $$$$$:   52-block 11
    $$$$$:   52-block 12
    $$$$$:   52-block 13
        1:   52-block 14
    $$$$$:   52-block 15
       19:   52-block 16
        1:   52-block 17
        1:   52-block 18
        1:   52-block 19
        1:   52-block 20
        1:   52-block 21
        1:   52-block 22
        1:   52-block 23
        1:   52-block 24
        1:   52-block 25
        1:   52-block 26
        7:   52-block 27
        7:   52-block 28
        -:   53:
        2:   54:void Service::deleteFootage(const std::string& title) {
        2:   54-block  0
        -:   55:	try {
        2:   56:		repository->deleteFootage(title);
        2:   56-block  0
        -:   57://		myListRepository->deleteFootage(title);
        3:   58:	}catch (RepositoryException& e) {
        1:   58-block  0
        1:   58-block  1
        1:   58-block  2
        1:   59:		throw e;
        1:   59-block  0
        1:   60:	}
        1:   60-block  0
        1:   60-block  1
    $$$$$:   60-block  2
        3:   61:}
        1:   61-block  0
        1:   61-block  1
        -:   62:
        5:   63:void Service::updateFootage(const std::string &title, const std::string &type, const std::string &dateString,
        5:   63-block  0
        -:   64:                            const std::string &numberAccessedString, const std::string &link) {
        5:   65:	std::vector<std::string> arrayOfParameters;
        5:   66:	arrayOfParameters.push_back("update");
        5:   66-block  0
        5:   66-block  1
    $$$$$:   66-block  2
        5:   67:	arrayOfParameters.push_back(title);
        5:   67-block  0
        5:   68:	arrayOfParameters.push_back(type);
        5:   68-block  0
        5:   69:	arrayOfParameters.push_back(dateString);
        5:   69-block  0
        5:   70:	arrayOfParameters.push_back(numberAccessedString);
        5:   70-block  0
        5:   71:	arrayOfParameters.push_back(link);
        5:   71-block  0
        -:   72:	try {
        5:   73:		auto validator = Validator(arrayOfParameters);
        5:   73-block  0
        5:   74:	}catch (ValidationException& exception) {
        1:   74-block  0
        4:   74-block  1
        4:   75:		throw exception;
        4:   75-block  0
        4:   76:	}
        4:   76-block  0
        4:   76-block  1
    $$$$$:   76-block  2
        1:   77:	const std::string& newTitle = title;
        1:   78:	std::string newType = type.substr(1, type.size() - 1);
        1:   78-block  0
        1:   79:	std::string newNumberAccessedString = numberAccessedString.substr(1, numberAccessedString.size() - 1);
        1:   79-block  0
        1:   80:	std::string monthString = dateString.substr(1, 2);
        1:   80-block  0
        1:   81:	std::string dayString = dateString.substr(4, 2);
        1:   81-block  0
        1:   82:	std::string yearString = dateString.substr(7, 4);
        1:   82-block  0
        1:   83:	std::stringstream convertDayStringToInt(dayString);
        1:   83-block  0
        1:   84:	std::stringstream convertMonthStringToInt(monthString);
        1:   84-block  0
        1:   85:	std::stringstream convertYearStringToInt(yearString);
        1:   85-block  0
        1:   86:	int newDay = 0, newMonth = 0, newYear = 0;
        1:   87:	convertDayStringToInt >> newDay;
        1:   87-block  0
        1:   88:	convertMonthStringToInt >> newMonth;
        1:   88-block  0
        1:   89:	convertYearStringToInt >> newYear;
        1:   89-block  0
        1:   90:	auto newDate = Date(newDay, newMonth, newYear);
        1:   90-block  0
        1:   91:	std::stringstream convertNumberAccessedStringToInt(newNumberAccessedString);
        1:   91-block  0
        1:   92:	int numberAccessed = 0;
        1:   93:	convertNumberAccessedStringToInt >> numberAccessed;
        1:   93-block  0
        1:   94:	auto newFootage = Footage(newTitle, newType, newDate, numberAccessed, link.substr(1));
        1:   94-block  0
        1:   94-block  1
        1:   94-block  2
        1:   94-block  3
    $$$$$:   94-block  4
    $$$$$:   94-block  5
    $$$$$:   94-block  6
        -:   95:	try {
        1:   96:		repository->updateFootage(newFootage);
        1:   96-block  0
        -:   97://		myListRepository->updateFootage(newFootage);
        1:   98:	}catch (RepositoryException & exception) {
        1:   98-block  0
    $$$$$:   98-block  1
    #####:   99:		throw exception;
    $$$$$:   99-block  0
    #####:  100:	}
    $$$$$:  100-block  0
    $$$$$:  100-block  1
       13:  101:}
    $$$$$:  101-block  0
        4:  101-block  1
    $$$$$:  101-block  2
    $$$$$:  101-block  3
    $$$$$:  101-block  4
    $$$$$:  101-block  5
    $$$$$:  101-block  6
    $$$$$:  101-block  7
    $$$$$:  101-block  8
    $$$$$:  101-block  9
    $$$$$:  101-block 10
    $$$$$:  101-block 11
    $$$$$:  101-block 12
    $$$$$:  101-block 13
        1:  101-block 14
    $$$$$:  101-block 15
    $$$$$:  101-block 16
    $$$$$:  101-block 17
    $$$$$:  101-block 18
    $$$$$:  101-block 19
    $$$$$:  101-block 20
    $$$$$:  101-block 21
    $$$$$:  101-block 22
    $$$$$:  101-block 23
    $$$$$:  101-block 24
        4:  101-block 25
        4:  101-block 26
        -:  102:
        3:  103:std::vector<Footage> Service::getAllElements() {
        3:  103-block  0
        3:  104:	return repository->getAllFootage();
        3:  104-block  0
        -:  105:}
        -:  106:
        -:  107://Service::Service(): repository(FileRepository(std::to_string(0))) {
        -:  108://
        -:  109://}
        -:  110:
        1:  111:Footage Service::getCurrent() {
        1:  111-block  0
        1:  112:	return repository->getCurrentElement();
        1:  112-block  0
        -:  113:}
        -:  114:
        2:  115:void Service::addToMyList(const std::string &title) {
        2:  115-block  0
        2:  116:	auto arrayOfTapes = repository->getAllFootage();
        3:  117:	for (auto & arrayOfTape : arrayOfTapes) {
        2:  117-block  0
        3:  117-block  1
        1:  117-block  2
        1:  117-block  3
        2:  118:		if (arrayOfTape.getTitle() == title) {
        2:  118-block  0
        2:  118-block  1
        1:  119:			myListRepository->addFootage(arrayOfTape);
        1:  119-block  0
        -:  120:			return;
        -:  121:		}
        -:  122:	}
        1:  123:	throw ValidationException("Element does not exist");
        1:  123-block  0
        1:  123-block  1
        1:  123-block  2
        1:  123-block  3
        1:  123-block  4
    $$$$$:  123-block  5
        1:  123-block  6
        3:  124:}
        1:  124-block  0
    $$$$$:  124-block  1
    $$$$$:  124-block  2
        1:  124-block  3
        1:  124-block  4
        -:  125:
        1:  126:std::vector<Footage> Service::getMyList() {
        1:  126-block  0
        1:  127:	return myListRepository->getAllFootage();
        1:  127-block  0
        -:  128:}
        -:  129:
        2:  130:std::vector<Footage> Service::getFilteredList(const std::string &type, const std::string &maximumAccessCount) {
        2:  130-block  0
        2:  131:	auto arrayOfTapes = repository->getAllFootage();
        2:  132:	std::string newNumberAccessedString = maximumAccessCount.substr(1, maximumAccessCount.size() - 1);
        2:  132-block  0
        2:  133:	std::stringstream convertNumberAccessedStringToInt(newNumberAccessedString);
        2:  133-block  0
        2:  134:	int numberAccessed = 0;
        2:  135:	convertNumberAccessedStringToInt >> numberAccessed;
        2:  135-block  0
        2:  136:	if (numberAccessed < 0) {
        2:  136-block  0
        1:  137:		throw ValidationException("Invalid access count");
        1:  137-block  0
        1:  137-block  1
        1:  137-block  2
        1:  137-block  3
        1:  137-block  4
    $$$$$:  137-block  5
        1:  137-block  6
        -:  138:	}
        1:  139:	std::vector<Footage> filteredList;
        5:  140:	std::copy_if(arrayOfTapes.begin(), arrayOfTapes.end(), std::back_inserter(filteredList), [numberAccessed, &type](const Footage& footage) {
        1:  140-block  0
        1:  140-block  1
        4:  140-block  2
        4:  141:		return footage.getAccessCount() < numberAccessed and footage.getType() == type;
        4:  141-block  0
        2:  141-block  1
        4:  141-block  2
        2:  141-block  3
        4:  141-block  4
        -:  142:	});
        1:  143:	return filteredList;
        3:  144:}
    $$$$$:  144-block  0
    $$$$$:  144-block  1
    $$$$$:  144-block  2
    $$$$$:  144-block  3
        1:  144-block  4
    $$$$$:  144-block  5
    $$$$$:  144-block  6
        1:  144-block  7
        1:  144-block  8
        1:  144-block  9
        1:  144-block 10
        1:  144-block 11
        -:  145:
       22:  146:void Service::setPath(const std::string& fileName, const std::string& repositoryName) {
       22:  146-block  0
       22:  147:	if (repositoryName == "mylist") {
       22:  147-block  0
        2:  148:		if (fileName.substr(fileName.size() - 3) == "csv") {
        2:  148-block  0
        2:  149:			myListRepository = new FileRepository(fileName);
        2:  149-block  0
    $$$$$:  149-block  1
    $$$$$:  149-block  2
        2:  150:		}else if (fileName.substr(fileName.size() - 4) == "html") {
        2:  150-block  0
    $$$$$:  150-block  1
    #####:  151:			myListRepository = new HtmlFileRepository(fileName);
    $$$$$:  151-block  0
    $$$$$:  151-block  1
    #####:  152:		}else {
    $$$$$:  152-block  0
    #####:  153:			throw ValidationException("Invalid format");
    $$$$$:  153-block  0
    $$$$$:  153-block  1
    $$$$$:  153-block  2
    $$$$$:  153-block  3
    $$$$$:  153-block  4
    $$$$$:  153-block  5
    $$$$$:  153-block  6
        -:  154:		}
       22:  155:	}else if (repositoryName == "repository"){
        2:  155-block  0
       20:  155-block  1
       20:  156:		if (fileName.substr(fileName.size() - 3) == "txt") {
       20:  156-block  0
       20:  157:			repository = new FileRepository(fileName);
       20:  157-block  0
    $$$$$:  157-block  1
       20:  158:		}else {
       20:  158-block  0
    #####:  159:			repository = new SQLRepository(fileName);
    $$$$$:  159-block  0
    $$$$$:  159-block  1
    $$$$$:  159-block  2
        -:  160:		}
       20:  161:	}
       20:  161-block  0
       22:  162:}
    $$$$$:  162-block  0
       22:  162-block  1
        -:  163:
       42:  164:Service::~Service() {
       21:  164-block  0
       21:  164-block  1
       21:  165:	delete repository;
       21:  165-block  0
       20:  165-block  1
       21:  166:	delete myListRepository;
       21:  166-block  0
        2:  166-block  1
       42:  167:}
       21:  167-block  0
       21:  167-block  1
        -:  168:
    #####:  169:void Service::openMyList() {
    $$$$$:  169-block  0
    #####:  170:	myListRepository->openList();
    #####:  171:}
    $$$$$:  171-block  0
        -:  172:
        -:  173:
