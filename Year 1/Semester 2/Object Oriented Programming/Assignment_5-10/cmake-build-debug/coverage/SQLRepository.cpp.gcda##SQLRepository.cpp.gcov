        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/SQLRepository.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/SQLRepository.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/SQLRepository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 21/04/2020.
        -:    3://
        -:    4:
        -:    5:#include "SQLRepository.h"
        -:    6:#include <sstream>
        -:    7:#include <iostream>
        -:    8:
    #####:    9:SQLRepository::SQLRepository(const std::string& databaseName):currentElement(0) {
    $$$$$:    9-block  0
    $$$$$:    9-block  1
    #####:   10:	int databaseFlag = sqlite3_open(databaseName.c_str(), &database);
    $$$$$:   10-block  0
    #####:   11:	if (databaseFlag) {
    $$$$$:   11-block  0
    #####:   12:		throw RepositoryException("Database could not be opened");
    $$$$$:   12-block  0
    $$$$$:   12-block  1
    $$$$$:   12-block  2
    $$$$$:   12-block  3
    $$$$$:   12-block  4
    $$$$$:   12-block  5
    $$$$$:   12-block  6
    #####:   13:	}
    #####:   14:	char* errorMessage = nullptr;
    #####:   15:	std::string sqlStatement = "CREATE TABLE IF NOT EXISTS FOOTAGE(title text primary key not null, type text not null, date text not null, views int not null, link text not null );";
    $$$$$:   15-block  0
    #####:   16:	if (sqlite3_exec(database, sqlStatement.c_str(), nullptr, nullptr, &errorMessage) != SQLITE_OK) {
    $$$$$:   16-block  0
    $$$$$:   16-block  1
    #####:   17:		throw RepositoryException("Cannot create table");
    $$$$$:   17-block  0
    $$$$$:   17-block  1
    $$$$$:   17-block  2
    $$$$$:   17-block  3
    $$$$$:   17-block  4
    $$$$$:   17-block  5
    $$$$$:   17-block  6
        -:   18:	}
    #####:   19:}
    $$$$$:   19-block  0
    $$$$$:   19-block  1
    $$$$$:   19-block  2
    $$$$$:   19-block  3
    $$$$$:   19-block  4
    $$$$$:   19-block  5
    $$$$$:   19-block  6
    $$$$$:   19-block  7
    $$$$$:   19-block  8
        -:   20:
    #####:   21:void SQLRepository::addFootage(const Footage &newFootage) {
    $$$$$:   21-block  0
    #####:   22:	std::string sqlStatement;
    #####:   23:	sqlStatement = "INSERT INTO FOOTAGE (title, type, date, views, link) " \
    $$$$$:   23-block  0
        -:   24:					"VALUES (";
    #####:   25:	sqlStatement += '\''  + newFootage.getTitle() + '\'' + ',' + ' ' + '\'' + newFootage.getType() + '\'' + ',' + ' ' + '\'' + newFootage.getDate().toString() + '\'' + ',' + ' ' + std::to_string(newFootage.getAccessCount()) + ',' + ' ' + '\'' + newFootage.getLink() + '\'' + ')' + ' ' + ';';
    $$$$$:   25-block  0
    $$$$$:   25-block  1
    $$$$$:   25-block  2
    $$$$$:   25-block  3
    $$$$$:   25-block  4
    $$$$$:   25-block  5
    $$$$$:   25-block  6
    $$$$$:   25-block  7
    $$$$$:   25-block  8
    $$$$$:   25-block  9
    $$$$$:   25-block 10
    $$$$$:   25-block 11
    $$$$$:   25-block 12
    $$$$$:   25-block 13
    $$$$$:   25-block 14
    $$$$$:   25-block 15
    $$$$$:   25-block 16
    $$$$$:   25-block 17
    $$$$$:   25-block 18
    $$$$$:   25-block 19
    $$$$$:   25-block 20
    $$$$$:   25-block 21
    $$$$$:   25-block 22
    $$$$$:   25-block 23
    $$$$$:   25-block 24
    $$$$$:   25-block 25
    $$$$$:   25-block 26
    $$$$$:   25-block 27
    $$$$$:   25-block 28
    $$$$$:   25-block 29
    $$$$$:   25-block 30
    $$$$$:   25-block 31
    $$$$$:   25-block 32
    $$$$$:   25-block 33
    $$$$$:   25-block 34
    $$$$$:   25-block 35
    $$$$$:   25-block 36
    $$$$$:   25-block 37
    $$$$$:   25-block 38
    $$$$$:   25-block 39
    $$$$$:   25-block 40
    $$$$$:   25-block 41
    $$$$$:   25-block 42
    $$$$$:   25-block 43
    $$$$$:   25-block 44
    $$$$$:   25-block 45
    $$$$$:   25-block 46
    $$$$$:   25-block 47
    $$$$$:   25-block 48
    $$$$$:   25-block 49
    $$$$$:   25-block 50
    $$$$$:   25-block 51
    $$$$$:   25-block 52
    $$$$$:   25-block 53
    $$$$$:   25-block 54
    $$$$$:   25-block 55
    $$$$$:   25-block 56
    $$$$$:   25-block 57
    $$$$$:   25-block 58
    #####:   26:	char* errorMessage = nullptr;
    #####:   27:	if (sqlite3_exec(database, sqlStatement.c_str(), nullptr, nullptr, &errorMessage) != SQLITE_OK) {
    $$$$$:   27-block  0
    $$$$$:   27-block  1
    #####:   28:		throw RepositoryException(errorMessage);
    $$$$$:   28-block  0
    $$$$$:   28-block  1
    $$$$$:   28-block  2
    $$$$$:   28-block  3
    $$$$$:   28-block  4
    $$$$$:   28-block  5
    $$$$$:   28-block  6
        -:   29:	}
    #####:   30:}
    $$$$$:   30-block  0
    $$$$$:   30-block  1
    $$$$$:   30-block  2
    $$$$$:   30-block  3
    $$$$$:   30-block  4
    $$$$$:   30-block  5
    $$$$$:   30-block  6
    $$$$$:   30-block  7
    $$$$$:   30-block  8
    $$$$$:   30-block  9
    $$$$$:   30-block 10
    $$$$$:   30-block 11
    $$$$$:   30-block 12
    $$$$$:   30-block 13
    $$$$$:   30-block 14
    $$$$$:   30-block 15
    $$$$$:   30-block 16
    $$$$$:   30-block 17
    $$$$$:   30-block 18
    $$$$$:   30-block 19
    $$$$$:   30-block 20
    $$$$$:   30-block 21
    $$$$$:   30-block 22
    $$$$$:   30-block 23
    $$$$$:   30-block 24
    $$$$$:   30-block 25
    $$$$$:   30-block 26
    $$$$$:   30-block 27
    $$$$$:   30-block 28
    $$$$$:   30-block 29
    $$$$$:   30-block 30
    $$$$$:   30-block 31
        -:   31:
    #####:   32:SQLRepository::~SQLRepository() {
    $$$$$:   32-block  0
    $$$$$:   32-block  1
    $$$$$:   32-block  2
    #####:   33:	sqlite3_close(database);
    $$$$$:   33-block  0
    #####:   34:}
    $$$$$:   34-block  0
    $$$$$:   34-block  1
    $$$$$:   34-block  2
    $$$$$:   34-block  3
    $$$$$:   34-block  4
        -:   35:
    #####:   36:std::vector<Footage> SQLRepository::getAllFootage() {
    $$$$$:   36-block  0
    #####:   37:	std::string sqlStatement = "SELECT title, type, date, views, link FROM FOOTAGE";
        -:   38:	sqlite3_stmt *stmt;
    #####:   39:	std::vector<Footage> arrayOfFootage;
    #####:   40:	if (sqlite3_prepare_v2(database, sqlStatement.c_str(), -1, &stmt, NULL) != SQLITE_OK) {
    $$$$$:   40-block  0
    $$$$$:   40-block  1
    #####:   41:		throw RepositoryException(sqlite3_errmsg(database));
    $$$$$:   41-block  0
    $$$$$:   41-block  1
    $$$$$:   41-block  2
    $$$$$:   41-block  3
    $$$$$:   41-block  4
    $$$$$:   41-block  5
    $$$$$:   41-block  6
    $$$$$:   41-block  7
        -:   42:	}
        -:   43:	int databaseFlag;
    #####:   44:	while ((databaseFlag = sqlite3_step(stmt)) == SQLITE_ROW) {
    $$$$$:   44-block  0
    $$$$$:   44-block  1
    $$$$$:   44-block  2
    $$$$$:   44-block  3
    #####:   45:		std::string title = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 0));
    $$$$$:   45-block  0
    $$$$$:   45-block  1
    #####:   46:		std::string type = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 1));
    $$$$$:   46-block  0
    $$$$$:   46-block  1
    #####:   47:		std::string dateString = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 2));
    $$$$$:   47-block  0
    $$$$$:   47-block  1
    #####:   48:		std::stringstream convertStringToDate(dateString);
    $$$$$:   48-block  0
    #####:   49:		Date date;
    $$$$$:   49-block  0
    #####:   50:		convertStringToDate >> date;
    $$$$$:   50-block  0
    #####:   51:		int accessCount = sqlite3_column_int(stmt, 3);
    $$$$$:   51-block  0
    #####:   52:		std::string link = reinterpret_cast<const char*>(sqlite3_column_text(stmt, 4));
    $$$$$:   52-block  0
    $$$$$:   52-block  1
    #####:   53:		arrayOfFootage.push_back(Footage(title, type, date, accessCount, link));
    $$$$$:   53-block  0
    $$$$$:   53-block  1
    $$$$$:   53-block  2
    $$$$$:   53-block  3
    $$$$$:   53-block  4
    $$$$$:   53-block  5
    $$$$$:   53-block  6
    $$$$$:   53-block  7
    $$$$$:   53-block  8
    #####:   54:	}
    $$$$$:   54-block  0
    $$$$$:   54-block  1
    $$$$$:   54-block  2
    $$$$$:   54-block  3
    $$$$$:   54-block  4
    #####:   55:	if (databaseFlag != SQLITE_DONE) {
    $$$$$:   55-block  0
    #####:   56:		sqlite3_finalize(stmt);
    $$$$$:   56-block  0
    #####:   57:		throw sqlite3_errmsg(database);
    $$$$$:   57-block  0
    $$$$$:   57-block  1
    $$$$$:   57-block  2
        -:   58:	}
    #####:   59:	sqlite3_finalize(stmt);
    $$$$$:   59-block  0
    #####:   60:	return arrayOfFootage;
    #####:   61:}
    $$$$$:   61-block  0
    $$$$$:   61-block  1
    $$$$$:   61-block  2
    $$$$$:   61-block  3
    $$$$$:   61-block  4
    $$$$$:   61-block  5
    $$$$$:   61-block  6
    $$$$$:   61-block  7
    $$$$$:   61-block  8
    $$$$$:   61-block  9
    $$$$$:   61-block 10
    $$$$$:   61-block 11
    $$$$$:   61-block 12
    $$$$$:   61-block 13
    $$$$$:   61-block 14
        -:   62:
    #####:   63:void SQLRepository::deleteFootage(const std::string &title) {
    $$$$$:   63-block  0
    #####:   64:	std::string sqlStatement = "DELETE from FOOTAGE where title=" + title + ';';
    $$$$$:   64-block  0
    $$$$$:   64-block  1
    $$$$$:   64-block  2
    #####:   65:	if (sqlite3_exec(database, sqlStatement.c_str(), nullptr, nullptr, nullptr) != SQLITE_OK) {
    $$$$$:   65-block  0
    $$$$$:   65-block  1
    #####:   66:		std::cout << sqlite3_errmsg(database);
    $$$$$:   66-block  0
    $$$$$:   66-block  1
    #####:   67:		throw RepositoryException("Footage does not exist");
    $$$$$:   67-block  0
    $$$$$:   67-block  1
    $$$$$:   67-block  2
    $$$$$:   67-block  3
    $$$$$:   67-block  4
    $$$$$:   67-block  5
    $$$$$:   67-block  6
        -:   68:	}
    #####:   69:}
    $$$$$:   69-block  0
    $$$$$:   69-block  1
    $$$$$:   69-block  2
    $$$$$:   69-block  3
        -:   70:
    #####:   71:void SQLRepository::updateFootage(const Footage &newFootage) {
    $$$$$:   71-block  0
    #####:   72:	std::string sqlStatement = "UPDATE FOOTAGE set type = \"" + newFootage.getType() +  "\", date = \"" + newFootage.getDate().toString() + "\", views = " + std::to_string(newFootage.getAccessCount()) + ", link = \"" + newFootage.getLink() + "\" where title=\"" + newFootage.getTitle() + "\";";
    $$$$$:   72-block  0
    $$$$$:   72-block  1
    $$$$$:   72-block  2
    $$$$$:   72-block  3
    $$$$$:   72-block  4
    $$$$$:   72-block  5
    $$$$$:   72-block  6
    $$$$$:   72-block  7
    $$$$$:   72-block  8
    $$$$$:   72-block  9
    $$$$$:   72-block 10
    $$$$$:   72-block 11
    $$$$$:   72-block 12
    $$$$$:   72-block 13
    $$$$$:   72-block 14
    $$$$$:   72-block 15
    $$$$$:   72-block 16
    $$$$$:   72-block 17
    $$$$$:   72-block 18
    $$$$$:   72-block 19
    $$$$$:   72-block 20
    $$$$$:   72-block 21
    $$$$$:   72-block 22
    $$$$$:   72-block 23
    $$$$$:   72-block 24
    $$$$$:   72-block 25
    $$$$$:   72-block 26
    $$$$$:   72-block 27
    $$$$$:   72-block 28
    $$$$$:   72-block 29
    $$$$$:   72-block 30
        -:   73:	// ", date = " + newFootage.getDate().toString() + ", views = " + std::to_string(newFootage.getAccessCount()) + ", link = " + newFootage.getLink() +
    #####:   74:	if (sqlite3_exec(database, sqlStatement.c_str(), nullptr, nullptr, nullptr) != SQLITE_OK) {
    $$$$$:   74-block  0
    $$$$$:   74-block  1
    #####:   75:		std::cout << sqlite3_errmsg(database);
    $$$$$:   75-block  0
    $$$$$:   75-block  1
    #####:   76:		throw RepositoryException("Footage does not exist");
    $$$$$:   76-block  0
    $$$$$:   76-block  1
    $$$$$:   76-block  2
    $$$$$:   76-block  3
    $$$$$:   76-block  4
    $$$$$:   76-block  5
    $$$$$:   76-block  6
        -:   77:	}
    #####:   78:}
    $$$$$:   78-block  0
    $$$$$:   78-block  1
    $$$$$:   78-block  2
    $$$$$:   78-block  3
    $$$$$:   78-block  4
    $$$$$:   78-block  5
    $$$$$:   78-block  6
    $$$$$:   78-block  7
    $$$$$:   78-block  8
    $$$$$:   78-block  9
    $$$$$:   78-block 10
    $$$$$:   78-block 11
    $$$$$:   78-block 12
    $$$$$:   78-block 13
    $$$$$:   78-block 14
    $$$$$:   78-block 15
    $$$$$:   78-block 16
        -:   79:
    #####:   80:Footage SQLRepository::getCurrentElement() {
    $$$$$:   80-block  0
    #####:   81:	std::vector<Footage> arrayOfFootage = getAllFootage();
    #####:   82:	if (arrayOfFootage.size() == 0) {
    $$$$$:   82-block  0
    #####:   83:		throw RepositoryException("There are no elements in the list");
    $$$$$:   83-block  0
    $$$$$:   83-block  1
    $$$$$:   83-block  2
    $$$$$:   83-block  3
    $$$$$:   83-block  4
    $$$$$:   83-block  5
    $$$$$:   83-block  6
        -:   84:	}
    #####:   85:	if (currentElement == arrayOfFootage.size()) {
    $$$$$:   85-block  0
    #####:   86:		currentElement = 0;
    #####:   87:	}
    $$$$$:   87-block  0
    #####:   88:	return (*(arrayOfFootage.begin() + currentElement++));
    $$$$$:   88-block  0
    #####:   89:}
    $$$$$:   89-block  0
    $$$$$:   89-block  1
    $$$$$:   89-block  2
    $$$$$:   89-block  3
    $$$$$:   89-block  4
        -:   90:
