        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/HtmlFileRepository.h
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/HtmlFileRepository.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/HtmlFileRepository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 15/04/2020.
        -:    3://
        -:    4:
        -:    5:#ifndef ASSIGNMENT_7_8_HTMLFILEREPOSITORY_H
        -:    6:#define ASSIGNMENT_7_8_HTMLFILEREPOSITORY_H
        -:    7:
        -:    8:#include "Repository.h"
        -:    9:
        -:   10:
    #####:   11:class HtmlFileRepository: public Repository {
    $$$$$:   11-block  0
    $$$$$:   11-block  1
    $$$$$:   11-block  2
    $$$$$:   11-block  3
    $$$$$:   11-block  4
    $$$$$:   11-block  5
        -:   12:private:
        -:   13:	const std::string& pathName;
        -:   14:	int currentElement;
        -:   15:
        -:   16:	void writeToFile(const std::vector<Footage>& arrayToBeWritten);
        -:   17:
        -:   18://	Footage getFootageFromHtmlLine(std::string htmlFileLine);
        -:   19:
        -:   20:	std::vector<Footage> readHtmlFile();
        -:   21:public:
        -:   22:	explicit HtmlFileRepository(const std::string& fileName);
        -:   23:
        -:   24:	/*
        -:   25:	 * Adds footage to the repository
        -:   26:	 * Input:
        -:   27:	 * newFootage - const Footage&
        -:   28:	 * Throws:
        -:   29:	 * std::exception() if same title exists
        -:   30:	 */
        -:   31:	void addFootage(const Footage& newFootage) override;
        -:   32:
        -:   33:	/*
        -:   34:	 * Removes a footage from the repository
        -:   35:	 * Input:
        -:   36:	 * titleToBeRemoved - const std::string&
        -:   37:	 * Throws:
        -:   38:	 * std::exception() if title does not exist
        -:   39:	 */
        -:   40:	void deleteFootage(const std::string& titleToBeRemoved) override;
        -:   41:
        -:   42:	/*
        -:   43:	 * Updates a footage from the repository
        -:   44:	 * Input:
        -:   45:	 * newFootage - const Footage&
        -:   46:	 * Throws:
        -:   47:	 * std::exception() if title does not exist
        -:   48:	 */
        -:   49:	void updateFootage(const Footage& newFootage) override;
        -:   50:
        -:   51:	/*
        -:   52:	 * Function that gets all the footage from the repository
        -:   53:	 * Input:
        -:   54:	 *
        -:   55:	 * Output:
        -:   56:	 * std::vector<Footage> - vector of elements
        -:   57:	 */
        -:   58:	std::vector<Footage> getAllFootage() override;
        -:   59:
        -:   60:	/*
        -:   61:	 * Function that returns the current element from the repository
        -:   62:	 * Input:
        -:   63:	 *
        -:   64:	 * Ouput:
        -:   65:	 * Footage - current element from repository
        -:   66:	 */
        -:   67:	Footage getCurrentElement() override;
        -:   68:
        -:   69:	void openList() override;
        -:   70:};
        -:   71:
        -:   72:
        -:   73:#endif //ASSIGNMENT_7_8_HTMLFILEREPOSITORY_H
