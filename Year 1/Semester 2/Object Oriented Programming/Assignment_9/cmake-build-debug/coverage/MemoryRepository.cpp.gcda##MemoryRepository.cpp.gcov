        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/MemoryRepository.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/MemoryRepository.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/MemoryRepository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 12/04/2020.
        -:    3://
        -:    4:
        -:    5:#include "MemoryRepository.h"
       14:    6:MemoryRepository::MemoryRepository(): currentElement(0) {
        7:    6-block  0
        7:    6-block  1
        7:    7:	arrayOfTapes = std::vector<Footage>();
       14:    8:}
        7:    8-block  0
        7:    8-block  1
        -:    9:
        9:   10:void MemoryRepository::addFootage(const Footage &newFootage) {
        9:   10-block  0
       10:   11:	for (auto & arrayOfTape : arrayOfTapes) {
        9:   11-block  0
       10:   11-block  1
        1:   11-block  2
        1:   11-block  3
        3:   12:		if (arrayOfTape.getTitle() == newFootage.getTitle()) {
        2:   12-block  0
        2:   12-block  1
    $$$$$:   12-block  2
        1:   12-block  3
        1:   13:			throw RepositoryException("Duplicate Footage");
        1:   13-block  0
        1:   13-block  1
        1:   13-block  2
        1:   13-block  3
        1:   13-block  4
    $$$$$:   13-block  5
        1:   13-block  6
        -:   14:		}
        -:   15:	}
        8:   16:	arrayOfTapes.push_back(newFootage);
        9:   17:}
    $$$$$:   17-block  0
        8:   17-block  1
        -:   18:
        2:   19:void MemoryRepository::deleteFootage(const std::string &titleToBeRemoved) {
        2:   19-block  0
        3:   20:	for (auto iteratorRepository = arrayOfTapes.begin(); iteratorRepository != arrayOfTapes.end(); ++iteratorRepository) {
        2:   20-block  0
        3:   20-block  1
        1:   20-block  2
        2:   21:		if (iteratorRepository->getTitle() == titleToBeRemoved) {
        2:   21-block  0
        1:   22:			arrayOfTapes.erase(iteratorRepository);
        1:   23:			return;
        1:   23-block  0
        -:   24:		}
        1:   25:	}
        1:   25-block  0
        1:   26:	throw RepositoryException("Footage does not exist");
        1:   26-block  0
        1:   26-block  1
        1:   26-block  2
        1:   26-block  3
        1:   26-block  4
    $$$$$:   26-block  5
        1:   26-block  6
        1:   26-block  7
        1:   27:}
    $$$$$:   27-block  0
        -:   28:
        2:   29:void MemoryRepository::updateFootage(const Footage &newFootage) {
        2:   29-block  0
        3:   30:	for (auto & arrayOfTape : arrayOfTapes) {
        2:   30-block  0
        3:   30-block  1
        1:   30-block  2
        1:   30-block  3
        3:   31:		if (arrayOfTape.getTitle() == newFootage.getTitle()) {
        2:   31-block  0
        2:   31-block  1
    $$$$$:   31-block  2
        1:   31-block  3
        1:   32:			arrayOfTape = newFootage;
        1:   33:			return;
        1:   33-block  0
        -:   34:		}
        -:   35:	}
        1:   36:	throw RepositoryException("Footage does not exist");}
        1:   36-block  0
        1:   36-block  1
        1:   36-block  2
    $$$$$:   36-block  3
        1:   36-block  4
        1:   36-block  5
    $$$$$:   36-block  6
        1:   36-block  7
        -:   37:
        3:   38:std::vector<Footage> MemoryRepository::getAllFootage() {
        3:   38-block  0
        3:   39:	auto arrayOfFootage = std::vector<Footage>();
        5:   40:	for (auto & arrayOfTape : arrayOfTapes) {
        3:   40-block  0
        5:   40-block  1
        2:   40-block  2
        2:   40-block  3
        2:   41:		arrayOfFootage.push_back(arrayOfTape);
        2:   41-block  0
        -:   42:	}
        3:   43:	return arrayOfFootage;
        3:   44:}
    $$$$$:   44-block  0
        3:   44-block  1
    $$$$$:   44-block  2
        3:   44-block  3
    $$$$$:   44-block  4
        -:   45:
        3:   46:Footage MemoryRepository::getCurrentElement() {
        3:   46-block  0
        3:   47:	if (currentElement == arrayOfTapes.size()) {
        3:   47-block  0
        1:   48:		currentElement = 0;
        1:   49:	}
        1:   49-block  0
        3:   50:	return *(arrayOfTapes.begin() + currentElement++);
        3:   50-block  0
        -:   51:}
        -:   52:
