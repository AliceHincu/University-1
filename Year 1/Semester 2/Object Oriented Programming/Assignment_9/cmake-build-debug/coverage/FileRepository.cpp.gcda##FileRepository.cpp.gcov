        -:    0:Source:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/FileRepository.cpp
        -:    0:Graph:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/FileRepository.cpp.gcno
        -:    0:Data:/Users/taveeh/Desktop/University/Year 1/Semester 2/Object Oriented Programming/Assignment_9/cmake-build-debug/CMakeFiles/Assignment_9.dir/FileRepository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by Octavian Custura on 12/04/2020.
        -:    3://
        -:    4:
        -:    5:#include "FileRepository.h"
        -:    6:#include <fstream>
        -:    7:#include <vector>
        -:    8:#include <iostream>
        -:    9:
       58:   10:FileRepository::FileRepository(const std::string& file): fileName(file), currentElement(0) {
       29:   10-block  0
       29:   10-block  1
       29:   11:	std::ifstream doesFileExist(file);
       29:   11-block  0
       29:   12:	if (!doesFileExist) {
       29:   12-block  0
       29:   12-block  1
    #####:   13:		std::ofstream createFileToExist(file);
    $$$$$:   13-block  0
    #####:   14:		createFileToExist.close();
    $$$$$:   14-block  0
    #####:   15:	}
    $$$$$:   15-block  0
    $$$$$:   15-block  1
       29:   16:	doesFileExist.close();
       29:   16-block  0
       58:   17:}
    $$$$$:   17-block  0
    $$$$$:   17-block  1
       29:   17-block  2
    $$$$$:   17-block  3
    $$$$$:   17-block  4
    $$$$$:   17-block  5
       29:   17-block  6
        -:   18:
       29:   19:void FileRepository::addFootage(const Footage &newFootage) {
       29:   19-block  0
       29:   20:	Footage footage;
        -:   21:
       29:   22:	std::ifstream fileIn(fileName);
       29:   22-block  0
       29:   23:	std::vector<Footage> arrayOfFootage;
       41:   24:	while (fileIn >> footage) {
       29:   24-block  0
       41:   24-block  1
       41:   24-block  2
       41:   24-block  3
       12:   24-block  4
       14:   25:		if (footage.getTitle().empty()) break;
       14:   25-block  0
       14:   25-block  1
    $$$$$:   25-block  2
       14:   26:		if (footage.getTitle() == newFootage.getTitle()) {
       14:   26-block  0
       14:   26-block  1
       14:   26-block  2
    $$$$$:   26-block  3
        2:   27:			throw RepositoryException("Duplicate footage");
        2:   27-block  0
        2:   27-block  1
        2:   27-block  2
        2:   27-block  3
        2:   27-block  4
    $$$$$:   27-block  5
        2:   27-block  6
        -:   28:		}
       12:   29:		arrayOfFootage.push_back(footage);
       12:   29-block  0
        -:   30:	}
       27:   31:	fileIn.close();
       27:   31-block  0
       27:   32:	arrayOfFootage.push_back(newFootage);
       27:   32-block  0
        -:   33:
       27:   34:	std::ofstream fileOut(fileName);
       27:   34-block  0
       66:   35:	for (const auto& footageElement: arrayOfFootage) {
       27:   35-block  0
       66:   35-block  1
       39:   35-block  2
       39:   35-block  3
       39:   36:		fileOut << footageElement;
       39:   36-block  0
        -:   37:	}
       27:   38:	fileOut.close();
       27:   38-block  0
       31:   39:}
    $$$$$:   39-block  0
    $$$$$:   39-block  1
    $$$$$:   39-block  2
    $$$$$:   39-block  3
       27:   39-block  4
        2:   39-block  5
        2:   39-block  6
        2:   39-block  7
        -:   40:
        4:   41:void FileRepository::deleteFootage(const std::string &titleToBeRemoved) {
        4:   41-block  0
        4:   42:	std::vector<Footage> arrayOfFootage;
        4:   43:	Footage footage;
        4:   43-block  0
        4:   44:	std::ifstream fileIn(fileName);
        4:   44-block  0
        4:   45:	bool ok = true;
        4:   46:	std::string lineFootage;
        7:   47:	while (fileIn >> footage) {
        4:   47-block  0
        7:   47-block  1
        7:   47-block  2
        7:   47-block  3
        3:   47-block  4
        3:   48:		if (footage.getTitle() == titleToBeRemoved) {
        3:   48-block  0
        3:   48-block  1
        2:   49:			ok = false;
        3:   50:		}else arrayOfFootage.push_back(footage);
        2:   50-block  0
        1:   50-block  1
        -:   51:	}
        4:   52:	if (ok) {
        4:   52-block  0
        2:   53:		throw RepositoryException("Footage does not exist");
        2:   53-block  0
        2:   53-block  1
        2:   53-block  2
        2:   53-block  3
        2:   53-block  4
    $$$$$:   53-block  5
        2:   53-block  6
        -:   54:	}
        2:   55:	fileIn.close();
        2:   55-block  0
        2:   56:	std::ofstream fileOut(fileName);
        2:   56-block  0
        2:   57:	for (const auto& footageToFile: arrayOfFootage) fileOut << footageToFile;
        2:   57-block  0
        2:   57-block  1
    $$$$$:   57-block  2
    $$$$$:   57-block  3
    $$$$$:   57-block  4
        2:   58:	fileOut.close();
        2:   58-block  0
        6:   59:}
    $$$$$:   59-block  0
    $$$$$:   59-block  1
    $$$$$:   59-block  2
    $$$$$:   59-block  3
    $$$$$:   59-block  4
        2:   59-block  5
        2:   59-block  6
        2:   59-block  7
        2:   59-block  8
        2:   59-block  9
        -:   60:
        3:   61:void FileRepository::updateFootage(const Footage &newFootage) {
        3:   61-block  0
        3:   62:	std::vector<Footage> arrayOfFootage;
        3:   63:	Footage footage;
        3:   63-block  0
        3:   64:	std::ifstream fileIn(fileName);
        3:   64-block  0
        3:   65:	bool ok = true;
        6:   66:	while (fileIn >> footage) {
        3:   66-block  0
        6:   66-block  1
        6:   66-block  2
        6:   66-block  3
        3:   66-block  4
        3:   67:		if (footage.getTitle() == newFootage.getTitle()) {
        3:   67-block  0
        3:   67-block  1
        3:   67-block  2
    $$$$$:   67-block  3
        2:   68:			arrayOfFootage.push_back(newFootage);
        2:   68-block  0
        2:   69:			ok = false;
        3:   70:		} else arrayOfFootage.push_back(footage);
        2:   70-block  0
        1:   70-block  1
        -:   71:	}
        3:   72:	if (ok) throw RepositoryException("Footage does not exist");
        3:   72-block  0
        1:   72-block  1
        1:   72-block  2
        1:   72-block  3
        1:   72-block  4
        1:   72-block  5
    $$$$$:   72-block  6
        1:   72-block  7
        2:   73:	fileIn.close();
        2:   73-block  0
        2:   74:	std::ofstream fileOut(fileName);
        2:   74-block  0
        4:   75:	for (const auto& footageToFile: arrayOfFootage) {
        2:   75-block  0
        4:   75-block  1
        2:   75-block  2
        2:   75-block  3
        2:   76:		fileOut << footageToFile;
        2:   76-block  0
        -:   77:	}
        2:   78:	fileOut.close();
        2:   78-block  0
        4:   79:}
    $$$$$:   79-block  0
    $$$$$:   79-block  1
    $$$$$:   79-block  2
    $$$$$:   79-block  3
    $$$$$:   79-block  4
        2:   79-block  5
        1:   79-block  6
        1:   79-block  7
        1:   79-block  8
        1:   79-block  9
        -:   80:
       14:   81:std::vector<Footage> FileRepository::getAllFootage() {
       14:   81-block  0
       14:   82:	std::vector<Footage> allFootage;
       14:   83:	std::ifstream fileIn(fileName);
       14:   83-block  0
       14:   84:	Footage footage;
       14:   84-block  0
       32:   85:	while (fileIn >> footage) {
       14:   85-block  0
       32:   85-block  1
       32:   85-block  2
       32:   85-block  3
       18:   85-block  4
       18:   86:		allFootage.push_back(footage);
       18:   86-block  0
        -:   87:	}
       14:   88:	return allFootage;
       14:   89:}
    $$$$$:   89-block  0
    $$$$$:   89-block  1
    $$$$$:   89-block  2
       14:   89-block  3
    $$$$$:   89-block  4
    $$$$$:   89-block  5
       14:   89-block  6
    $$$$$:   89-block  7
    $$$$$:   89-block  8
        -:   90:
        3:   91:Footage FileRepository::getCurrentElement() {
        3:   91-block  0
        3:   92:	std::vector<Footage> arrayOfTapes = getAllFootage();
        3:   93:	if (currentElement == arrayOfTapes.size()) 		currentElement = 0;
        3:   93-block  0
        1:   93-block  1
        3:   94:	return *(arrayOfTapes.begin() + currentElement++);
        3:   94-block  0
        3:   95:}
        3:   95-block  0
    $$$$$:   95-block  1
    $$$$$:   95-block  2
        -:   96:
    #####:   97:void FileRepository::openList() {
    $$$$$:   97-block  0
    #####:   98:	std::string systemString = "open " + fileName;
    #####:   99:	const char* openListString = systemString.c_str();
    #####:  100:	system(openListString);
    $$$$$:  100-block  0
    #####:  101:}
    $$$$$:  101-block  0
    $$$$$:  101-block  1
    $$$$$:  101-block  2
        -:  102:
        -:  103://void FileRepository::setPath(const std::string& newFileName) {
        -:  104://	if (fileName == " ") {
        -:  105://		throw std::exception();
        -:  106://	}
        -:  107://	std::ofstream createFileIfNotExist(fileName);
        -:  108://	createFileIfNotExist.close();
        -:  109://	fileName = newFileName;
        -:  110://}
        -:  111://
        -:  112:
        -:  113:
